#
# arith/Adder.java
#
adderCarryInTip = Carry In: if 1, an additional 1 is added to output
adderCarryOutTip = Carry Out: 1 if the sum overflows the available bits
adderComponent = Adder
adderInputTip = Input: one of the numbers to add
adderOutputTip = Output: the sum of the inputs (plus carry in)
#
# arith/Arithmetic.java
#
arithmeticLibrary = Arithmetic
#
# arith/BitAdder.java
#
bitAdderComponent = Bit Adder
bitAdderInputTip = Input: the bits to be counted
bitAdderOutputManyTip = Output: how many input bits are 1
gateInputsAttr = Number Of Inputs
#
# arith/BitFinder.java
#
bitFinderComponent = Bit Finder
bitFinderFindLabel = find
bitFinderHighLabel = high
bitFinderHighOption = Highest-order %s
bitFinderIndexHighTip = Index: index of input's highest-order %s
bitFinderIndexLowTip = Index: index of input's lowest-order %s
bitFinderInputTip = Input: the bits to be searched
bitFinderLowLabel = low
bitFinderLowOption = Lowest-order %s
bitFinderPresentTip = Present: 1 if input contains a %s
bitFinderTypeAttr = Type
#
# arith/Comparator.java
#
comparatorComponent = Comparator
comparatorEqualTip = Equal: 1 if A is equal to B
comparatorGreaterTip = Greater: 1 if A is greater than B
comparatorInputATip = A: the number preceding the comparison operation
comparatorInputBTip = B: the number following the comparison operation
comparatorLessTip = Less: 1 if A is less than B
comparatorType = Numeric Type
twosComplementOption = 2's Complement
unsignedOption = Unsigned
#
# arith/Divider.java
#
dividerComponent = Divider
dividerDividendLowerTip = Dividend Lower: the lower half of the number to divide
dividerDividendUpperTip = Dividend Upper: the upper half of the number to divide
dividerDivisorTip = Divisor: the number by which to divide
dividerOutputTip = Output: the result of dividing the dividend by the divisor
dividerRemainderOutput = rem
dividerRemainderTip = Remainder: the remainder (dividend - output * divisor)
dividerUpperInput = upper
#
# arith/Multiplier.java
#
multiplierCarryInTip = Carry In: an amount to be added into the output
multiplierCarryOutTip = Carry Out: the upper bits of the product
multiplierComponent = Multiplier
multiplierInputTip = Input: one of the numbers to multiply
multiplierOutputTip = Output: the product of the inputs, plus the carry in
#
# arith/Negator.java
#
negatorComponent = Negator
negatorInputTip = Input: the number to be negated
negatorOutputTip = Output: the two's-complement negation of the input
#
# arith/Shifter.java
#
shiftArithmeticRight = Arithmetic Right
shifterComponent = Shifter
shifterDistanceTip = Distance: how far to shift the input
shifterInputTip = Input: bits to be shifted
shifterOutputTip = Output: result of shifting the input
shifterShiftAttr = Shift Type
shiftLogicalLeft = Logical Left
shiftLogicalRight = Logical Right
shiftRollLeft = Rotate Left
shiftRollRight = Rotate Right
#
# arith/Subtractor.java
#
subtractorBorrowInTip = Borrow In: if 1, output is decreased by 1
subtractorBorrowOutTip = Borrow Out: 1 if the difference yields a negative value
subtractorComponent = Subtractor
subtractorMinuendTip = Minuend: the number from which to subtract
subtractorOutputTip = Output: the difference of the minuend and the subtrahend
subtractorSubtrahendTip = Subtrahend: the number to subtract from the minuend
#
# base/Base.java
#
baseLibrary = Base
#
# base/Text.java
#
textComponent = Label
textFontAttr = Font
textHorzAlignAttr = Horizontal Alignment
textHorzAlignCenterOpt = Center
textHorzAlignLeftOpt = Left
textHorzAlignRightOpt = Right
textTextAttr = Text
textVertAlignAttr = Vertical Alignment
textVertAlignBaseOpt = Base
textVertAlignBottomOpt = Bottom
textVertAlignCenterOpt = Center
textVertAlignTopOpt = Top
#
# base/VhdlParser.java
#
CannotFindEntityException = The entity declaration cannot be found
emptySourceException = Cannot parse empty content
genericDeclarationException = Illegal generics syntax
genericTypeException = Unsupported generics type
genericValueException = Unrecognized generics default value
invalidTypeException = Invalid port type
portDeclarationException = Illegal port syntax
#
# Builtin.java
#
builtinLibrary = Built-In
#
# gates/AndGate.java
#
andGateComponent = AND Gate
#
# gates/Buffer.java
#
bufferComponent = Buffer
#
# gates/ControlledBuffer.java
#
controlledBufferComponent = Controlled Buffer
controlledControlOption = Control Line Location
controlledInverterComponent = Controlled Inverter
controlledLeftHanded = Left-Handed
controlledRightHanded = Right-Handed
#
# gates/EvenParityGate.java
#
evenParityComponent = Even Parity
#
# gates/GateAttributes.java
#
gateOutput01 = 0/1
gateOutput0Z = 0/floating
gateOutputAttr = Output Value
gateOutputZ1 = floating/1
gateSizeNormalOpt = Medium
xorBehaviorAttr = Multiple-Input Behavior
xorBehaviorOdd = When an odd number are on
xorBehaviorOne = When one input is on
#
# gates/Gates.java
#
gatesLibrary = Gates
#
# gates/NandGate.java
#
nandGateComponent = NAND Gate
#
# gates/NegateAttribute.java
#
gateNegateAttr = Negate %s
#
# gates/NorGate.java
#
norGateComponent = NOR Gate
#
# gates/NotGate.java
#
notGateComponent = NOT Gate
#
# gates/OddParityGate.java
#
oddParityComponent = Odd Parity
#
# gates/OrGate.java
#
orGateComponent = OR Gate
#
# gates/PLA.java
#
plaBitWidthIn = Bit width in
plaBitWidthOut = Bit width out
input = input
output = output
PLA = PLA
plaClickToEdit = (click to edit)
plaEditMenuItem = Edit PLA Program...
plaProgram = Program
#
# gates/PLATable.java
#
plaEditorTitle = PLA Program Editor
plaFileCreateError = Could not create file.
plaFileOpenError = Could not open file.
plaLoadDialogTitle = Load PLA Program
plaLoadErrorTitle = Error Loading PLA Program
plaSaveDialogTitle = Save PLA Program
plaSaveErrorTitle = Error Saving PLA Program
#
# gates/XnorGate.java
#
xnorGateComponent = XNOR Gate
#
# gates/XorGate.java
#
xorGateComponent = XOR Gate
#
# InstanceComponent.java
#
KeywordNameError = Label is a reserved keyword and cannot be used. Please specify a different label.
MatchedLabelNameError = Label and component name may not be the same (they are case-insensitive). Please specify a label different from the component name.
#
# InstanceTextField.java
#
changeLabelAction = Change Label
#
# io/DipSwitch.java
#
DIP = DIP
DipSwitchComponent = Dip Switch
nrOfSwitch = Number of Switch
#
# io/DotMatrix.java
#
ioInputColumn = Columns
ioInputRow = Rows
ioInputSelect = Select Rows/Columns
ioMatrixCols = Matrix Columns
ioMatrixInput = Input Format
ioMatrixPersistenceAttr = Light Persistence
ioMatrixRows = Matrix Rows
ioMatrixShape = Dot Shape
ioShapeCircle = Circular
ioShapeSquare = Square
#
# io/extra/Buzzer.java
#
buzzerFrequecy = frequency
buzzerVolume = volume
buzzerVolumeBitWidth = volume bit width
buzzerUnitDhz = dHz (0.1Hz)
enableSound = Enable sound
Hz = Hz
#
# io/extra/DigitalOscilloscope.java
#
BorderColor = Border color
bothOption = both
ClearDiagram = Clear diagram
DigitalOscilloscopeClock = clock
DrawClockFrontLine = draw clock front line
noOption = none
ShowClockAttribute = Show clock attribute
stdTriggerFalling = Falling Edge
stdTriggerRising = Rising Edge
#
# io/extra/ITA_IO.java
#
buzzerComponent = Buzzer
DigitalOscilloscopeComponent = Digital oscilloscope
PlaRomComponent = PLA
Slider = Slider
switchComponent = Switch
#
# io/extra/PlaRom.java
#
memCSTip = Chip select: 0 disables component
PlaANDAttr = And
PlaOutputsAttr = Output
ramCSLabel = sel
#
# io/extra/PlaRomData.java
#
PlaEditWindowTitel = Pla Rom %s edit window
#
# io/extra/ProgrammableGenerator.java
#
NStateAttr = Nr. of States
ProgrammableGeneratorComponent = Progr. generator
ramClearMenuItem = Clear Contents
ramEditMenuItem = Edit Contents...
romContentsAttr = Contents
romContentsValue = (click to edit)
#
# io/extra/Slider.java
#
left_to_rightOption = left to right
right_to_leftOption = right to left
#
# io/HexDigit.java
#
hexDigitDataTip = Data: nibble to display in hex
hexDigitDPTip = DecimalPoint: lights the decimal point
#
# io/Io.java
#
buttonComponent = Button
dipswitchComponent = Dip switch
dotMatrixComponent = LED Matrix
hexDigitComponent = Hex Digit Display
ioActiveAttr = Active On High?
ioBackgroundColor = Background
ioColorAttr = Color
ioLibrary = Input/Output
ioOffColor = Off Color
ioOnColor = On Color
joystickComponent = Joystick
ledComponent = LED
pioComponent = Port I/O
repLBComponent = Reptar Local Bus
RGBledComponent = RGBLED
sevenSegmentComponent = 7-Segment Display
ttyComponent = TTY
#
# io/Joystick.java
#
ioBitWidthAttr = Bit Width
#
# io/Keyboard.java
#
keybAvailTip = Available: 1 when buffer contains characters
keybBufferLengthAttr = Buffer Length
keybClearTip = Clear: 1 empties buffer
keybClockTip = Clock: trigger consumes the buffer's front character
keybDesc = keyboard (buffer cap. %s)
keybEnableTip = Read enable: 0 disables clock
keyboardComponent = Keyboard
keybOutputTip = Data: ASCII value of buffer's front character
#
# io/PortIO.java
#
pioDirection = Port type:
pioInput = Inputs only
pioInputs = Inputs %s
pioIOMultiple = I/O (per-bit enable)
pioIOSingle = I/O (single enable)
pioNumber = Number of pins
pioOutEnable = Output enable
pioOutEnables = Output enables %s
pioOutput = Outputs only
pioOutputs = Outputs %s
#
# io/ReptarLocalBus.java
#
repLBTip = B tip
#
# io/RGBLed.java
#
BLUE = Blue input
GREEN = Green input
RED = Red input
#
# io/SevenSegment.java
#
DecimalPoint = Decimal point
Segment_A = Segment A
Segment_B = Segment B
Segment_C = Segment C
Segment_D = Segment D
Segment_E = Segment E
Segment_F = Segment F
Segment_G = Segment G
SevenSegDP = Has decimal point:
#
# io/Tty.java
#
ttyClearTip = Clear: 1 clears screen
ttyClockTip = Clock: trigger adds character on input
ttyColsAttr = Columns
ttyDesc = TTY (%s rows, %s cols)
ttyDescShort = TTY
ttyEnableTip = Write enable: 0 disables clock
ttyInputTip = Data: ASCII value of next character to write
ttyRowsAttr = Rows
#
# io/Video.java
#
rgbVideoCLK = Clock
rgbVideoColor = Color Model
rgbVideoComponent = RGB Video
rgbVideoCursor = Cursor
rgbVideoData = Data in %s format
rgbVideoHeight = Height
rgbVideoReset = Reset Behavior
rgbVideoRST = Reset
rgbVideoScale = Scale
rgbVideoWE = Write Enable
rgbVideoWidth = Width
rgbVideoX = X Coordinate
rgbVideoY = Y Coordinate
#
# library/bcd2sevenseg.java
#
BCDValue = BCD value
BCD2SevenSegment = BCD to seven segment
#
# library/BFHPraktika.java
#
BFHMegaFunctions = BFH mega functions
Bin2BCD = Binary to BCD
#
# library/bin2bcd.java
#
BinaryDataBits = Binary data bits
BinaryInputTip = Binary input
#
# memory/AbstractFlipFlop.java
#
flipFlopClockTip = Clock: state updates on trigger
flipFlopNotQTip = Complement of current flip-flop state
flipFlopPresetTip = Preset: When 1, pin state to 1 asynchronously
flipFlopQTip = Current flip-flop state
flipFlopResetTip = Clear: When 1, pin state to 0 asynchronously
#
# memory/Counter.java
#
counterCarryTip = Carry: is 1 when value reaches maximum (minimum if decrementing)
counterClockTip = Clock: value may update on trigger
counterComponent = Counter
counterDataTip = Data: value to load into counter
counterEnableLabel = ct
counterEnableTip = Enable: when 1, counter increments or decrements
counterGoalAttr = Action On Overflow
counterGoalContinue = Continue counting
counterGoalLoad = Load next value
counterGoalStay = Stay at value
counterGoalWrap = Wrap around
counterLabel = ctr
counterLoadTip = Load: when 1, loads from data input
counterMaxAttr = Maximum Value
counterQTip = Output: current value of counter
counterResetTip = Clear: when 1, resets to 0 asynchronously
counterUpDownTip = Up Down: when 1, counter increments, when 0, counter decrements
#
# memory/JKFlipFlop.java
#
jkFlipFlopComponent = J-K Flip-Flop
#
# memory/Mem.java
#
memAsyncRead = Asynchronous read:
memByte = Use byte enables
memDual = Dual
memEnables = Enables:
memLine = Use line enables
memLineSize = Line size
memMisaligned = Allow misaligned?
memOcto = Octo
memQuad = Quad
memRaw = Read after write
memReadBehav = Read behavior
memSingle = Single
memWar = Write after read
ramAddrWidthAttr = Address Bit Width
ramDataWidthAttr = Data Bit Width
ramSelAttr = Select
stdTriggerHigh = High Level
stdTriggerLow = Low Level
#
# memory/MemMenu.java
#
ramConfirmClearMsg = Are you sure you wish to zero out the memory?
ramConfirmClearTitle = Confirm Clear
ramLoadMenuItem = Load Image...
ramSaveMenuItem = Save Image...
#
# memory/Memory.java
#
dFlipFlopComponent = D Flip-Flop
memoryLibrary = Memory
tFlipFlopComponent = T Flip-Flop
#
# memory/Ram.java
#
ramComponent = RAM
#
# memory/RamAppearance.java
#
memAddrTip = Address: location accessed in memory
memDataTip = Data: value loaded from address
memDataTip0 = Data: value loaded from address+0
memDataTip1 = Data: value loaded from address+1
memDataTip2 = Data: value loaded from address+2
memDataTip3 = Data: value loaded from address+3
ramByteEnableTip0 = Byte enable for byte 0
ramByteEnableTip1 = Byte enable for byte 1
ramByteEnableTip2 = Byte enable for byte 2
ramByteEnableTip3 = Byte enable for byte 3
ramClkTip = Clock: memory value updates on rise from 0 to 1
ramClrPin = Clear: a one sets all memory locations to 0
ramInTip = Input: value to be stored at address
ramInTip0 = Input: value to be stored at address+0
ramInTip1 = Input: value to be stored at address+1
ramInTip2 = Input: value to be stored at address+2
ramInTip3 = Input: value to be stored at address+3
ramLETip0 = Line enable for address+0
ramLETip1 = Line enable for address+1
ramLETip2 = Line enable for address+2
ramLETip3 = Line enable for address+3
ramOETip = Load: if 1, load memory to output
ramWETip = Store: if 1, store input to memory
#
# memory/RamAttributes.java
#
ramBidirDataBus = One bidirectional data bus
ramByteEnables = Read write control
RamClearPin = Use clear pin
ramDataAttr = Data bus implementation
ramNoByteEnables = Whole word read/write only
ramSeparateDataBus = Separate data bus for read and write
ramTypeAttr = Ram type
ramTypeNonVolatile = non volatile
ramTypeVolatile = volatile
ramWithByteEnables = Use byte enables
#
# memory/Random.java
#
randomClockTip = Clock: value may update on trigger
randomComponent = Random Generator
randomLabel = random
randomNextTip = Enable: steps to next in sequence on clock trigger
randomQTip = Output: current number in sequence
randomResetTip = Clear: When 1, resets to initial seed asynchronously
randomSeedAttr = Seed
randomWidthLabel = Width: %d
#
# memory/Register.java
#
registerClkTip = Clock: value updates on trigger
registerClrTip = Clear: When 1, pin value to 0 asynchronously
registerComponent = Register
registerDTip = Data: value stored on clock trigger
registerEnableTip = Enable: When 0, clock triggers are ineffective
registerLabel = reg
registerQTip = Output: register's current value
registerShowInTab = Show in Registers Tab
registerWidthLabel = (%sb)
#
# memory/Rom.java
#
romComponent = ROM
#
# memory/RomContentsListener.java
#
romChangeAction = Edit ROM Contents
#
# memory/ShiftRegister.java
#
shiftRegClearTip = Clear: when 1, resets all to 0 asynchronously
shiftRegClockTip = Clock: values may update on trigger
shiftRegInTip = Input: value to be shifted into first stage
shiftRegisterComponent = Shift Register
shiftRegisterLabel1 = shift reg
shiftRegisterLabel2 = %sx%s
shiftRegLengthAttr = Number of Stages
shiftRegLoadTip = Load: when 1 (with shift = 0), all stages load from inputs
shiftRegOutTip = Output: is content of last stage
shiftRegParallelAttr = Parallel Load
shiftRegShiftTip = Shift: shift is disabled when 0
#
# memory/SRFlipFlop.java
#
srFlipFlopComponent = S-R Flip-Flop
#
# plexers/BitSelector.java
#
bitSelectorComponent = Bit Selector
bitSelectorDataTip = Data
bitSelectorGroupAttr = Output Bits
bitSelectorOutputTip = Output: value of selected group of bits from data
bitSelectorSelectTip = Select: identifies which group from data is selected
#
# plexers/Decoder.java
#
decoderEnableTip = Enable: when not 0, selected output is 1
decoderOutTip = Output %s
decoderSelectTip = Select: identifies which output is 1
#
# plexers/Demultiplexer.java
#
demultiplexerEnableTip = Enable: when not 0, selected output is input
demultiplexerInTip = Input
demultiplexerOutTip = Output %s
demultiplexerSelectTip = Select: identifies which output receives input
#
# plexers/Multiplexer.java
#
multiplexerEnableTip = Enable: when not 0, output is the selected input
multiplexerInTip = Input %s
multiplexerOutTip = Output
multiplexerSelectTip = Select: identifies which input becomes output
#
# plexers/Plexers.java
#
decoderComponent = Decoder
demultiplexerComponent = Demultiplexer
gateSizeAttr = Gate Size
gateSizeNarrowOpt = Narrow
gateSizeWideOpt = Wide
multiplexerComponent = Multiplexer
plexerDisabledAttr = Disabled Output
plexerDisabledFloating = Floating
plexerDisabledZero = Zero
plexerEnableAttr = Include Enable?
plexerLibrary = Plexers
plexerSelectBitsAttr = Select Bits
plexerSelectBottomLeftOption = Bottom/Left
plexerSelectLocAttr = Select Location
plexerSelectTopRightOption = Top/Right
plexerThreeStateAttr = Three-state?
priorityEncoderComponent = Priority Encoder
#
# plexers/PriorityEncoder.java
#
priorityEncoderEnableInTip = Enable Input: 0 disables the component
priorityEncoderEnableOutTip = Enable Output: 1 if enabled and no inputs are 1
priorityEncoderGroupSignalTip = Group Select: 1 if enabled and any input is 1
priorityEncoderInTip = Input %s
priorityEncoderOutTip = Output: address of highest-indexed 1 input
#
# StdAttr.java
#
ioLabelColorAttr = Label Color
stdClassicAppearance = Classic Logisim
stdDataWidthAttr = Data Bits
stdEvolutionAppearance = Logisim-HolyCross
stdFacingAttr = Facing
stdLabelAttr = Label
stdLabelCenter = Center
stdLabelFontAttr = Label Font
stdLabelLocAttr = Label Location
stdLabelVisibility = Label Visible
stdLogisimEvolutionAppearance = Logisim-Evolution
stdTriggerAttr = Trigger
#
# tcl/Tcl.java
#
tclLibrary = TCL
#
# tcl/TclComponentAttributes.java
#
tclConsoleContentFile = TCL content file
#
# tcl/TclConsoleReds.java
#
tclConsoleReds = TCL REDS console
#
# tcl/TclGeneric.java
#
tclGeneric = TCL generic
tclInterfaceDefinition = TCL interface VHDL entity
tclInterfaceDefinitionValue = (click to edit)
#
# ttl/AbstractTtlGate.java
#
GNDPin = Ground pin %s
VCCPin = VCC pin %s
#
# ttl/DisplayDecoder.java
#
BI = BI
BlankingInputInTip = Blanking
DisplayDecoderComponent = Display Decoder
DisplayDecoderInTip = Input
DisplayDecoderOutTip = Output
ioMultiBit = multi bit
LampTestInTip = Lamp test input
LT = LT
memEnableLabel = en
RBI = RBI
RippleBlankingInputInTip = Ripple blanking input
#
# ttl/TTL.java
#
ShowInternalStructure = Show the internal structure
TTL7400 = 7400: quad 2-input NAND gate
TTL7402 = 7402: quad 2-input NOR gate
TTL7404 = 7404: hex inverter
TTL7408 = 7408: quad 2-input AND gate
TTL7410 = 7410: triple 3-input NAND gate
TTL7411 = 7411: triple 3-input AND gate
TTL74125 = 74125: quad bus buffer, three-state outputs, negative enable
TTL7413 = 7413: dual 4-input NAND gate(schmitt-trigger)
TTL7414 = 7414: hex inverter (schmitt-trigger)
TTL74165 = 74165: 8-bit parallel-to-serial shift register
TTL74175 = 74175: quad D-flipflop, asynchronous reset
TTL7418 = 7418: dual 4-input NAND gate(schmitt-trigger)
TTL7419 = 7419: hex inverter (schmitt-trigger)
TTL7420 = 7420: dual 4-input NAND gate
TTL7421 = 7421: dual 4-input AND gate
TTL7424 = 7424: quad 2-input NAND gate (schmitt-trigger)
TTL74266 = 74266: quad 2-input XNOR gate
TTL7427 = 7427: triple 3-input NOR gate
TTL74273 = 74273: octal D-Flipflop with clear
TTL74283 = 74283: 4-bit binary full adder
TTL7430 = 7430: single 8-input NAND gate
TTL7432 = 7432: quad 2-input OR gate
TTL7436 = 7436: quad 2-input NOR gate
TTL74377 = 74377: octal D-Flipflop with enable
TTL7442 = 7442: BCD to decimal decoder
TTL7443 = 7443: Excess-3 to decimal decoder
TTL7444 = 7444: Gray to decimal decoder
TTL7447 = 7447: BCD to 7-segment decoder
TTL7451 = 7451: dual AND-OR-INVERT gate
TTL7454 = 7454: Four wide AND-OR-INVERT gate
TTL7458 = 7458: dual AND-OR gate
TTL7464 = 7464: 4-2-3-2 AND-OR-INVERT gate
TTL7474 = 7474: dual D-Flipflops with preset and clear
TTL7485 = 7485: 4-bit magnitude comparator
TTL7486 = 7486: quad 2-input XOR gate
VccGndPorts = Enable Vcc and Gnd ports
#
# wiring/BitExtender.java
#
extenderInAttr = Bit Width In
extenderInputLabel = input
extenderInputType = Input
extenderMainLabel = extend
extenderOneLabel = 1
extenderOneType = One
extenderOutAttr = Bit Width Out
extenderSignLabel = sign
extenderSignType = Sign
extenderTypeAttr = Extension Type
extenderZeroLabel = 0
extenderZeroType = Zero
#
# wiring/Clock.java
#
clockComponent = Clock
clockHighAttr = High Duration
clockLowAttr = Low Duration
#
# wiring/Constant.java
#
constantComponent = Constant
constantValueAttr = Value
#
# wiring/DurationAttribute.java
#
clockDurationOneValue = 1 Tick
clockDurationValue = %s Ticks
durationLargeMessage = Value must be %s or less.
durationSmallMessage = Value must be at least %s.
freqInvalidMessage = Value is not a valid integer
PORDurationOneValue = 1 Sec
PORDurationValue = %s Secs
#
# wiring/Pin.java
#
PinCancel = Cancel
pinComponent = Pin
PinEnterDecimal = Enter Decimal
pinFrozenQuestion = The pin is tied to the super circuit's state. Create a new circuit state?
pinFrozenTitle = Pin Attached To Super circuit.
pinInputName = Input
pinInputToolTip = Add an input pin
PinOkay = OK
pinOutputAttr = Output?
pinOutputName = Output
pinOutputToolTip = Add an output pin
pinPullAttr = Pull Behavior
pinPullDownOption = Pull Down
pinPullNoneOption = Unchanged
pinPullUpOption = Pull Up
pinThreeStateAttr = Three-state?
#
# wiring/PowerOnReset.java
#
porHighAttr = POR-time
PowerOnResetComponent = POR
#
# wiring/Probe.java
#
probeComponent = Probe
#
# wiring/ProbeAttributes.java
#
probeNewPin = Arrow shapes
stdAppearanceAttr = Appearance
#
# wiring/PullResistor.java
#
pullComponent = Pull Resistor
pullErrorType = Error
pullOneType = One
pullTypeAttr = Pull Direction
pullZeroType = Zero
#
# wiring/Transistor.java
#
transistorNDrain = drain: a low source will pull drain low (only when gate is high)
transistorNGate = gate: when high, allows current to flow through transistor
transistorNSource = source: a low source will pull drain low (only when gate is high)
transistorPDrain = drain: a high source will pull drain high (only when gate is low)
transistorPGate = gate: when low, allows current to flow through transistor
transistorPSource = source: a high source will pull drain high (only when gate is low)
transistorTypeAttr = Type
transistorTypeN = N-Type
transistorTypeP = P-Type
#
# wiring/TransmissionGate.java
#
transmissionGateDrain = drain: controlled by source, depending on p-gate and n-gate
transmissionGateNGate = n-gate: when low, allows low source to pass through to drain
transmissionGatePGate = p-gate: when high, allows high source to pass through to drain
transmissionGateSource = source: controls drain, depending on p-gate and n-gate
#
# wiring/Tunnel.java
#
tunnelComponent = Tunnel
#
# wiring/Wiring.java
#
extenderComponent = Bit Extender
groundComponent = Ground
noConnectionComponent = Do not connect
powerComponent = Power
transistorComponent = Transistor
transmissionGateComponent = Transmission Gate
wiringGateAttr = Gate Location
wiringGateBottomRightOption = Bottom/Right
wiringGateTopLeftOption = Top/Left
wiringLibrary = Wiring


