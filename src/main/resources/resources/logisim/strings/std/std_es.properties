#
# arith/Adder.java
#
adderCarryInTip = Carry In: acarreo de entrada, que se añade al resultado de la suma
adderCarryOutTip = Carry Out: acarreo de salida, toma el valor 1 si se produce desbordamiento
adderComponent = Sumador
adderInputTip = Entrada: uno de los números a sumar
adderOutputTip = Salida: la suma de las entradas (junto con el acarreo de entrada)
#
# arith/Arithmetic.java
#
arithmeticLibrary = Aritmética
#
# arith/BitAdder.java
#
bitAdderComponent = Contador de unos
bitAdderInputTip = Entrada: número binario
bitAdderOutputManyTip = Salida: número en binario que expresa cuántos bits de la entrada son 1
gateInputsAttr = Número de entradas
#
# arith/BitFinder.java
#
bitFinderComponent = Buscador de bit
bitFinderFindLabel = descubrimiento
bitFinderHighLabel = elevado
bitFinderHighOption = %s más significativo
bitFinderIndexHighTip = Index: índice del bit %s más significativo de la entrada
bitFinderIndexLowTip = Index: índice del bit %s menos significativo de la entrada
bitFinderInputTip = Entrada: número binario en el que se quiere hacer la búsqueda
bitFinderLowLabel = mínimo
bitFinderLowOption = %s menos significativo
bitFinderPresentTip = Present: devuelve 1 si la entrada contiene un %s
bitFinderTypeAttr = Tipo
#
# arith/Comparator.java
#
comparatorComponent = Comparador
comparatorEqualTip = Equal: vale 1 si A es igual a B
comparatorGreaterTip = Greater: vale 1 si A es mayor que B
comparatorInputATip = A: el primer término de la comparación (número de la izquierda)
comparatorInputBTip = B: el segundo término de la comparación (número de la derecha)
comparatorLessTip = Less: vale 1 si A es menor que B
comparatorType = Tipo de número
twosComplementOption = Complemento a 2
unsignedOption = Sin signo
#
# arith/Divider.java
#
dividerComponent = Divisor
dividerDividendLowerTip = Dividend Lower: la mitad menos significativa del dividendo
dividerDividendUpperTip = Dividend Upper: la mitad más significativa del dividendo
dividerDivisorTip = Divisor: el número entre el cual se divide
dividerOutputTip = Salida: resultado de dividir el dividendo entre el divisor
dividerRemainderOutput = rem
dividerRemainderTip = Remainder: el resto de la división (igual a dividendo - salida * divisor)
dividerUpperInput = upper
#
# arith/Multiplier.java
#
multiplierCarryInTip = Carry In: acarreo de entrada, número que se sumará al resultado de la multiplicación
multiplierCarryOutTip = Carry Out: los bits más significativos del producto
multiplierComponent = Multiplicador
multiplierInputTip = Entrada: uno de los números a multiplicar
multiplierOutputTip = Salida: el producto de las entradas, incluyendo el acarreo de entrada
#
# arith/Negator.java
#
negatorComponent = Negador
negatorInputTip = Entrada: el número a ser negado
negatorOutputTip = Salida: la negación en complemento a 2 de la entrada
#
# arith/Shifter.java
#
shiftArithmeticRight = Aritmético a la derecha
shifterComponent = Desplazador
shifterDistanceTip = Distancia: cuántos bits se desplaza la entrada
shifterInputTip = Entrada: el número binario cuyos bits van a ser desplazados
shifterOutputTip = Salida: resultado tras aplicar el desplazamiento al número de entrada
shifterShiftAttr = Tipo de desplazamiento
shiftLogicalLeft = Lógico a la izquierda
shiftLogicalRight = Lógico a la derecha
shiftRollLeft = Rotar hacia la izquierda
shiftRollRight = Rotar hacia la derecha
#
# arith/Subtractor.java
#
subtractorBorrowInTip = Borrow In: si es 1, restar 1 unidad a la salida
subtractorBorrowOutTip = Borrow Out: devuelve 1 si el resultado de la resta es negativo
subtractorComponent = Restador
subtractorMinuendTip = Minuend: minuendo (el número al que se resta una cantidad)
subtractorOutputTip = Salida: diferencia, minuendo - sustraendo
subtractorSubtrahendTip = Subtrahend: sustraendo (la cantidad que se resta al minuendo)
#
# base/Base.java
#
baseLibrary = Básico
#
# base/Text.java
#
textComponent = Etiqueta
textFontAttr = Fuente
textHorzAlignAttr = Alineación horizontal
textHorzAlignCenterOpt = Centro
textHorzAlignLeftOpt = Izquierda
textHorzAlignRightOpt = Derecha
textTextAttr = Texto
textVertAlignAttr = Alineación vertical
textVertAlignBaseOpt = Base
textVertAlignBottomOpt = Abajo
textVertAlignCenterOpt = Centro
textVertAlignTopOpt = Arriba
#
# base/VhdlParser.java
#
CannotFindEntityException = No se puede encontrar la declaración de la entidad
emptySourceException = No se puede analizar el contenido vacío
genericDeclarationException = Sintaxis de genéricos ilegales
genericTypeException = Tipo de genéricos no soportados
genericValueException = Valor por defecto de los genéricos no reconocidos
invalidTypeException = Tipo de puerto no válido
portDeclarationException = Sintaxis de puertos ilegales
#
# Builtin.java
#
builtinLibrary = Incorporada
#
# gates/AndGate.java
#
andGateComponent = Puerta AND
#
# gates/Buffer.java
#
bufferComponent = Búfer
#
# gates/ControlledBuffer.java
#
controlledBufferComponent = Búfer controlado
controlledControlOption = Localización de control
controlledInverterComponent = Inversor controlado
controlledLeftHanded = Izquierda
controlledRightHanded = Derecha
#
# gates/EvenParityGate.java
#
evenParityComponent = Detector de paridad
#
# gates/GateAttributes.java
#
gateOutput01 = 0/1
gateOutput0Z = 0/flotante
gateOutputAttr = Valor de salida
gateOutputZ1 = flotante/1
gateSizeNormalOpt = Medio
xorBehaviorAttr = Comportamiento con múltiples entradas
xorBehaviorOdd = Con un número impar de entradas activadas
xorBehaviorOne = Con una entrada activada
#
# gates/Gates.java
#
gatesLibrary = Puertas
#
# gates/NandGate.java
#
nandGateComponent = Puerta NAND
#
# gates/NegateAttribute.java
#
gateNegateAttr = Negar %s
#
# gates/NorGate.java
#
norGateComponent = Puerta NOR
#
# gates/NotGate.java
#
notGateComponent = Puerta NOT
#
# gates/OddParityGate.java
#
oddParityComponent = Detector de imparidad
#
# gates/OrGate.java
#
orGateComponent = Puerta OR
#
# gates/PLA.java
#
plaBitWidthIn = Ancho de broca en
plaBitWidthOut = Ancho de broca hacia fuera
input = aportación
output = salida
PLA = APA
plaClickToEdit = (haga clic para editar)
plaEditMenuItem = Editar programa PLA....
plaProgram = Programa
#
# gates/PLATable.java
#
plaEditorTitle = Editor de programas PLA
plaFileCreateError = No se pudo crear el archivo.
plaFileOpenError = No se pudo abrir el archivo.
plaLoadDialogTitle = Cargar Programa PLA
plaLoadErrorTitle = Error al cargar el programa PLA
plaSaveDialogTitle = Programa Save PLA
plaSaveErrorTitle = Error al guardar el programa PLA
#
# gates/XnorGate.java
#
xnorGateComponent = Puerta XNOR
#
# gates/XorGate.java
#
xorGateComponent = Puerta XOR
#
# InstanceComponent.java
#
KeywordNameError = La etiqueta es una palabra reservada y no se puede usar. Por favor, especifica una etiqueta distinta.
MatchedLabelNameError = El nombre y la etiqueta de un componente no deben coincidir (no se tienen en cuenta las mayúsculas).\nPor favor, especifica una etiqueta distinta al nombre del componente.
#
# InstanceTextField.java
#
changeLabelAction = Cambiar etiqueta
#
# io/DipSwitch.java
#
DIP = DIP
DipSwitchComponent = Interruptor DIP
nrOfSwitch = Número de interruptores
#
# io/DotMatrix.java
#
ioInputColumn = Columnas
ioInputRow = Filas
ioInputSelect = Seleccionar filas/columnas
ioMatrixCols = Columnas de la matriz
ioMatrixInput = Formato de entrada
ioMatrixPersistenceAttr = Persistencia de luz
ioMatrixRows = Filas de la matriz
ioMatrixShape = Forma de puntos
ioShapeCircle = Circular
ioShapeSquare = Cuadrado
#
# io/extra/Buzzer.java
#
buzzerFrequecy = frecuencia
buzzerVolume = envergadura
buzzerVolumeBitWidth = ancho de bit de volumen
buzzerUnitDhz = dHz (0.1Hz)
enableSound = Habilitar sonido
Hz = Hz
#
# io/extra/DigitalOscilloscope.java
#
BorderColor = Color del borde
bothOption = a la vez
ClearDiagram = Esquema claro
DigitalOscilloscopeClock = cronometrar
DrawClockFrontLine = dibujar la primera línea del reloj
noOption = ninguno
ShowClockAttribute = Mostrar atributo de reloj
stdTriggerFalling = Flanco de bajada
stdTriggerRising = Flanco de subida
#
# io/extra/ITA_IO.java
#
buzzerComponent = Zumbador
DigitalOscilloscopeComponent = oscilador digital
PlaRomComponent = 
Slider = control deslizante
switchComponent = conmutador
#
# io/extra/PlaRom.java
#
memCSTip = Chip select: el valor 0 deshabilita el componente
PlaANDAttr = Y
PlaOutputsAttr = Salida
ramCSLabel = sel
#
# io/extra/PlaRomData.java
#
PlaEditWindowTitel = Pla Rom %s editar ventana
#
# io/extra/ProgrammableGenerator.java
#
NStateAttr = Nr. de Estados
ProgrammableGeneratorComponent = Generador de programas
ramClearMenuItem = Borrar contenidos
ramEditMenuItem = Editar contenidos...
romContentsAttr = Contenidos
romContentsValue = (clic para editar)
#
# io/extra/Slider.java
#
left_to_rightOption = de izquierda a derecha
right_to_leftOption = de derecha a izquierda
#
# io/HexDigit.java
#
hexDigitDataTip = Datos: mordisquear para mostrar en hexadecimal
hexDigitDPTip = DecimalPoint: ilumina el punto decimal
#
# io/Io.java
#
buttonComponent = Botón
dipswitchComponent = Interruptor DIP
dotMatrixComponent = Matriz de LED
hexDigitComponent = Display de dígito hexadecimal
ioActiveAttr = ¿Activo a nivel alto?
ioBackgroundColor = Fondo
ioColorAttr = Color
ioLibrary = Entrada/Salida
ioOffColor = Color de modo desactivado
ioOnColor = Color de modo activado
joystickComponent = Joystick
ledComponent = LED
pioComponent = Puerto de entrada/salida
repLBComponent = Bus local REPTAR
RGBledComponent = LED RGB
sevenSegmentComponent = Display 7 segmentos
ttyComponent = TTY
#
# io/Joystick.java
#
ioBitWidthAttr = Número de bits
#
# io/Keyboard.java
#
keybAvailTip = Available: devuelve 1 cuando el búfer contiene caracteres
keybBufferLengthAttr = Tamaño de búfer
keybClearTip = Clear: cuando se pone a 1 vacía el búfer
keybClockTip = Reloj: el flanco de reloj lee el primer carácter del búfer
keybDesc = teclado (cap. de búfer %s)
keybEnableTip = Read enable: si toma el valor 0 desactiva la función del reloj
keyboardComponent = Teclado
keybOutputTip = Data: valor ASCII del primer carácter del búfer
#
# io/PortIO.java
#
# ==> pioDirection = 
# ==> pioInput = 
# ==> pioInputs = 
# ==> pioIOMultiple = 
# ==> pioIOSingle = 
pioNumber = Número de pines
# ==> pioOutEnable = 
# ==> pioOutEnables = 
# ==> pioOutput = 
# ==> pioOutputs = 
#
# io/ReptarLocalBus.java
#
repLBTip = Punta B
#
# io/RGBLed.java
#
BLUE = Entrada azul
GREEN = Entrada verde
RED = Entrada roja
#
# io/SevenSegment.java
#
DecimalPoint = Punto decimal
Segment_A = Segmento A
Segment_B = Segmento B
Segment_C = Segmento C
Segment_D = Segmento D
Segment_E = Segmento E
Segment_F = Segmento F
Segment_G = Segmento G
# ==> SevenSegDP = 
#
# io/Tty.java
#
ttyClearTip = Clear: cuando se pone a 1 vacía la pantalla
ttyClockTip = Reloj: cuando se produce un flanco se añade el carácter de la entrada
ttyColsAttr = Columnas
ttyDesc = TTY (%s filas, %s columnas)
ttyDescShort = TTY
ttyEnableTip = Write enable: el valor 0 hace que se ignore el reloj
ttyInputTip = Data: valor ASCII del siguiente carácter a escribir
ttyRowsAttr = Filas
#
# io/Video.java
#
rgbVideoCLK = Reloj
rgbVideoColor = Modelo de color
rgbVideoComponent = Vídeo RGB
rgbVideoCursor = Cursor
rgbVideoData = Datos en formato %s
rgbVideoHeight = Altura
rgbVideoReset = Restablecer Comportamiento
rgbVideoRST = Reiniciar
rgbVideoScale = Escala
rgbVideoWE = Habilitar escritura
rgbVideoWidth = Ancho
rgbVideoX = X Coordenada
rgbVideoY = Coordenada Y
#
# library/bcd2sevenseg.java
#
BCDValue = Valor BCD
BCD2SevenSegment = BCD a siete segmentos
#
# library/BFHPraktika.java
#
BFHMegaFunctions = Mega funciones de BFH
Bin2BCD = Binary a BCD
#
# library/bin2bcd.java
#
BinaryDataBits = Bits de datos binarios
BinaryInputTip = Entrada binaria
#
# memory/AbstractFlipFlop.java
#
flipFlopClockTip = Reloj: el estado se actualiza en el flanco de reloj
flipFlopNotQTip = Inverso del estado actual del biestable
flipFlopPresetTip = Preset: cuando se pone a 1, el estado se hace 1 asíncronamente
flipFlopQTip = Estado actual del biestable
flipFlopResetTip = Clear: cuando se pone a 1, el estado se hace 0 asíncronamente
#
# memory/Counter.java
#
counterCarryTip = Carry: toma el valor 1 cuando se ha alcanzado el máximo (o mínimo, si la cuenta es decreciente)
counterClockTip = Reloj: el valor se actualiza cada flanco de reloj
counterComponent = Contador
counterDataTip = Data: valor a cargar en el contador
counterEnableLabel = ct
counterEnableTip = Enable: cuando está a 1, la cuenta puede subir o bajar
counterGoalAttr = Acción cuando se desborda
counterGoalContinue = Continuar cuenta con más bits
counterGoalLoad = Cargar valor siguiente
counterGoalStay = Mantener valor final
counterGoalWrap = Continuar desde el inicio
counterLabel = ctr
counterLoadTip = Load: cuando se pone a 1, introduce el dato externo "Data"
counterMaxAttr = Valor máximo
counterQTip = Salida: valor actual del contador
counterResetTip = Clear: cuando se pone a 1, la cuenta se hace 0 asíncronamente
counterUpDownTip = UpDown: cuando está a 1, la cuenta sube; cuando está a 0, la cuenta baja
#
# memory/JKFlipFlop.java
#
jkFlipFlopComponent = Biestable JK
#
# memory/Mem.java
#
memAsyncRead = Lectura asincrónica:
memByte = El uso del byte permite
memDual = Doble
memEnables = Habilita:
memLine = La línea de uso permite
memLineSize = Tamaño de la línea
# ==> memMisaligned = 
memOcto = Octo
memQuad = Quad
memRaw = Leer después de escribir
memReadBehav = Leer el comportamiento
memSingle = Individual
memWar = Escriba después de leer
ramAddrWidthAttr = Número de bits de dirección
ramDataWidthAttr = Número de bits de datos
ramSelAttr = Seleccione
stdTriggerHigh = Nivel alto
stdTriggerLow = Nivel bajo
#
# memory/MemMenu.java
#
ramConfirmClearMsg = ¿Estás seguro de que quieres borrar la memoria?
ramConfirmClearTitle = Confirmar borrado
ramLoadMenuItem = Cargar imagen...
ramSaveMenuItem = Guardar imagen...
#
# memory/Memory.java
#
dFlipFlopComponent = Biestable D
memoryLibrary = Memoria
tFlipFlopComponent = Biestable T
#
# memory/Ram.java
#
ramComponent = RAM
#
# memory/RamAppearance.java
#
memAddrTip = Dirección: localización de la memoria a la que se quiere acceder
memDataTip = Dato: valor leído en la dirección
memDataTip0 = Datos: valor cargado desde la dirección 0
memDataTip1 = Datos: valor cargado desde la dirección 1
memDataTip2 = Datos: valor cargado desde la dirección 2
memDataTip3 = Datos: valor cargado desde la dirección 3
ramByteEnableTip0 = Habilitación de bytes para el byte 0
ramByteEnableTip1 = Habilitación de bytes para el byte 1
ramByteEnableTip2 = Habilitación de bytes para el byte 2
ramByteEnableTip3 = Habilitación de bytes para el byte 3
ramClkTip = Reloj: los cambios en los valores de memoria se producen en los flancos de subida
ramClrPin = Borrar: a uno pone todas las posiciones de memoria a 0
ramInTip = Entrada: valor a ser guardado en la dirección indicada
ramInTip0 = Entrada: valor a almacenar en la dirección 0
ramInTip1 = Entrada: valor a almacenar en la dirección 1
ramInTip2 = Entrada: valor a almacenar en la dirección 2
ramInTip3 = Entrada: valor a almacenar en la dirección 3
ramLETip0 = Habilitación de línea para la dirección 0
ramLETip1 = Habilitación de línea para la dirección 1
ramLETip2 = Habilitación de línea para la dirección 2
ramLETip3 = Habilitación de línea para la dirección 3
ramOETip = Load: si toma el valor 1, mostrar lectura a la salida
ramWETip = Store: si toma el valor 1, escribir dato de entrada en la memoria
#
# memory/RamAttributes.java
#
ramBidirDataBus = Un bus de datos bidireccional
ramByteEnables = Control de lectura y escritura
RamClearPin = Usar el pasador transparente
ramDataAttr = Implementación del bus de datos
ramNoByteEnables = Lectura/escritura de palabras completas
ramSeparateDataBus = Buses de datos separados para lectura y escritura
ramTypeAttr = Tipo de carnero
ramTypeNonVolatile = no volátil
ramTypeVolatile = volátil
ramWithByteEnables = Usar byte enable (máscaras)
#
# memory/Random.java
#
randomClockTip = Reloj: el valor se actualiza cada flanco de reloj
randomComponent = Generador aleatorio
randomLabel = aleatorio
randomNextTip = Enable: permite pasar al siguiente valor cuando se produce un flanco de reloj
randomQTip = Salida: número actual en la secuencia
randomResetTip = Clear: cuando se pone a 1, la salida pasa a ser la semilla original asíncronamente
randomSeedAttr = Semilla
randomWidthLabel = Ancho: %d
#
# memory/Register.java
#
registerClkTip = Reloj: actualiza el valor del registro en el flanco de reloj
registerClrTip = Clear: cuando se pone a 1, el valor del registro se hace 0 asíncronamente
registerComponent = Registro
registerDTip = Data: valor a guardar cuando se produzca flanco de reloj
registerEnableTip = Enable: cuando está a 0, se ignoran los flancos de reloj
registerLabel = reg
registerQTip = Salida: valor actual del registro
registerShowInTab = Mostrar en pestaña de registros
registerWidthLabel = (%sb)
#
# memory/Rom.java
#
romComponent = ROM
#
# memory/RomContentsListener.java
#
romChangeAction = Editar contenidos de la ROM
#
# memory/ShiftRegister.java
#
shiftRegClearTip = Clear: cuando se pone a 1, pone todas las etapas a 0 asíncronamente
shiftRegClockTip = Reloj: el estado se actualiza en el flanco de reloj
shiftRegInTip = Entrada: valor que aparecerá en la primera etapa de desplazamiento
shiftRegisterComponent = Registro de desplazamiento
shiftRegisterLabel1 = shift reg
shiftRegisterLabel2 = %sx%s
shiftRegLengthAttr = Número de etapas
shiftRegLoadTip = Load: cuando se pone a 1 y "shift" es 0, se actualizan todas las etapas con los datos a la entrada
shiftRegOutTip = Salida: valor que se encuentra en la última etapa
shiftRegParallelAttr = Carga en paralelo
shiftRegShiftTip = Shift: cuando está a 0, el desplazamiento está desactivado
#
# memory/SRFlipFlop.java
#
srFlipFlopComponent = Biestable SR
#
# plexers/BitSelector.java
#
bitSelectorComponent = Selector de bits
bitSelectorDataTip = Dato
bitSelectorGroupAttr = Bits de salida
bitSelectorOutputTip = Salida: valor del grupo de bits seleccioando en el dato
bitSelectorSelectTip = Select: identifica cúal de los grupos del dato está seleccionado
#
# plexers/Decoder.java
#
decoderEnableTip = Enable: si toma el valor 1, la salida seleccionada se pone a 1
decoderOutTip = Salida %s
decoderSelectTip = Select: selecciona cuál de las salidas se pone a 1
#
# plexers/Demultiplexer.java
#
demultiplexerEnableTip = Enable: si toma el valor 1, la entrada aparece en la salida seleccionada
demultiplexerInTip = Entrada
demultiplexerOutTip = Salida %s
demultiplexerSelectTip = Select: en cuál de las salidas aparece la entrada
#
# plexers/Multiplexer.java
#
multiplexerEnableTip = Enable: si toma el valor 1, la entrada seleccionada aparece a la salida
multiplexerInTip = Entrada %s
multiplexerOutTip = Salida
multiplexerSelectTip = Select: selección del valor de entrada que aparece a la salida
#
# plexers/Plexers.java
#
decoderComponent = Decodificador
demultiplexerComponent = Demultiplexor
gateSizeAttr = Tamaño de puerta
gateSizeNarrowOpt = Estrecho
gateSizeWideOpt = Ancho
multiplexerComponent = Multiplexor
plexerDisabledAttr = Salida desactivada
plexerDisabledFloating = Flotante
plexerDisabledZero = Cero
plexerEnableAttr = ¿Incluir Enable?
plexerLibrary = Plexores
plexerSelectBitsAttr = Bits de selección
plexerSelectBottomLeftOption = Abajo/izquierda
plexerSelectLocAttr = Posición de selección
plexerSelectTopRightOption = Arriba/derecha
plexerThreeStateAttr = ¿Tres estados?
priorityEncoderComponent = Codificador de prioridad
#
# plexers/PriorityEncoder.java
#
priorityEncoderEnableInTip = Enable Input: el valor 0 deshabilita el componente
priorityEncoderEnableOutTip = Enable Output: toma el valor 1 si Enable Input
priorityEncoderGroupSignalTip = Group Select: toma el valor 1 si Enable Input
priorityEncoderInTip = Entrada %s
priorityEncoderOutTip = Salida: dirección de la entrada que esté a 1 con el índice más alto
#
# StdAttr.java
#
ioLabelColorAttr = Color de etiqueta
stdClassicAppearance = 
stdDataWidthAttr = Bits de datos
stdEvolutionAppearance = 
stdFacingAttr = Orientación
stdLabelAttr = Etiqueta
stdLabelCenter = 
stdLabelFontAttr = Fuente de etiqueta
stdLabelLocAttr = 
stdLabelVisibility = Etiqueta visible
stdLogisimEvolutionAppearance = 
stdTriggerAttr = Flanco
#
# tcl/Tcl.java
#
tclLibrary = TCL
#
# tcl/TclComponentAttributes.java
#
tclConsoleContentFile = Archivo TCL
#
# tcl/TclConsoleReds.java
#
tclConsoleReds = Consola TCL REDS
#
# tcl/TclGeneric.java
#
tclGeneric = TCL genérico
tclInterfaceDefinition = Entidad VHDL de la interfaz TCL
tclInterfaceDefinitionValue = (clic para editar)
#
# ttl/AbstractTtlGate.java
#
GNDPin = Pin de tierra %s
VCCPin = VCC pin %s
#
# ttl/DisplayDecoder.java
#
BI = BI
BlankingInputInTip = Blanking
DisplayDecoderComponent = Decodificador de pantalla
DisplayDecoderInTip = Entrada
DisplayDecoderOutTip = Salida
ioMultiBit = varios bits
LampTestInTip = Entrada de prueba de la lámpara
LT = LT
memEnableLabel = en
RBI = BANCO DE RESERVA DE LA INDIA
RippleBlankingInputInTip = Entrada de supresión de ondulaciones
#
# ttl/TTL.java
#
ShowInternalStructure = Mostrar la estructura interna
TTL7400 = 7400: puerta NAND de 2 entradas cuádruple
TTL7402 = 7402: Quad 2 entradas NOR gate
TTL7404 = 7404: inversor hexadecimal
TTL7408 = 7408: Quad 2 entradas Y puerta
TTL7410 = 7410: triple puerta NAND de 3 entradas
TTL7411 = 7411: triple 3 entradas Y puerta
TTL74125 = 74125: memoria intermedia de bus cuádruple, salidas de tres estados, habilitación negativa
TTL7413 = 7413: doble puerta NAND de 4 entradas (schmitt-trigger)
TTL7414 = 7414: inversor hexagonal (schmitt-trigger)
TTL74161 = 74161: 4-bit sync counter with clear
TTL74165 = 74165: Registro de desplazamiento paralelo a serie de 8 bits
TTL74175 = 74175: Quad D-flipflop, reset asíncrono
TTL7418 = 7418: doble puerta NAND de 4 entradas (schmitt-trigger)
TTL7419 = 7419: inversor hexagonal (schmitt-trigger)
TTL7420 = 7420: doble puerta NAND de 4 entradas
TTL7421 = 7421: doble 4 entradas Y puerta
TTL7424 = 7424: puerta NAND de 2 entradas cuádruple (schmitt-trigger)
TTL74266 = 74266: puerta XNOR de 2 entradas cuádruple
TTL7427 = 7427: triple puerta NOR de 3 entradas
TTL74273 = 74273: octal D-Flipflop con clear
TTL74283 = 74283: sumador completo binario de 4 bits
TTL7430 = 7430: puerta NAND de 8 entradas sencilla
TTL7432 = 7432: cuadrante 2 entradas OR puerta
TTL7436 = 7436: Quad 2 entradas NOR gate
TTL74377 = 74377: D-Flipflop octal con habilitación
TTL7442 = 7442: Decodificador BCD a decimal
TTL7443 = 7443: Exceso de 3 a decodificador decimal
TTL7444 = 7444: Decodificador de Gray a decimal
TTL7447 = 7447: Decodificador de BCD a 7 segmentos
TTL7451 = 7451: puerta doble AND-OR-INVERT
TTL7454 = 7454: Cuatro puertas anchas AND-OR-INVERT
TTL7458 = 7458: puerta doble AND-OR
TTL7464 = 7464: 4-2-3-2 AND-OR-INVERTIR puerta
TTL7474 = 7474: doble D-Flipflops con preset y clear
TTL7485 = 7485: Comparador de magnitud de 4 bits
TTL7486 = 7486: puerta XOR de 2 entradas cuádruples
VccGndPorts = Habilitar los puertos Vcc y Gnd
#
# wiring/BitExtender.java
#
extenderInAttr = Bits de entrada
extenderInputLabel = entrada
extenderInputType = Entrada
extenderMainLabel = extensor
extenderOneLabel = 1
extenderOneType = Unos
extenderOutAttr = Bits de salida
extenderSignLabel = signo
extenderSignType = Signo
extenderTypeAttr = Tipo de extensión
extenderZeroLabel = 0
extenderZeroType = Ceros
#
# wiring/Clock.java
#
clockComponent = Reloj
clockHighAttr = Duración de nivel alto
clockLowAttr = Duración de nivel bajo
#
# wiring/Constant.java
#
constantComponent = Constante
constantValueAttr = Valor
#
# wiring/DurationAttribute.java
#
clockDurationOneValue = 1 tick
clockDurationValue = %s ticks
durationLargeMessage = El valor debe ser %s o menos.
durationSmallMessage = El valor debe ser al menos %s.
freqInvalidMessage = El valor no es un entero válido
PORDurationOneValue = 1 segundo
PORDurationValue = %s segundos
#
# wiring/Pin.java
#
PinCancel = Cancelar
pinComponent = Pin
PinEnterDecimal = Introducir decimal
pinFrozenQuestion = El pin está asociado al estado del circuito superior. ¿Crear un nuevo estado del circuito?
pinFrozenTitle = Pin asociado al circuito superior.
pinInputName = Entrada
pinInputToolTip = Añadir pin de entrada
PinOkay = OK
pinOutputAttr = ¿Salida?
pinOutputName = Salida
pinOutputToolTip = Añadir pin de salida
pinPullAttr = Comportamiento de pull
pinPullDownOption = Adoptar nivel bajo
pinPullNoneOption = Sin cambios
pinPullUpOption = Adoptar nivel alto
pinThreeStateAttr = ¿Tres estados?
#
# wiring/PowerOnReset.java
#
porHighAttr = Tiempo de POR
PowerOnResetComponent = POR
#
# wiring/Probe.java
#
probeComponent = Sonda
#
# wiring/ProbeAttributes.java
#
probeNewPin = Formas de flecha
stdAppearanceAttr = Apariencia
#
# wiring/PullResistor.java
#
pullComponent = Resistencia "Pull"
pullErrorType = Error
pullOneType = Cero
pullTypeAttr = Dirección de "pull"
pullZeroType = Uno
#
# wiring/Transistor.java
#
transistorNDrain = drenaje: una fuente baja hará que el drenaje sea bajo (sólo cuando la puerta está alta)
transistorNGate = puerta: cuando está alta, permite que la corriente fluya a través del transistor
transistorNSource = fuente: una fuente baja hará que el desagüe sea bajo (sólo cuando la puerta está alta)
transistorPDrain = drenaje: una fuente alta arrastrará el drenaje hacia arriba (sólo cuando la puerta está baja)
transistorPGate = puerta: cuando está baja, permite que la corriente fluya a través del transistor
transistorPSource = fuente: una fuente alta arrastrará el desagüe hacia arriba (sólo cuando la puerta está baja)
transistorTypeAttr = Tipo
transistorTypeN = Tipo N
transistorTypeP = Tipo P
#
# wiring/TransmissionGate.java
#
transmissionGateDrain = desagüe: controlado por la fuente, dependiendo de p-gate y n-gate
transmissionGateNGate = Puerta n: cuando está baja, permite el paso de la fuente baja para drenar.
transmissionGatePGate = p-gate: cuando está alto, permite que la fuente alta pase a través de la puerta para drenar
transmissionGateSource = fuente: controla el drenaje, dependiendo de p-gate y n-gate
#
# wiring/Tunnel.java
#
tunnelComponent = Túnel
#
# wiring/Wiring.java
#
extenderComponent = Extensor de bits
groundComponent = Tierra
noConnectionComponent = 
powerComponent = Alimentación
transistorComponent = Transistor
transmissionGateComponent = Puerta de transmisión
wiringGateAttr = Posición de la puerta
wiringGateBottomRightOption = Abajo/derecha
wiringGateTopLeftOption = Arriba/izquierda
wiringLibrary = Cableado


