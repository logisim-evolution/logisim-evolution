#
# arith/Adder.java
#
adderCarryInTip = Carry In: als 1, wordt er een extra 1 aan de uitvoer toegevoegd.
adderCarryOutTip = Uitvoeren: 1 als de som de beschikbare bits overloopt.
adderComponent = Adder
adderInputTip = Invoer: een van de nummers die u moet toevoegen
adderOutputTip = Uitgang: de som van de ingangen (plus carry in)
#
# arith/Arithmetic.java
#
arithmeticLibrary = Rekenen
#
# arith/BitAdder.java
#
bitAdderComponent = Bit Adder
bitAdderInputTip = Input: de bits die geteld moeten worden
bitAdderOutputManyTip = Uitgang: hoeveel ingangsbits zijn 1
gateInputsAttr = Aantal ingangen
#
# arith/BitFinder.java
#
bitFinderComponent = Bit Finder
bitFinderFindLabel = vondst
bitFinderHighLabel = hoog
bitFinderHighOption = Hoogste orde %s
bitFinderIndexHighTip = Index: index van de input van de hoogste orde van de input %s
bitFinderIndexLowTip = Index: index van de laagste input van de input %s van de laagste orde
bitFinderInputTip = Invoer: de bits die moeten worden doorzocht
bitFinderLowLabel = laag
bitFinderLowOption = Laagste orde %s
bitFinderPresentTip = Aanwezig: 1 als de ingang een %s bevat
bitFinderTypeAttr = Type
#
# arith/Comparator.java
#
comparatorComponent = Vergelijker
comparatorEqualTip = Gelijk: 1 als A gelijk is aan B
comparatorGreaterTip = Groter: 1 als A groter is dan B
comparatorInputATip = A: het nummer dat aan de vergelijking voorafgaat.
comparatorInputBTip = B: het getal dat volgt op de vergelijkingsoperatie.
comparatorLessTip = Minder: 1 als A kleiner is dan B
comparatorType = Numeriek Type
twosComplementOption = 2's aanvulling
unsignedOption = Ongesigneerd
#
# arith/Divider.java
#
dividerComponent = Verdeler
dividerDividendLowerTip = Dividend lager: de onderste helft van het aantal te verdelen
dividerDividendUpperTip = Dividend Boven: de bovenste helft van het getal te delen
dividerDivisorTip = Deler: het getal om te delen door het aantal te delen.
dividerOutputTip = Output: het resultaat van de deling van het dividend door de deler.
dividerRemainderOutput = rem
dividerRemainderTip = Restant: het restant (dividend - output * deler)
dividerUpperInput = hoger
#
# arith/Multiplier.java
#
multiplierCarryInTip = Carry In: een bedrag dat aan de uitvoer wordt toegevoegd.
multiplierCarryOutTip = Uitvoeren: de bovenste delen van het product
multiplierComponent = Vermenigvuldiger
multiplierInputTip = Invoer: een van de te vermenigvuldigen getallen
multiplierOutputTip = Uitgang: het product van de ingangen, plus de carry in
#
# arith/Negator.java
#
negatorComponent = Negator
negatorInputTip = Input: het getal dat moet worden ontkend.
negatorOutputTip = Uitgang: de ontkenning van de ingang van de twee complementaire uitgangen
#
# arith/Shifter.java
#
shiftArithmeticRight = Rekenkundig Recht
shifterComponent = Shifter
shifterDistanceTip = Afstand: hoe ver u de invoer kunt verschuiven
shifterInputTip = Invoer: te verschuiven bits
shifterOutputTip = Uitgang: resultaat van het verschuiven van de ingang
shifterShiftAttr = Verschuivingstype
shiftLogicalLeft = Logisch links
shiftLogicalRight = Logisch rechts
shiftRollLeft = Naar links draaien
shiftRollRight = Naar rechts draaien
#
# arith/Subtractor.java
#
subtractorBorrowInTip = Lenen in: als 1, wordt de output verminderd met 1
subtractorBorrowOutTip = Borrow Out: 1 als het verschil een negatieve waarde oplevert.
subtractorComponent = Aftrekker
subtractorMinuendTip = Minuend: het getal waarvan men het aantal in mindering moet brengen
subtractorOutputTip = Output: het verschil tussen de minuend en de subtrahend.
subtractorSubtrahendTip = Aftrekken: het getal dat je van het menu moet aftrekken.
#
# base/Base.java
#
baseLibrary = Basis
#
# base/Text.java
#
textComponent = Label
textFontAttr = Lettertype
textHorzAlignAttr = Horizontale uitlijning
textHorzAlignCenterOpt = Centrum
textHorzAlignLeftOpt = Links
textHorzAlignRightOpt = Rechts
textTextAttr = Tekst
textVertAlignAttr = Verticale uitlijning
textVertAlignBaseOpt = Basis
textVertAlignBottomOpt = Onderkant
textVertAlignCenterOpt = Centrum
textVertAlignTopOpt = Bovenkant
#
# base/VhdlParser.java
#
CannotFindEntityException = De entiteitsverklaring kan niet worden gevonden
emptySourceException = Kan lege inhoud niet parseren
genericDeclarationException = Illegale syntaxis van generieke geneesmiddelen
genericTypeException = Niet-ondersteunde generieke geneesmiddelen van het type "niet-ondersteunde generieke geneesmiddelen".
genericValueException = Niet-opgenomen generieke geneesmiddelen standaardwaarde
invalidTypeException = Ongeldig poorttype
portDeclarationException = Illegale poort syntaxis
#
# Builtin.java
#
builtinLibrary = Ingebouwd
#
# gates/AndGate.java
#
andGateComponent = EN Poort
#
# gates/Buffer.java
#
bufferComponent = Buffer
#
# gates/ControlledBuffer.java
#
controlledBufferComponent = Gecontroleerde buffer
controlledControlOption = Locatie van de controlelijn
controlledInverterComponent = Gecontroleerde Omvormer
controlledLeftHanded = Linkshandig
controlledRightHanded = Rechtshandig
#
# gates/EvenParityGate.java
#
evenParityComponent = Zelfs pariteit
#
# gates/GateAttributes.java
#
gateOutput01 = 0/1
gateOutput0Z = 0/zwevend
gateOutputAttr = Outputwaarde
gateOutputZ1 = zwevend/1
gateSizeNormalOpt = Middel
xorBehaviorAttr = Gedrag bij meervoudige invoer
xorBehaviorOdd = Wanneer er een oneven aantal aan staat
xorBehaviorOne = Wanneer één ingang is ingeschakeld
#
# gates/Gates.java
#
gatesLibrary = Poorten
#
# gates/NandGate.java
#
nandGateComponent = NAND-poort
#
# gates/NegateAttribute.java
#
gateNegateAttr = Negeren %s
#
# gates/NorGate.java
#
norGateComponent = NOR Poort
#
# gates/NotGate.java
#
notGateComponent = NIET Poort
#
# gates/OddParityGate.java
#
oddParityComponent = Oneven Pariteit
#
# gates/OrGate.java
#
orGateComponent = OF Poort
#
# gates/PLA.java
#
plaBitWidthIn = Bitbreedte in
plaBitWidthOut = Bitbreedte uit
input = inbreng
output = output
PLA = PLA
plaClickToEdit = (klik om te bewerken)
plaEditMenuItem = PLA-programma bewerken....
plaProgram = Programma
#
# gates/PLATable.java
#
plaEditorTitle = PLA Programma-editor
plaFileCreateError = Kon geen bestand maken.
plaFileOpenError = Kon het bestand niet openen.
plaLoadDialogTitle = PLA-programma laden
plaLoadErrorTitle = Fout bij het laden van het PLA-programma
plaSaveDialogTitle = PLA-programma opslaan
plaSaveErrorTitle = Fout Opslaan PLA-programma voor het opslaan van PLA's
#
# gates/XnorGate.java
#
xnorGateComponent = XNOR Poort
#
# gates/XorGate.java
#
xorGateComponent = XOR Poort
#
# InstanceComponent.java
#
KeywordNameError = Label is een gereserveerd trefwoord en kan niet worden gebruikt. Gelieve een ander etiket te vermelden.
MatchedLabelNameError = Het is mogelijk dat de naam van het etiket en de naam van het onderdeel niet dezelfde zijn (ze zijn niet hoofdlettergevoelig). Gelieve een ander etiket te specificeren dan de naam van het onderdeel.
#
# InstanceTextField.java
#
changeLabelAction = Label wijzigen
#
# io/DipSwitch.java
#
DIP = DIP
DipSwitchComponent = Dip Switch
nrOfSwitch = Aantal schakelaars
#
# io/DotMatrix.java
#
ioInputColumn = Kolommen
ioInputRow = Rijen
ioInputSelect = Rijen/kolommen selecteren
ioMatrixCols = Matrix Kolommen
ioMatrixInput = Inputformaat
ioMatrixPersistenceAttr = Leds aan laten
ioMatrixRows = Matrix Rijen
ioMatrixShape = LED vorm
ioShapeCircle = Rond
ioShapeSquare = Vierkant
#
# io/extra/Buzzer.java
#
buzzerFrequecy = frequentie
buzzerVolume = volume
buzzerVolumeBitWidth = volume bitbreedte
buzzerUnitDhz = dHz (0,1Hz)
buzzerWaveform = Waveform
buzzerSine = Sinus
buzzerSquare = Blokgolf
buzzerChannel = Kanaal
buzzerChannelBoth = Beide
buzzerChannelLeft = Links
buzzerChannelRight = Rechts
buzzerTriangle = Triangel
buzzerSawtooth = Zaagtand
buzzerNoise = Witte ruis
buzzerDutyCycle = Duty cycle
enableSound = Geluid aan
Hz = Hz

#
# io/extra/DigitalOscilloscope.java
#
BorderColor = Randkleur
bothOption = beide
ClearDiagram = Wis diagram
DigitalOscilloscopeClock = klok
DrawClockFrontLine = tekenklok frontlinie
noOption = geen
ShowClockAttribute = Toon klok attribuut
stdTriggerFalling = Neergaande Flank
stdTriggerRising = Opgaande Flank
#
# io/extra/ITA_IO.java
#
buzzerComponent = Zoemer
DigitalOscilloscopeComponent = Digitale oscilloscope
PlaRomComponent = PLA
Slider = Schuifknop
switchComponent = Schakelaar
# io/extra/PlaRom.java
#
memCSTip = Chip select: 0 schakelt component uit
PlaANDAttr = En
PlaOutputsAttr = Output
ramCSLabel = sel
#
# io/extra/PlaRomData.java
#
PlaEditWindowTitel = Pla Rom %s bewerkingsvenster
#
# io/extra/ProgrammableGenerator.java
#
NStateAttr = Aantal staten
ProgrammableGeneratorComponent = Progr. generator
ramClearMenuItem = Duidelijke inhoud
ramEditMenuItem = Inhoud bewerken.....
romContentsAttr = Inhoud
romContentsValue = (klik om te bewerken)
#
# io/extra/Slider.java
#
left_to_rightOption = van links naar rechts
right_to_leftOption = van rechts naar links
#
# io/HexDigit.java
#
hexDigitDataTip = Gegevens: knabbelen om in zeskant weer te geven
hexDigitDPTip = DecimalPoint: licht de decimale komma op.
#
# io/Io.java
#
buttonComponent = Knop
dipswitchComponent = Dip switch
dotMatrixComponent = LED Matrix
hexDigitComponent = Hexadecimale Digit Display
ioActiveAttr = Actief op High?
ioBackgroundColor = Achtergrond
ioColorAttr = Kleur
ioLibrary = Input/Output
ioOffColor = Uit Kleur
ioOnColor = Aan kleur
joystickComponent = Joystick
ledComponent = LED
pioComponent = Poort I/O
repLBComponent = Reptar lokale bus
RGBledComponent = RGBLED
sevenSegmentComponent = 7-segmentdisplay
ttyComponent = TTY
#
# io/Joystick.java
#
ioBitWidthAttr = Bitbreedte
#
# io/Keyboard.java
#
keybAvailTip = Beschikbaar: 1 wanneer de buffer tekens bevat
keybBufferLengthAttr = Bufferlengte
keybClearTip = Duidelijk: 1 ledigt buffer
keybClockTip = Klok: trigger verbruikt het voorste karakter van de buffer
keybDesc = toetsenbord (bufferdop. %s)
keybEnableTip = Lees inschakelen: 0 schakelt de klok uit
keyboardComponent = Toetsenbord
keybOutputTip = Gegevens: ASCII-waarde van het frontkarakter van de buffer
#
# io/PortIO.java
#
# ==> pioDirection = 
# ==> pioInput = 
# ==> pioInputs = 
# ==> pioIOMultiple = 
# ==> pioIOSingle = 
pioNumber = Aantal PIN-code
# ==> pioOutEnable = 
# ==> pioOutEnables = 
# ==> pioOutput = 
# ==> pioOutputs = 
#
# io/ReptarLocalBus.java
#
repLBTip = B tip
#
# io/RGBLed.java
#
BLUE = Blauwe input
GREEN = Groene ingang
RED = Rode invoer
#
# io/SevenSegment.java
#
DecimalPoint = Decimale punt
Segment_A = Segment A
Segment_B = Segment B
Segment_C = Segment C
Segment_D = Segment D
Segment_E = Segment E
Segment_F = Segment F
Segment_G = Segment G
# ==> SevenSegDP = 
#
# io/Tty.java
#
ttyClearTip = Duidelijk: 1 ontruimt het scherm
ttyClockTip = Klok: trigger voegt karakter toe aan de ingang
ttyColsAttr = Kolommen
ttyDesc = TTY (%s rijen, %s kolommen)
ttyDescShort = TTY
ttyEnableTip = Schrijf inschakelen: 0 schakelt de klok uit
ttyInputTip = Gegevens: ASCII-waarde van het volgende teken om te schrijven
ttyRowsAttr = Rijen
#
# io/Video.java
#
rgbVideoCLK = Klok
rgbVideoColor = Kleurenmodel
rgbVideoComponent = RGB-video
rgbVideoCursor = Cursor
rgbVideoData = Gegevens in %s formaat
rgbVideoHeight = Hoogte
rgbVideoReset = Reset Gedrag
rgbVideoRST = Reset
rgbVideoScale = Schaal
rgbVideoWE = Schrijf inschakelen
rgbVideoWidth = Breedte
rgbVideoX = X Coördineren
rgbVideoY = Y Coördinaat
#
# library/bcd2sevenseg.java
#
BCDValue = BCD-waarde
BCD2SevenSegment = BCD tot zeven segmenten
#
# library/BFHPraktika.java
#
BFHMegaFunctions = BFH-megafuncties met megafuncties
Bin2BCD = Binary aan BCD
#
# library/bin2bcd.java
#
BinaryDataBits = Binary data bits
BinaryInputTip = Binaire ingang
#
# memory/AbstractFlipFlop.java
#
flipFlopClockTip = Klok: status updates over trigger
flipFlopNotQTip = Aanvulling op de huidige toestand van de slippers
flipFlopPresetTip = Vooraf ingesteld: Wanneer 1, pin staat tot 1 asynchroon op 1
flipFlopQTip = Huidige staat van de slippers
flipFlopResetTip = Vrij: Wanneer 1, pin staat op 0, asynchroon op 0.
#
# memory/Counter.java
#
counterCarryTip = Carry: is 1 wanneer de tellerwaarde het maximum heeft bereikt.
counterClockTip = Klok: waarde wordt bijgewerkt wanneer getriggerd
counterComponent = Teller
counterDataTip = Gegevens: waarde om in de teller te laden
counterEnableLabel = ct
counterEnableTip = Inschakelen: wanneer 1 telt de teller omhoog/omlaag
counterGoalAttr = Actie bij overflow
counterGoalContinue = Doorgaan met tellen
counterGoalLoad = Laad waarde
counterGoalStay = Blijf op waarde
counterGoalWrap = Klokje rond
counterLabel = ctr
counterLoadTip = Laden: wanneer 1, laad teller waarde van gegevens input
counterMaxAttr = Maximale waarde
counterQTip = Output: huidige waarde van de teller
counterResetTip = Reset: wanneer 1 wordt de teller waarde asynchroon gereset naar 0
counterUpDownTip = Tel Richting: wanneer 1, telt de teller omhoog wanneer 0 telt de teller omlaag
#
# memory/JKFlipFlop.java
#
jkFlipFlopComponent = J-K Flip-Flop
#
# memory/Mem.java
#
memAsyncRead = Asynchroon lezen:
memByte = Gebruiksbyte maakt het mogelijk
memDual = Tweevoudig
memEnables = Maakt het mogelijk:
memLine = Gebruikslijn maakt het mogelijk
memLineSize = Lijngrootte
# ==> memMisaligned = 
memOcto = Octo
memQuad = Quad
memRaw = Lezen na schrijven
memReadBehav = Leesgedrag
memSingle = Enkelvoudig
memWar = Schrijven na lezen
ramAddrWidthAttr = Adres Bit Breedte
ramDataWidthAttr = De Breedte van de gegevensbeet
ramSelAttr = Selecteer
stdTriggerHigh = Hoog Niveau
stdTriggerLow = Laag niveau
#
# memory/MemMenu.java
#
ramConfirmClearMsg = Weet je zeker dat je het geheugen op nul wilt zetten?
ramConfirmClearTitle = Bevestig duidelijk
ramLoadMenuItem = Load Image....
ramSaveMenuItem = Save Image....
#
# memory/Memory.java
#
dFlipFlopComponent = D Flip-Flop
memoryLibrary = Geheugen
tFlipFlopComponent = T Flip-Flop
#
# memory/Ram.java
#
ramComponent = RAM
#
# memory/RamAppearance.java
#
memAddrTip = Adres: locatie die toegankelijk is in het geheugen
memDataTip = Gegevens: waarde geladen vanaf het adres
memDataTip0 = Gegevens: waarde geladen vanaf adres 0
memDataTip1 = Gegevens: waarde geladen vanaf adres 1
memDataTip2 = Gegevens: waarde geladen vanaf adres 2
memDataTip3 = Gegevens: waarde geladen vanaf adres 3
ramByteEnableTip0 = Byte inschakelen voor byte 0
ramByteEnableTip1 = Byte mogelijk maken voor byte 1
ramByteEnableTip2 = Byte mogelijk maken voor byte 2
ramByteEnableTip3 = Byte mogelijk maken voor byte 3
ramClkTip = Klok: geheugenwaarde-updates van 0 naar 1
ramClrPin = Duidelijk: een één zet alle geheugenlocaties op 0
ramInTip = Input: waarde die op het adres moet worden opgeslagen.
ramInTip0 = Invoer: waarde op te slaan op adres 0
ramInTip1 = Invoer: waarde die moet worden opgeslagen op adres 1
ramInTip2 = Invoer: waarde op te slaan op adres 2
ramInTip3 = Invoer: waarde op te slaan op adres 3
ramLETip0 = Lijn vrijgave voor adres 0
ramLETip1 = Lijn vrijgave voor adres 1
ramLETip2 = Lijn vrijgave voor adres 2
ramLETip3 = Lijn vrijgave voor adres 3
ramOETip = Belasting: als 1, laadt het geheugen naar de uitgang
ramWETip = Opslaan: indien 1, invoer opslaan in het geheugen
#
# memory/RamAttributes.java
#
ramBidirDataBus = Een bidirectionele databus
ramByteEnables = Lees schrijfbesturing
RamClearPin = Gebruik duidelijke pin
ramDataAttr = Implementatie van databus
ramNoByteEnables = Alleen het hele woord lezen/schrijven
ramSeparateDataBus = Aparte databus voor lezen en schrijven
ramTypeAttr = ramtype
ramTypeNonVolatile = niet-vluchtig
ramTypeVolatile = onstabiel
ramWithByteEnables = Met de byte kunt u
#
# memory/Random.java
#
randomClockTip = Klok: de waarde kan worden bijgewerkt bij het inschakelen van de trekker
randomComponent = Random Generator
randomLabel = willekeurig
randomNextTip = Inschakelen: stappen naar de volgende stap in de volgorde van de kloktrigger
randomQTip = Uitgang: opeenvolgend stroomnummer
randomResetTip = Duidelijk: Wanneer 1, wordt het begin van het zaad asynchroon teruggezet naar het begin van het zaad.
randomSeedAttr = Zaad
randomWidthLabel = Breedte: %d
#
# memory/Register.java
#
registerClkTip = Klok: waarde-updates van de trigger
registerClrTip = Vrij: Wanneer 1, pinwaarde tot 0 asynchroon op 0, dan wordt de pinwaarde niet gewijzigd.
registerComponent = Register
registerDTip = Gegevens: waarde opgeslagen op de kloktrigger
registerEnableTip = Inschakelen: Wanneer 0, zijn de kloktriggers niet effectief.
registerLabel = reg
registerQTip = Uitgang: actuele waarde van het register
registerShowInTab = Toon in tabblad Registers
registerWidthLabel = (%sb)
#
# memory/Rom.java
#
romComponent = ROM
#
# memory/RomContentsListener.java
#
romChangeAction = Inhoud van de ROM bewerken
#
# memory/ShiftRegister.java
#
shiftRegClearTip = Duidelijk: wanneer 1, stelt alles asynchroon terug op 0 in.
shiftRegClockTip = Klok: de waarden kunnen worden bijgewerkt bij het inschakelen van de trekker
shiftRegInTip = Input: waarde die naar de eerste fase moet worden overgeheveld.
shiftRegisterComponent = Schuif-register
shiftRegisterLabel1 = ploegreglement
shiftRegisterLabel2 = %sx%s
shiftRegLengthAttr = Aantal stadia
shiftRegLoadTip = Belasting: bij 1 (bij shift = 0), belasting van de ingangen in alle trappen bij 1 (bij shift = 0), belasting van de ingangen
shiftRegOutTip = Output: is de inhoud van de laatste fase
shiftRegParallelAttr = Parallelle lading
shiftRegShiftTip = Verschuiving: verschuiving is uitgeschakeld wanneer 0
#
# memory/SRFlipFlop.java
#
srFlipFlopComponent = S-R Flip-Flop
#
# plexers/BitSelector.java
#
bitSelectorComponent = Bit Selector
bitSelectorDataTip = Gegevens
bitSelectorGroupAttr = Uitgangsbeetjes
bitSelectorOutputTip = Uitgang: waarde van de geselecteerde groep bits uit de gegevens
bitSelectorSelectTip = Selecteren: geeft aan welke groep uit de gegevens is geselecteerd.
#
# plexers/Decoder.java
#
decoderEnableTip = Inschakelen: wanneer niet 0, is de geselecteerde uitgang 1
decoderOutTip = Output %s
decoderSelectTip = Kiezen: geeft aan welke uitgang 1 is.
#
# plexers/Demultiplexer.java
#
demultiplexerEnableTip = Inschakelen: wanneer niet 0, wordt de geselecteerde uitgang ingevoerd.
demultiplexerInTip = Invoer
demultiplexerOutTip = Output %s
demultiplexerSelectTip = Selecteren: geeft aan welke uitgang ingang wordt ontvangen.
#
# plexers/Multiplexer.java
#
multiplexerEnableTip = Inschakelen: indien niet 0, is de uitgang de geselecteerde ingang.
multiplexerInTip = Input %s
multiplexerOutTip = Output
multiplexerSelectTip = Selecteren: geeft aan welke ingang de uitgang wordt.
#
# plexers/Plexers.java
#
decoderComponent = Decoder
demultiplexerComponent = Demultiplexer
gateSizeAttr = Poortgrootte
gateSizeNarrowOpt = Smal
gateSizeWideOpt = Breed
multiplexerComponent = Multiplexer
plexerDisabledAttr = Uitgang uitgeschakeld
plexerDisabledFloating = Zwevend
plexerDisabledZero = Nul
plexerEnableAttr = Inclusief Enable?
plexerLibrary = Plexers
plexerSelectBitsAttr = Selecteer Bits
plexerSelectBottomLeftOption = Bodem/Linkerzijde
plexerSelectLocAttr = Selecteer een locatie
plexerSelectTopRightOption = Boven/rechts
plexerThreeStateAttr = Drie staten?
priorityEncoderComponent = Voorrangsencoder
#
# plexers/PriorityEncoder.java
#
priorityEncoderEnableInTip = Invoer inschakelen: 0 schakelt het onderdeel uit
priorityEncoderEnableOutTip = Uitgang inschakelen: 1 indien ingeschakeld en geen ingangen zijn 1
priorityEncoderGroupSignalTip = Groep selecteren: 1 indien ingeschakeld en elke ingang is 1
priorityEncoderInTip = Input %s
priorityEncoderOutTip = Uitgang: adres van de hoogst geïndexeerde 1 ingang
#
# StdAttr.java
#
ioLabelColorAttr = Label Kleur
stdClassicAppearance = Klassieke Logisim
stdDataWidthAttr = Woordbreedte
stdEvolutionAppearance = Logisim-HolyCross
stdFacingAttr = Orientatie
stdLabelAttr = Label
stdLabelCenter = Centrum
stdLabelFontAttr = Label Lettertype
stdLabelLocAttr = Plaats van het label
stdLabelVisibility = Label zichtbaar
stdLogisimEvolutionAppearance = Logisim-Evolutie
stdTriggerAttr = Trigger
#
# tcl/Tcl.java
#
tclLibrary = TCL
#
# tcl/TclComponentAttributes.java
#
tclConsoleContentFile = TCL inhoudsbestand
#
# tcl/TclConsoleReds.java
#
tclConsoleReds = TCL REDS console
#
# tcl/TclGeneric.java
#
tclGeneric = TCL algemeen
tclInterfaceDefinition = TCL-interface VHDL-entiteit
tclInterfaceDefinitionValue = (klik om te bewerken)
#
# ttl/AbstractTtlGate.java
#
GNDPin = Massapin %s
VCCPin = VCC pin %s
#
# ttl/DisplayDecoder.java
#
BI = BI
BlankingInputInTip = Blanking
DisplayDecoderComponent = Display Decoder
DisplayDecoderInTip = Invoer
DisplayDecoderOutTip = Output
ioMultiBit = meerbit
LampTestInTip = De input van de lamptest
LT = LT
memEnableLabel = en
RBI = RBI
RippleBlankingInputInTip = Rimpelblanking ingang
#
# ttl/TTL.java
#
ShowInternalStructure = Toon de interne structuur
TTL7400 = 7400: quad 2-invoer NAND-poort met 2 ingangen
TTL7402 = 7402: quad 2-invoer NOR-poort met 2 ingangen
TTL7404 = 7404: zeskant omvormer
TTL7408 = 7408: kwadraat 2-invoer EN poort
TTL7410 = 7410: drievoudige 3-invoer NAND-poort met 3 ingangen
TTL7411 = 7411: driedubbele 3-invoer EN poort
TTL74125 = 74125: Quad-busbuffer, drietrapsuitgangen, negatieve vrijgave, negatieve vrijgave
TTL7413 = 7413: Dubbele NAND-poort met 4 ingangen (schmitt-trigger)
TTL7414 = 7414: zeskant omvormer (schmitt-trigger)
TTL74161 = 74161: 4-bit sync counter with clear
TTL74165 = 74165: 8-bits parallel-naar-serieel shiftregister
TTL74175 = 74175: quad D-slippers, asynchrone reset, asynchrone reset
TTL7418 = 7418: dubbele 4-invoer NAND-poort (schmitt-trigger) met 4 ingangen
TTL7419 = 7419: zeskant omvormer (schmitt-trigger)
TTL7420 = 7420: dubbele 4-invoer NAND-poort met 4 ingangen
TTL7421 = 7421: dubbele 4-invoer EN poort
TTL7424 = 7424: quad 2-invoer NAND-poort met 2 ingangen (schmitt-trigger)
TTL74266 = 74266: quad 2-invoer XNOR-poort met 2 ingangen
TTL7427 = 7427: drievoudige 3-invoer NOR-poort met 3 ingangen
TTL74273 = 74273: achthoekige D-slippers met doorzichtig
TTL74283 = 74283: 4-bits binaire volledige adder
TTL7430 = 7430: enkele 8-ingangen NAND-poort met 8 ingangen
TTL7432 = 7432: quad 2-invoer OF poort OF poort
TTL7436 = 7436: quad 2-input NOR-poort met 2 ingangen
TTL74377 = 74377: achthoekige D-slippers met vrijgave
TTL7442 = 7442: BCD naar decodeerder
TTL7443 = 7443: Excess-3 naar decoder decoder
TTL7444 = 7444: Gray codedecoder naar decimaal
TTL7447 = 7447: BCD naar 7-segments decoder
TTL7451 = 7451: Dubbele EN-OR-INVERT poort
TTL7454 = 7454: Vier brede EN-OR-INVERT poorten
TTL7458 = 7458: dubbele EN/OF poort
TTL7464 = 7464: 4-2-3-3-2 EN-OR-INVERT gate
TTL7474 = 7474: Dubbele D-slippers met vooringestelde en heldere D-slippers.
TTL7485 = 7485: 4-bit magnitude vergelijker voor 4-bit magnitude
TTL7486 = 7486: quad 2-invoer XOR-poort met 2 ingangen
VccGndPorts = Vcc- en Gnd-poorten inschakelen
#
# wiring/BitExtender.java
#
extenderInAttr = Bit Breedte In
extenderInputLabel = inbreng
extenderInputType = Invoer
extenderMainLabel = uitsteken
extenderOneLabel = 1
extenderOneType = Een
extenderOutAttr = Bit Width Out
extenderSignLabel = voorteken
extenderSignType = Teken
extenderTypeAttr = Uitbreidingstype
extenderZeroLabel = 0
extenderZeroType = Nul
#
# wiring/Clock.java
#
clockComponent = Klok
clockHighAttr = Hoge Duur
clockLowAttr = Lage Duur
#
# wiring/Constant.java
#
constantComponent = Constant
constantValueAttr = Waarde
#
# wiring/DurationAttribute.java
#
clockDurationOneValue = 1 Tik
clockDurationValue = %s Tikken
durationLargeMessage = De waarde moet %s of minder zijn.
durationSmallMessage = De waarde moet ten minste %s bedragen.
freqInvalidMessage = Waarde is geen geldig geheel getal
PORDurationOneValue = 1 Seconde
PORDurationValue = %s Seconden
#
# wiring/Pin.java
#
PinCancel = Annuleren
pinComponent = speld
PinEnterDecimal = Voer Decimaal
pinFrozenQuestion = De pen is verbonden met de toestand van het supercircuit. Een nieuwe schakeltoestand creëren?
pinFrozenTitle = Pin bevestigd aan Super circuit.
pinInputName = Invoer
pinInputToolTip = Een invoerpin toevoegen
PinOkay = GOED
pinOutputAttr = Output?
pinOutputName = Output
pinOutputToolTip = Een uitgangsspeld toevoegen
pinPullAttr = Trekgedrag
pinPullDownOption = Naar beneden trekken
pinPullNoneOption = Ongewijzigd
pinPullUpOption = Trek omhoog
pinThreeStateAttr = Drie staten?
#
# wiring/PowerOnReset.java
#
porHighAttr = POR-tijd
PowerOnResetComponent = POR
#
# wiring/Probe.java
#
probeComponent = Sonde
#
# wiring/ProbeAttributes.java
#
probeNewPin = Pijlvormen
stdAppearanceAttr = Verschijning
#
# wiring/PullResistor.java
#
pullComponent = Trek weerstand
pullErrorType = Fout
pullOneType = Een
pullTypeAttr = Trek Richting
pullZeroType = Nul
#
# wiring/Transistor.java
#
transistorNDrain = afvoer: een lage bron trekt de afvoer laag (alleen bij een hoog hek)
transistorNGate = gate: wanneer hoog, laat de stroom door de transistor stromen
transistorNSource = bron: een lage bron trekt de afvoer laag (alleen bij een hoog hek)
transistorPDrain = afvoer: een hoge bron zal de afvoer hoog trekken (alleen bij een laag hek)
transistorPGate = gate: wanneer laag, laat de stroom door de transistor stromen
transistorPSource = bron: een hoge bron zal de afvoer hoog trekken (alleen wanneer de poort laag is)
transistorTypeAttr = Type
transistorTypeN = N-Type
transistorTypeP = P-Type
#
# wiring/TransmissionGate.java
#
transmissionGateDrain = afvoer: gecontroleerd door de bron, afhankelijk van de p- en n-poorten.
transmissionGateNGate = n-poort: wanneer laag, laat lage bron door te voeren om af te tappen
transmissionGatePGate = p-poort: wanneer hoog, laat de hoge bron door te voeren naar afvoer
transmissionGateSource = bron: regelt de afvoer, afhankelijk van de p- en n-poort
#
# wiring/Tunnel.java
#
tunnelComponent = Tunnel
#
# wiring/Wiring.java
#
extenderComponent = Bit Extender
groundComponent = Massa
noConnectionComponent = Niet aansluiten
powerComponent = Spanning
transistorComponent = Transistor
transmissionGateComponent = Transmissie Poort
wiringGateAttr = Poort locatie
wiringGateBottomRightOption = Onder/rechtsonder
wiringGateTopLeftOption = Boven/links
wiringLibrary = Bedrading


