#
# arith/Adder.java
#
adderCarryInTip = Carry In: 1の場合、出力に1が追加されます。
adderCarryOutTip = Carry Out: 合計が利用可能なビットをオーバーフローした場合は1
adderComponent = 加算器
adderInputTip = Input: 追加する数値の1つ
adderOutputTip = Output: 入力の合計 (+繰り上がり)
#
# arith/ArithmeticLibrary.java
#
arithmeticLibrary = 算術
#
# arith/BitAdder.java
#
bitAdderComponent = ビット加算器
bitAdderInputTip = Input: カウントするビット
bitAdderOutputManyTip = Output: 入力ビットの中で1であるものの合計。
gateInputsAttr = 入力数
#
# arith/BitFinder.java
#
bitFinderComponent = ビットファインダー
bitFinderFindLabel = find
bitFinderHighLabel = high
bitFinderHighOption = 最上位の %s
bitFinderIndexHighTip = Index: 入力の最上位の %s のインデックス。
bitFinderIndexLowTip = Index: 入力の最下位 %s のインデックス。
bitFinderInputTip = 入力: 検索するビット
bitFinderLowLabel = low
bitFinderLowOption = 最下位の %s
bitFinderPresentTip = Present: 入力に %s が含まれている場合は 1
bitFinderTypeAttr = Type
#
# arith/Comparator.java
#
comparatorComponent = コンパレーター
comparatorEqualTip = Equal: 1 (A が B と等しい場合)
comparatorGreaterTip = 大：AがBより大きい場合は1
comparatorInputATip = A: 比較操作の前の番号
comparatorInputBTip = B: 比較操作に続く番号
comparatorLessTip = Less: AがBより小さい場合は1
comparatorType = 数値型
twosComplementOption = 2の補数
unsignedOption = 符号なし
#
# arith/Divider.java
#
dividerComponent = 除算器
dividerDividendLowerTip = Dividend Lower: 割る数字の下半分。
dividerDividendUpperTip = Dividend Upper: 割る数字の上半分。
dividerDivisorTip = Divisor: 割られる数
dividerOutputTip = Output: 割る数を割られる数で割った結果
dividerRemainderOutput = rem
dividerRemainderTip = Remainder: 割り算のあまり (割られる数 - 出力 * 割る数)
dividerUpperInput = upper
#
# arith/FPAdder.java
#
# ==> fpAdderComponent =
# ==> fpAdderOutputTip =
# ==> fpErrorTip =
#
# arith/FPComparator.java
#
# ==> fpComparatorComponent =
#
# arith/FPDivider.java
#
# ==> fpDividerDividendTip =
# ==> fpDividerComponent =
#
# arith/FPMultiplier.java
#
# ==> fpMultiplierComponent =
# ==> fpMultiplierOutputTip =
#
# arith/FPNegator.java
#
# ==> fpNegatorComponent =
# ==> fpNegatorOutputTip =
#
# arith/FPSubtractor.java
#
# ==> fpSubtractorComponent =
#
# arith/FPToInt.java
#
# ==> ceilOption =
# ==> floorOption =
# ==> fpToIntComponent =
# ==> fpToIntInputTip =
# ==> fpToIntOutputTip =
# ==> fpToIntType =
# ==> roundOption =
# ==> truncateOption =
#
# arith/IntToFP.java
#
# ==> intToFPComponent =
# ==> intToFPInputTip =
# ==> intToFPOutputTip =
#
# arith/Multiplier.java
#
multiplierCarryInTip = Carry In: 出力に追加される量
multiplierCarryOutTip = Carry Out: 積の上位ビット
multiplierComponent = 乗算器
multiplierInputTip = Input: 乗算する数値の一つ
multiplierOutputTip = Output: 入力の積にキャリーを加えたもの。
#
# arith/Negator.java
#
negatorComponent = 符号反転器
negatorInputTip = Input: 反転する数値
negatorOutputTip = Output: 入力の2の補数反転
#
# arith/Shifter.java
#
shiftArithmeticRight = 算術右
shifterComponent = シフト演算器
shifterDistanceTip = Distance: 入力をどこまでシフトさせるか
shifterInputTip = Input: シフトを行うビット
shifterOutputTip = Output: 入力をシフトした結果
shifterShiftAttr = シフトタイプ
shiftLogicalLeft = 論理右
shiftLogicalRight = 論理左
shiftRollLeft = 回転左
shiftRollRight = 回転右
#
# arith/Subtractor.java
#
subtractorBorrowInTip = Borrow In: 1の場合、出力が1減少します。
subtractorBorrowOutTip = Borrow Out: 差分が負の値になる場合は1
subtractorComponent = 減算器
subtractorMinuendTip = Minuend: 引き算の対象となる数
subtractorOutputTip = Output: minuendとsubtrahendの差
subtractorSubtrahendTip = Subtrahend: minuendから引くべき数
#
# base/BaseLibrary.java
#
baseLibrary = Base
#
# base/Text.java
#
textComponent = ラベル
textFontAttr = Font
# ==> textColorAttr =
textHorzAlignAttr = Horizontal Alignment
textHorzAlignCenterOpt = 中央
textHorzAlignLeftOpt = 左
textHorzAlignRightOpt = 右
textTextAttr = Text
textVertAlignAttr = Vertical Alignment
textVertAlignBaseOpt = Base
textVertAlignBottomOpt = 下
textVertAlignCenterOpt = 中央
textVertAlignTopOpt = 上
#
# base/VhdlParser.java
#
CannotFindEntityException = エンティティ宣言が見つかりません。
emptySourceException = 空のコンテンツを解析できません。
genericDeclarationException = 不正なジェネリック構文
genericTypeException = サポートされていないジェネリック型
genericValueException = 認識されていないジェネリックのデフォルト値
invalidTypeException = 無効なポートタイプ
portDeclarationException = 不正なポート構文
# ==> portTypeException =
#
# Builtin.java
#
builtinLibrary = 組み込み
#
# gates/AndGate.java
#
andGateComponent = AND回路
#
# gates/Buffer.java
#
bufferComponent = バッファ
#
# gates/ControlledBuffer.java
#
controlledBufferComponent = バッファ制御器
controlledControlOption = 制御線の位置
controlledInverterComponent = コントロールインバータ
controlledLeftHanded = 左利き向き
controlledRightHanded = 右利き向き
#
# gates/EvenParityGate.java
#
evenParityComponent = 偶数パリティ
#
# gates/GateAttributes.java
#
gateOutput01 = 0/1
gateOutput0Z = 0/浮動小数
gateOutputAttr = 出力値
gateOutputZ1 = 浮動小数/1
gateSizeNormalOpt = Medium
xorBehaviorAttr = 複数入力の動作
xorBehaviorOdd = 奇数の場合
xorBehaviorOne = 1つの入力がオンの場合
#
# gates/GatesLibrary.java
#
gatesLibrary = 回路
#
# gates/NandGate.java
#
nandGateComponent = NAND回路
#
# gates/NegateAttribute.java
#
gateNegateAttr = %sを反転する
#
# gates/NorGate.java
#
norGateComponent = NOR回路
#
# gates/NotGate.java
#
notGateComponent = NOT回路
#
# gates/OddParityGate.java
#
oddParityComponent = 奇数パリティ
#
# gates/OrGate.java
#
orGateComponent = OR回路
#
# gates/PLA.java
#
plaBitWidthIn = 入力のビット幅
plaBitWidthOut = 出力のビット幅
input = 入力
output = 出力
PLA = PLA
plaClickToEdit = (クリックして編集)
plaEditMenuItem = PLAプログラムの編集中...
plaProgram = プログラム
#
# gates/PLATable.java
#
plaEditorTitle = PLA プログラムエディタ
plaFileCreateError = ファイルを作成できませんでした。
plaFileOpenError = ファイルを開くことができませんでした。
plaLoadDialogTitle = PLA プログラムのロード
plaLoadErrorTitle = PLAプログラムの読み込みエラー
plaSaveDialogTitle = PLAプログラムの保存
plaSaveErrorTitle = PLAプログラムの保存エラー
#
# gates/XnorGate.java
#
xnorGateComponent = XNOR回路
#
# gates/XorGate.java
#
xorGateComponent = XOR回路
#
# InstanceComponent.java
#
KeywordNameError = ラベルは予約キーワードであり、使用できません。別のラベルを指定してください。
MatchedLabelNameError = ラベルとコンポーネント名が同じではない可能性があります (大文字と小文字は区別されません)。コンポーネント名とは異なるラベルを指定してください。.
#
# InstanceTextField.java
#
changeLabelAction = ラベルの変更
#
# io/DipSwitch.java
#
DIP = DIP
DipSwitchComponent = DIPスイッチ
nrOfSwitch = スイッチの数
#
# io/LedCluster.java
#
#
# io/DotMatrix.java
#
ioInputColumn = 列
ioInputRow = 行
ioInputSelect = 行/列の選択
ioMatrixCols = マトリックスの列
ioMatrixInput = フォーマットの入力
ioMatrixPersistenceAttr = Light Persistence
ioMatrixRows = マトリックスの行
ioMatrixShape = ドットの形
ioShapeCircle = 円形
ioShapeSquare = 正方形
# ==> ioShapePaddedSquare =
# ==> ioLedBarComponent =
# ==> ioLedBarSegments =
# ==> ioLedBarInput =
# ==> ioLedBarInputSeparated =
# ==> ioLedBarInputOneWire =
#
# io/extra/Buzzer.java
#
buzzerFrequecy = 周波数
buzzerVolume = ボリューム
buzzerVolumeBitWidth = ボリュームのビット幅
buzzerUnitDhz = dHz (0.1Hz)
# ==> buzzerWaveform =
# ==> buzzerSine =
# ==> buzzerSquare =
# ==> buzzerSmoothLevel =
# ==> buzzerSmoothWidth =
# ==> buzzerChannel =
# ==> buzzerChannelBoth =
# ==> buzzerChannelLeft =
# ==> buzzerChannelRight =
# ==> buzzerTriangle =
# ==> buzzerSawtooth =
# ==> buzzerNoise =
# ==> buzzerDutyCycle =
enableSound = サウンドの有効化
Hz = Hz
#
# io/extra/DigitalOscilloscope.java
#
BorderColor = ボーダーカラー
bothOption = 両方
ClearDiagram = ダイアグラムのクリア
DigitalOscilloscopeClock = クロック
DrawClockFrontLine = クロックの前線を描く
noOption = なし
ShowClockAttribute = クロックの属性を表示
stdTriggerFalling = Falling Edge
stdTriggerRising = Rising Edge
#
# io/extra/ExtraIoLibrary.java
#
buzzerComponent = ブザー
DigitalOscilloscopeComponent = digital oscill.
PlaRomComponent = PLA
Slider = スライダー
switchComponent = スイッチ
#
# io/extra/PlaRom.java
#
memCSTip = Chip select: 0はコンポーネントを無効にします
PlaANDAttr = And
PlaOutputsAttr = Output
ramCSLabel = sel
#
# io/extra/PlaRomData.java
#
PlaEditWindowTitel = Pla Rom %s 編集ウィンドウ
#
# io/extra/ProgrammableGenerator.java
#
NStateAttr = Nr. of States
ProgrammableGeneratorComponent = プログラム可能ジェネレータ
ramClearMenuItem = コンテンツをクリア
ramEditMenuItem = コンテンツの編集...
romContentsAttr = Contents
romContentsValue = (クリックして編集)
#
# io/extra/Slider.java
#
left_to_rightOption = 左から右へ
right_to_leftOption = 右から左へ
#
# io/HexDigit.java
#
hexDigitDataTip = Data: 16進数で表示するニブル
hexDigitDPTip = DecimalPoint: 小数点を点灯します。
#
# io/IoLibrary.java
#
buttonComponent = ボタン
dipswitchComponent = Dip スイッチ
dotMatrixComponent = マトリックス型LED
hexDigitComponent = 16進数ディスプレイ
ioActiveAttr = Active On High?
ioBackgroundColor = Background
ioColorAttr = Color
ioLibrary = 入力/出力
ioOffColor = オフカラー
ioOnColor = オンカラー
joystickComponent = ジョイスティック
ledComponent = LED
pioComponent = ポート I/O
repLBComponent = リピータローカルバス
RGBledComponent = RGB LED
sevenSegmentComponent = 7セグメントディスプレイ
ttyComponent = TTY
#
# io/Button.java
#
# ==> buttonPressAttr =
# ==> buttonPressActive =
# ==> buttonPressPassive =
#
# io/Joystick.java
#
ioBitWidthAttr = ビット幅
# ==> joystickCoordinateX =
# ==> joystickCoordinateY =
#
# io/Keyboard.java
#
keybAvailTip = Available: バッファに文字が含まれている場合は1
keybBufferLengthAttr = バッファ長
keybClearTip = Clear: 1 バッファを空にする
keybClockTip = Clock: トリガはバッファの前面文字を消費する。
keybDesc = キーボード (バッファキャップ %s)
keybEnableTip = 読み込み有効化: 0はクロックを無効にします。
keyboardComponent = キーボード
keybOutputTip = Data: バッファの先頭文字のASCII値
#
# io/PortIO.java
#
pioDirection = ポートタイプ:
pioInput = 入力のみ
pioInputs = 入力 %s
pioIOMultiple = I/O (ビットごとの有効化)
pioIOSingle = I/O (単体ごとの有効化)
pioNumber = ピンの数
pioOutEnable = 出力有効化
pioOutEnables = 出力は %s　を有効にします
pioOutput = 出力のみ
pioOutputs = 出力 %s
#
# io/ReptarLocalBus.java
#
repLBTip = B チップ
#
# io/RgbLed.java
#
BLUE = Blue input
GREEN = Green input
RED = Red input
#
# io/SevenSegment.java
#
DecimalPoint = 小数点
Segment_A = セグメント A
Segment_B = セグメント B
Segment_C = セグメント C
Segment_D = セグメント D
Segment_E = セグメント E
Segment_F = セグメント F
Segment_G = セグメント G
SevenSegDP = 小数点の保持:
#
# io/Tty.java
#
ttyClearTip = Clear: 1は画面をクリアします。
ttyClockTip = Clock: トリガが入力に文字を追加する
ttyColsAttr = Columns
ttyDesc = TTY (%s 行, %s 列)
ttyDescShort = TTY
ttyEnableTip = 書き込み可能: 0はクロックを無効にします。
ttyInputTip = Data: 次に書き込む文字のASCII値
ttyRowsAttr = Rows
#
# io/Video.java
#
rgbVideoCLK = クロック
rgbVideoColor = カラーモデル
rgbVideoComponent = RGB ビデオ
rgbVideoCursor = カーソル
rgbVideoData = %s 形式のデータ
rgbVideoHeight = 高さ
rgbVideoReset = ふるまいのリセット
rgbVideoRST = リセット
rgbVideoScale = Scale
rgbVideoWE = 書き込み可能
rgbVideoWidth = 幅
rgbVideoX = X 座標
rgbVideoY = Y 座標
#
# bfh/bcd2sevenseg.java
#
BCDValue = BCD値
BCD2SevenSegment = BCD→7セグメント
#
# bfh/BfhLibrary.java
#
BFHMegaFunctions = BFHメガファンクション
Bin2BCD = バイナリからBCD
#
# bfh/bin2bcd.java
#
BinaryDataBits = バイナリデータビット
BinaryInputTip = バイナリ入力
#
# memory/AbstractFlipFlop.java
#
flipFlopClockTip = Clock: トリガーで状態が更新されます。
flipFlopNotQTip = 現在のフリップフロップ状態の補数
flipFlopPresetTip = Preset: 1の場合、ピンの状態は非同期的に1になります。
flipFlopQTip = 現在のフリップフロップの状態
flipFlopResetTip = Clear: 1の場合、ピンの状態は非同期的に0になります。
#
# memory/Counter.java
#
counterCarryTip = Carry: 値が最大値に達すると1になります（デクリメントすると最小値になります）。
counterClockTip = Clock: 値はトリガーで更新される可能性があります。
counterComponent = カウンタ
counterDataTip = Data: カウンタにロードする値
counterEnableLabel = ct
counterEnableTip = Enable: 1の場合、カウンタはインクリメントまたはデクリメントします。
counterGoalAttr = Action On Overflow
counterGoalContinue = カウントを続ける
counterGoalLoad = 次の値をロード
counterGoalStay = 値をキープ
counterGoalWrap = 回り込み
counterLabel = ctr
counterLoadTip = Load: 1の場合、データ入力からロードします。
counterMaxAttr = 最大値
counterQTip = Output: カウンタの現在値
counterResetTip = Clear: 1の場合、非同期的に0にリセットされます。
counterUpDownTip = Up Down: 1の場合、カウンタが増分し、0の場合、カウンタが減分します。
#
# memory/JKFlipFlop.java
#
jkFlipFlopComponent = J-K フリップフロップ
#
# memory/Mem.java
#
memAsyncRead = 非同期読み出し:
memByte = バイト有効化使用
memDual = デュアル
memEnables = 有効化:
memLine = ライン有効化
memLineSize = ラインのサイズ
memMisaligned = ずれの許可?
memOcto = オクト
memQuad = クォッド
memRaw = 書き込み後の読み込み
memReadBehav = 読み込み動作
memSingle = 単体
memWar = Write after read
ramAddrWidthAttr = Address Bit Width
ramDataWidthAttr = Data Bit Width
ramSelAttr = Select
stdTriggerHigh = 高レベル
stdTriggerLow = 低レベル
#
# memory/MemMenu.java
#
ramConfirmClearMsg = メモリをゼロにしてもよろしいですか？
ramConfirmClearTitle = クリアの確認
ramLoadMenuItem = イメージのロード...
ramSaveMenuItem = イメージのセーブ...
#
# memory/MemoryLibrary.java
#
dFlipFlopComponent = D フリップフロップ
memoryLibrary = メモリ
tFlipFlopComponent = T フリップフロップ
#
# memory/Ram.java
#
ramComponent = RAM
#
# memory/RamAppearance.java
#
memAddrTip = Address: メモリ内でアクセスされる場所
memDataTip = Data: アドレスから読み込まれた値
memDataTip0 = Data: アドレス+0からロードされた値
memDataTip1 = Data: アドレス+1からロードされた値
memDataTip2 = Data: アドレス+2からロードされた値
memDataTip3 = Data: アドレス+3から読み込まれた値
ramByteEnableTip0 = バイト0のバイト有効化
ramByteEnableTip1 = バイト1のバイト有効化
ramByteEnableTip2 = バイト2のバイト有効化
ramByteEnableTip3 = バイト3のバイト有効化
ramClkTip = Clock: メモリ値は0から1への立ち上がりで更新されます。
ramClrPin = Clear: 1 はすべてのメモリ・ロケーションを 0 に設定します。
ramInTip = Input: アドレスに格納される値
ramInTip0 = Input: アドレス+0に格納される値
ramInTip1 = Input: アドレス+1に格納される値
ramInTip2 = Input: アドレス+2に格納される値
ramInTip3 = Input: アドレス+3に格納される値
ramLETip0 = アドレス+0 のライン有効化
ramLETip1 = アドレス+1 のライン有効化
ramLETip2 = アドレス+2 のライン有効化
ramLETip3 = アドレス+3 のライン有効化
ramOETip = Load: 1の場合、出力にメモリをロードします。
ramWETip = Store: 1の場合、メモリに入力を格納します。
#
# memory/RamAttributes.java
#
ramBidirDataBus = 1つの双方向データバス
ramByteEnables = 読み込み書き込み制御
RamClearPin = クリアピンを使用
ramDataAttr = データバス実装
ramNoByteEnables = ワード全体の読み書きのみ
ramSeparateDataBus = 読み取りと書き込みのための分離されたデータバス
ramTypeAttr = Ram type
ramTypeNonVolatile = 不揮発性
ramTypeVolatile = 揮発性
ramWithByteEnables = バイト有効化使用
#
# memory/Random.java
#
randomClockTip = Clock: トリガーで値が更新される可能性があります
randomComponent = 乱数生成器
randomLabel = Random
randomNextTip = Enable: クロックトリガで次のステップに進む
randomQTip = Output: 現在の番号を順に表示
randomResetTip = Clear: 1の場合、非同期的に初期シードにリセットされます
randomSeedAttr = Seed
randomWidthLabel = 幅: %d
#
# memory/Register.java
#
registerClkTip = Clock: トリガで値が更新される
registerClrTip = Clear: 1の場合、ピンの値を非同期的に0にする。
registerComponent = レジスタ
registerDTip = Data: クロックトリガに格納されている値
registerEnableTip = Enable: 0の場合、クロックトリガは無効になります。
registerLabel = reg
registerQTip = Output: レジスタの現在値
registerShowInTab = レジスタータブに表示
registerWidthLabel = (%sb)
#
# memory/Rom.java
#
romComponent = ROM
#
# memory/RomContentsListener.java
#
romChangeAction = ROMの内容を編集する
#
# memory/ShiftRegister.java
#
shiftRegClearTip = Clear: 1 の場合、すべてを非同期的に 0 にリセットします。
shiftRegClockTip = Clock: 値はトリガーで更新される可能性があります。
shiftRegInTip = Input: 第1段にシフトされる値
shiftRegisterComponent = シフトレジスタ
shiftRegisterLabel1 = shift reg
shiftRegisterLabel2 = %sx%s
shiftRegLengthAttr = 段階数
shiftRegLoadTip = Load: 1 (shift = 0) の場合、全ステージが入力からロードされます。
shiftRegOutTip = Output: 最終段階の内容です。
shiftRegParallelAttr = 並列負荷
shiftRegShiftTip = Shift: 0の時にシフトを無効にします。
#
# memory/SRFlipFlop.java
#
srFlipFlopComponent = S-R フリップフロップ
#
# plexers/BitSelector.java
#
bitSelectorComponent = ビット選択器
bitSelectorDataTip = Data
bitSelectorGroupAttr = Bitを出力する
bitSelectorOutputTip = Output: データから選択されたビット群の値
bitSelectorSelectTip = Select: データからどのグループを選択するかを識別します。
#
# plexers/Decoder.java
#
decoderEnableTip = Enable: 0でない場合、選択された出力は1です。
decoderOutTip = 出力 %s
decoderSelectTip = Select: どの出力が1であるかを識別します。
#
# plexers/Demultiplexer.java
#
demultiplexerEnableTip = Enable: 0でない場合、選択された出力が入力されます。
demultiplexerInTip = 入力
demultiplexerOutTip = 出力 %s
demultiplexerSelectTip = Select: 入力を受信する出力を識別します。
#
# plexers/Multiplexer.java
#
multiplexerEnableTip = Enable: 0でない場合、出力は選択された入力になります。
multiplexerInTip = 入力 %s
multiplexerOutTip = 出力
multiplexerSelectTip = Select: どの入力が出力になるかを識別します。
#
# plexers/PlexersLibrary.java
#
decoderComponent = デコーダ
demultiplexerComponent = デマルチプレクサ
gateSizeAttr = ゲートサイズ
gateSizeNarrowOpt = 狭
gateSizeWideOpt = 広
multiplexerComponent = マルチプレクサ
plexerDisabledAttr = 出力の無効
plexerDisabledFloating = 浮動小数
plexerDisabledZero = ゼロ
plexerEnableAttr = Include Enable?
plexerLibrary = プレクサ
plexerSelectBitsAttr = ビットの選択
plexerThreeStateAttr = Three-state?
priorityEncoderComponent = プライオリティ・エンコーダ
#
# plexers/PriorityEncoder.java
#
priorityEncoderEnableInTip = Enable Input: 0はコンポーネントを無効にします。
priorityEncoderEnableOutTip = Enable Output: 有効で入力がない場合は1
priorityEncoderGroupSignalTip = Group Select: 有効になっていて、どの入力も1の場合は1
priorityEncoderInTip = 入力 %s
priorityEncoderOutTip = Output: 最もインデックスの高い1入力のアドレス
#
# StdAttr.java
#
ioLabelColorAttr = Label Color
stdClassicAppearance = Classic Logisim
stdDataWidthAttr = データビット
stdEvolutionAppearance = Logisim-HolyCross
stdFacingAttr = Facing
# ==> stdFPDataWidthAttr =
stdLabelAttr = Label
stdLabelCenter = 中央
stdLabelFontAttr = Label Font
stdLabelLocAttr = Label Location
stdLabelVisibility = ラベルの視認
stdLogisimEvolutionAppearance = Logisim-Evolution
stdTriggerAttr = Trigger
stdSelectLocAttr = 位置の選択
stdSelectBottomLeftOption = 下/左
stdSelectTopRightOption = 上/右
#
# tcl/TclLibrary.java
#
tclLibrary = TCL
#
# tcl/TclComponentAttributes.java
#
tclConsoleContentFile = TCL コンテンツファイル
#
# tcl/TclConsoleReds.java
#
tclConsoleReds = TCL REDS コンソール
#
# tcl/TclGeneric.java
#
tclGeneric = TCL ジェネリック
tclInterfaceDefinition = TCLインタフェースVHDLエンティティ
tclInterfaceDefinitionValue = (クリックして編集)
#
# ttl/AbstractTtlGate.java
#
GNDPin = グランド端子 %s
VCCPin = CC端子 %s
#
# ttl/DisplayDecoder.java
#
BI = BI
BlankingInputInTip = Blanking
DisplayDecoderComponent = Display Decoder
DisplayDecoderInTip = 入力
DisplayDecoderOutTip = 出力
ioMultiBit = マルチビット
LampTestInTip = ランプテスト入力
LT = LT
memEnableLabel = en
RBI = RBI
RippleBlankingInputInTip = リップルブランキング入力
#
# ttl/TtlLibrary.java
#
ShowInternalStructure = 内部構造を表示する
TTL7400 = 7400: quad 2-入力 NAND 回路
TTL7402 = 7402: quad 2-入力 NOR 回路
TTL7404 = 7404: 16進数 インバータ
TTL7408 = 7408: quad 2-入力 AND 回路
TTL7410 = 7410: triple 3-入力 NAND 回路
TTL7411 = 7411: triple 3-入力 AND 回路
TTL74125 = 74125: quad バスバッファ, 三状態出力, 負の有効化
# ==> TTL74157 =
# ==> TTL74158 =
# ==> TTL74138 =
# ==> TTL74139 =
TTL7413 = 7413: dual 4-入力 NAND 回路(シュミットトリガー)
TTL7414 = 7414: hex inverter (シュミットトリガー)
TTL74161 = 74161: 4-bit sync counter with clear
# ==> TTL74163 =
# ==> TTL74164 =
# ==> TTL74165 =
TTL74175 = 74175: quad D-flipflop, asynchronous reset
TTL7418 = 7418: dual 4-入力 NAND 回路(シュミットトリガー)
TTL7419 = 7419: hex inverter (シュミットトリガー)
# ==> TTL74192 =
# ==> TTL74193 =
TTL7420 = 7420: dual 4-入力 NAND 回路
TTL7421 = 7421: dual 4-入力 AND 回路
TTL7424 = 7424: quad 2-入力 NAND 回路 (シュミットトリガー)
# ==> TTL74245 =
TTL74266 = 74266: quad 2-入力 XNOR 回路
TTL7427 = 7427: triple 3-入力 NOR 回路
TTL74273 = 74273: octal D-フリップフロップ クリア付き
TTL74283 = 74283: 4-bit バイナリ完全加算器
TTL7430 = 7430: single 8-入力 NAND 回路
TTL7432 = 7432: quad 2-入力 OR 回路
# ==> TTL7434 =
TTL7436 = 7436: quad 2-入力 NOR 回路
TTL74377 = 74377: octal D-フリップフロップ 有効化付き
TTL7442 = 7442: BCD から 10進数　デコーダ
TTL7443 = 7443: Excess-3 から 10進数　デコーダ
TTL7444 = 7444: Gray 10進数　デコーダ
TTL7447 = 7447: BCD から 7セグメント　デコーダ
TTL7451 = 7451: dual AND-OR-INVERT 回路
TTL7454 = 7454: 4幅 AND-OR-INVERT 回路
TTL7458 = 7458: dual AND-OR 回路
TTL7464 = 7464: 4-2-3-2 AND-OR-INVERT 回路
TTL7474 = 7474: dual D-フリップフロップ プリセットとクリア付き
TTL7485 = 7485: 4-bit マグニチュード コンパレータ
TTL7486 = 7486: quad 2-入力 XOR 回路
VccGndPorts = Vcc 及び　Gnd　ポートの有効化
#
# wiring/BitExtender.java
#
extenderInAttr = Bit Width In
extenderInputLabel = input
extenderInputType = 入力
extenderMainLabel = extend
extenderOneLabel = 1
extenderOneType = One
extenderOutAttr = Bit Width Out
extenderSignLabel = sign
extenderSignType = Sign
extenderTypeAttr = Extension Type
extenderZeroLabel = 0
extenderZeroType = Zero
#
# wiring/Clock.java
#
clockComponent = クロック
clockHighAttr = High Duration
clockLowAttr = Low Duration
# ==> clockPhaseAttr =
#
# wiring/Constant.java
#
constantComponent = 定数
constantValueAttr = 値
#
# wiring/DurationAttribute.java
#
clockDurationOneValue = 1 Tick
clockDurationValue = %s Ticks
durationLargeMessage = 値は %s 以下でなければいけません.
durationSmallMessage = 値は %s　以上でなければいけません。
freqInvalidMessage = 値は正しい整数値ではありません
PORDurationOneValue = 1秒
PORDurationValue = %s秒
#
# wiring/Pin.java
#
PinCancel = Cancel
pinComponent = ピン
PinEnterDecimal = Enter Decimal
# ==> PinEnterFloat =
pinFrozenQuestion = ピンはスーパー回路の状態に紐付けられています。新しい回路の状態を作成しますか？
pinFrozenTitle = スーパー回路とピンの添付
pinInputName = 入力
pinInputToolTip = 入力ピンの追加
PinOkay = OK
pinOutputAttr = Output?
pinOutputName = 出力
pinOutputToolTip = 出力ピンの追加
pinPullAttr = プル動作
pinPullDownOption = プルダウン
pinPullNoneOption = なし
pinPullUpOption = プルダウン
pinThreeStateAttr = Three-state?
#
# wiring/PowerOnReset.java
#
porHighAttr = POR-time
PowerOnResetComponent = POR
#
# wiring/Probe.java
#
probeComponent = Probe
#
# wiring/ProbeAttributes.java
#
probeNewPin = 矢印の形状
stdAppearanceAttr = Appearance
#
# wiring/PullResistor.java
#
pullComponent = プル抵抗器
pullErrorType = エラー
pullOneType = One
pullTypeAttr = プル方向
pullZeroType = Zero
#
# wiring/Transistor.java
#
transistorNDrain = drain: ソースが低いとドレインをローに引きます（ゲートがハイの場合のみ）
transistorNGate = gate: ハイレベルの場合、トランジスタに電流を流すことができます。
transistorNSource = source: ローソースはドレインをローに引きます(ゲートがハイの時のみ)
transistorPDrain = drain: ハイソースはドレインをハイに引きます（ゲートがローの場合のみ）
transistorPGate = gate: ローの場合、電流がトランジスタに流れるようにします。
transistorPSource = source: ハイソースはドレインをハイに引きます（ゲートがローの場合のみ）
transistorTypeAttr = Type
transistorTypeN = N-Type
transistorTypeP = P-Type
#
# wiring/TransmissionGate.java
#
transmissionGateDrain = drain: ソースによって制御され、pゲートとnゲートに依存します。
transmissionGateNGate = n-gate: ローの場合、ローのソースをドレインに通すことができます。
transmissionGatePGate = p-gate: 高い場合、高いソースをドレインに通すことができます。
transmissionGateSource = source: ドレインを制御します
#
# wiring/Tunnel.java
#
tunnelComponent = トンネル
#
# wiring/WiringLibrary.java
#
extenderComponent = ビットエクステンダー
groundComponent = グラウンド
noConnectionComponent = 接続なし
powerComponent = パワー
transistorComponent = トランジスタ
transmissionGateComponent = トランスミッションゲート
wiringLibrary = 配線
# ==> input.output.extra =
