#
# arith/Adder.java
#
adderCarryInTip = 进位：如果为1，则在输出中再加1
adderCarryOutTip = 执行：如果和溢出可用位，则为1
adderComponent = 加法器
adderInputTip = 输入：要添加的数字之一
adderOutputTip = 输出：输入的总和(加上进位)
#
# arith/ArithmeticLibrary.java
#
arithmeticLibrary = 算术
#
# arith/BitAdder.java
#
bitAdderComponent = 位加法器
bitAdderInputTip = 输入：要统计的位数
bitAdderOutputManyTip = 输出：多少个输入位是1
gateInputsAttr = 输入数量
#
# arith/BitFinder.java
#
bitFinderComponent = 位查找器
bitFinderFindLabel = 发现
bitFinderHighLabel = 高
bitFinderHighOption = 最高阶%s
bitFinderIndexHighTip = INDEX：输入的最高位%s的索引
bitFinderIndexLowTip = INDEX：输入的最低顺序%s的索引
bitFinderInputTip = 输入：要查找的位数
bitFinderLowLabel = 低
bitFinderLowOption = 最低顺序%s
bitFinderPresentTip = 如果输入包含%s，则显示：1
bitFinderTypeAttr = 类型
#
# arith/Comparator.java
#
comparatorComponent = 比较器
comparatorEqualTip = 等于：如果A等于B，则为1
comparatorGreaterTip = 大于：如果A大于B，则为1
comparatorInputATip = A：比较操作之前的数字
comparatorInputBTip = B：比较运算后的数字
comparatorLessTip = 小于：如果A小于B，则为1
comparatorType = 数字类型
twosComplementOption = 2的补码
unsignedOption = 未签名
#
# arith/Divider.java
#
dividerComponent = 分隔线
dividerDividendLowerTip = 红利下限：要除以的数字的下半部分
dividerDividendUpperTip = 红利上限：要除的数字的上半部分
dividerDivisorTip = 除数：要除以的数
dividerOutputTip = 输出：被除数除以除数的结果
dividerRemainderOutput = REM
dividerRemainderTip = 余数：余数(被除数-输出*除数)
dividerUpperInput = 上部
#
# arith/FPAdder.java
#
fpAdderComponent = 浮点加法器
fpAdderOutputTip = 输出：输入的总和
fpErrorTip = 如果输入或输出为NaN，则错误：1
#
# arith/FPComparator.java
#
fpComparatorComponent = 浮点比较器
#
# arith/FPDivider.java
#
fpDividerDividendTip = 红利：要除的数字
fpDividerComponent = 浮点除法器
#
# arith/FPMultiplier.java
#
fpMultiplierComponent = 浮点乘法器
fpMultiplierOutputTip = 输出：投入的乘积
#
# arith/FPNegator.java
#
fpNegatorComponent = 浮点求反器
fpNegatorOutputTip = 对输入的否定
#
# arith/FPSubtractor.java
#
fpSubtractorComponent = 浮点减法器
#
# arith/FPToInt.java
#
ceilOption = 四舍五入
floorOption = 向下舍入
fpToIntComponent = 浮点到整数
fpToIntInputTip = 输入：要转换的浮点值
fpToIntOutputTip = OUTPUT：包含四舍五入的浮点值的有符号输出
fpToIntType = 舍入模式
roundOption = 四舍五入到最近
truncateOption = 截断
#
# arith/IntToFP.java
#
intToFPComponent = 整数到浮点
intToFPInputTip = 输入：要转换为浮点的整数
intToFPOutputTip = 输出：输入的浮点形式
#
# arith/Multiplier.java
#
multiplierCarryInTip = 进位：要加到输出中的数量
multiplierCarryOutTip = 执行：产品的上部部分
multiplierComponent = 乘数
multiplierInputTip = 输入：要相乘的数字之一
multiplierOutputTip = 输出：输入的乘积，加上进位输入
#
# arith/Negator.java
#
negatorComponent = 负数
negatorInputTip = 输入：要取反的数字
negatorOutputTip = 输出：输入的两个补语否定
#
# arith/Shifter.java
#
shiftArithmeticRight = 算术右
shifterComponent = 移位器
shifterDistanceTip = 距离：将输入移动多远
shifterInputTip = 输入：要移位的位
shifterOutputTip = 输出：移位输入的结果
shifterShiftAttr = 移位类型
shiftLogicalLeft = 逻辑左
shiftLogicalRight = 逻辑右
shiftRollLeft = 向左旋转
shiftRollRight = 向右旋转
#
# arith/Subtractor.java
#
subtractorBorrowInTip = 借入：如果为1，则产量减少1
subtractorBorrowOutTip = 借出：如果差值为负值，则为1
subtractorComponent = 减法器
subtractorMinuendTip = Minuend：要从中减去的数字
subtractorOutputTip = 输出：被减数和减数的差值
subtractorSubtrahendTip = Subtrahend：要从被减数中减去的数字
#
# base/BaseLibrary.java
#
baseLibrary = 基地
#
# base/Text.java
#
textComponent = 标签
textFontAttr = 字体
textColorAttr = 颜色
textHorzAlignAttr = 水平对齐
textHorzAlignCenterOpt = 居中
textHorzAlignLeftOpt = 左边
textHorzAlignRightOpt = 正确的
textTextAttr = 文本
textVertAlignAttr = 垂直对齐
textVertAlignBaseOpt = 基地
textVertAlignBottomOpt = 底部
textVertAlignCenterOpt = 居中
textVertAlignTopOpt = 顶部
#
# base/VhdlParser.java
#
CannotFindEntityException = 找不到实体声明
emptySourceException = 无法解析空内容
genericDeclarationException = 非法的泛型语法
genericTypeException = 不支持的泛型类型
genericValueException = 无法识别的泛型默认值
invalidTypeException = 无效的端口类型
portDeclarationException = 非法端口语法
portTypeException = 不支持的端口类型：“%s”。请仅使用“STD_LOGIC”和“STD_LOGIC_VECTOR”。
#
# Builtin.java
#
builtinLibrary = 内置
#
# gates/AndGate.java
#
andGateComponent = 与门
#
# gates/Buffer.java
#
bufferComponent = 缓冲器
#
# gates/ControlledBuffer.java
#
controlledBufferComponent = 受控缓冲器
controlledControlOption = 控制线位置
controlledInverterComponent = 受控逆变器
controlledLeftHanded = 左
controlledRightHanded = 右
#
# gates/EvenParityGate.java
#
evenParityComponent = 偶数奇偶校验
#
# gates/GateAttributes.java
#
gateOutput01 = 0/1
gateOutput0Z = 0/浮点
gateOutputAttr = 输出值
gateOutputZ1 = 浮点/1
gateSizeNormalOpt = 中等
xorBehaviorAttr = 多输入行为
xorBehaviorOdd = 当奇数个输入为真时
xorBehaviorOne = 当一个输入为真时
#
# gates/GatesLibrary.java
#
gatesLibrary = 逻辑门
#
# gates/NandGate.java
#
nandGateComponent = 与非门
#
# gates/NegateAttribute.java
#
gateNegateAttr = 非%s
#
# gates/NorGate.java
#
norGateComponent = 或非门
#
# gates/NotGate.java
#
notGateComponent = 非门
#
# gates/OddParityGate.java
#
oddParityComponent = 奇数奇偶校验
#
# gates/OrGate.java
#
orGateComponent = 或门
#
# gates/PLA.java
#
plaBitWidthIn = 位宽in
plaBitWidthOut = 位宽输出
input = 输入
output = 输出
PLA = PLA(可编程逻辑阵列)
plaClickToEdit = (单击可编辑)
plaEditMenuItem = 编辑PLA程序.
plaProgram = 程序
#
# gates/PLATable.java
#
plaEditorTitle = PLA程序编辑器
plaFileCreateError = 无法创建文件。
plaFileOpenError = 无法打开文件。
plaLoadDialogTitle = 加载PLA程序
plaLoadErrorTitle = 加载PLA程序时出错
plaSaveDialogTitle = 保存PLA程序
plaSaveErrorTitle = 保存PLA程序时出错
#
# gates/XnorGate.java
#
xnorGateComponent = 同或门
#
# gates/XorGate.java
#
xorGateComponent = 异或门
#
# InstanceComponent.java
#
KeywordNameError = 标签是保留关键字，不能使用。请指定其他标签。
MatchedLabelNameError = 标签和组件名称不能相同(它们不区分大小写)。请指定与组件名称不同的标签。
#
# InstanceTextField.java
#
changeLabelAction = 更改标签
#
# io/DipSwitch.java
#
DIP = 直插
DipSwitchComponent = DIP开关
nrOfSwitch = 开关数量
#
# io/LedCluster.java
#
#
# io/DotMatrix.java
#
ioInputColumn = 列
ioInputRow = 行
ioInputSelect = 选择行/列
ioMatrixCols = 矩阵列
ioMatrixInput = 输入格式
ioMatrixPersistenceAttr = 轻微的持久性
ioMatrixRows = 矩阵行
ioMatrixShape = 网点形状
ioShapeCircle = 圆形
ioShapeSquare = 正方形
ioShapePaddedSquare = 填充正方形
ioLedBarComponent = LED条
ioLedBarSegments = 细分市场
ioLedBarInput = 输入格式
ioLedBarInputSeparated = 分开的
ioLedBarInputOneWire = 一根导线
#
# io/extra/Buzzer.java
#
buzzerFrequecy = 频率
buzzerVolume = 音量
buzzerVolumeBitWidth = 音量位宽
buzzerUnitDhz = dhz(0.1 Hz)
buzzerWaveform = 波形
buzzerSine = 正弦
buzzerSquare = 正方形
buzzerSmoothLevel = 平滑级别
buzzerSmoothWidth = 平滑窗口宽度
buzzerChannel = 通道
buzzerChannelBoth = 两者都有
buzzerChannelLeft = 左边
buzzerChannelRight = 正确的
buzzerTriangle = 三角形
buzzerSawtooth = 锯齿形
buzzerNoise = 白噪声
buzzerDutyCycle = 占空比
enableSound = 启用声音
Hz = 赫兹
#
# io/extra/DigitalOscilloscope.java
#
BorderColor = 边框颜色
bothOption = 两者都有
ClearDiagram = 清晰图
DigitalOscilloscopeClock = 钟
DrawClockFrontLine = 画时钟前线
noOption = 无
ShowClockAttribute = 显示时钟属性
stdTriggerFalling = 下降沿
stdTriggerRising = 上升沿
#
# io/extra/ExtraIoLibrary.java
#
buzzerComponent = 蜂鸣器
DigitalOscilloscopeComponent = 数字示波器
PlaRomComponent = PLA
Slider = 滑块
switchComponent = 开关部件
#
# io/extra/PlaRom.java
#
memCSTip = 芯片选择：0禁用组件
PlaANDAttr = 与门
PlaOutputsAttr = 输出
ramCSLabel = 选择
#
# io/extra/PlaRomData.java
#
PlaEditWindowTitel = PLA ROM%s编辑窗口
#
# io/extra/ProgrammableGenerator.java
#
NStateAttr = Nr.of States
ProgrammableGeneratorComponent = 程控发生器
ramClearMenuItem = 清除内容
ramEditMenuItem = 编辑内容.
romContentsAttr = 内容
romContentsValue = (单击可编辑)
#
# io/extra/Slider.java
#
left_to_rightOption = 从左到右
right_to_leftOption = 从右到左
#
# io/HexDigit.java
#
hexDigitDataTip = 数据：16进制显示
hexDigitDPTip = DecimalPoint：点亮小数点
#
# io/IoLibrary.java
#
buttonComponent = 按钮
dipswitchComponent = DIP开关
dotMatrixComponent = LED矩阵
hexDigitComponent = 16进制数码显示
ioActiveAttr = 高电位使能
ioBackgroundColor = 背景
ioColorAttr = 颜色
ioLibrary = 输入/输出
ioOffColor = 关闭颜色
ioOnColor = 开启颜色
joystickComponent = 操纵杆
ledComponent = LED灯
pioComponent = 端口I/O
repLBComponent = Reptar本地总线
RGBledComponent = RGB LED
sevenSegmentComponent = 7段数码管
ttyComponent = TTY
#
# io/Button.java
#
buttonPressAttr = 按下逻辑
buttonPressActive = 按下高电位
buttonPressPassive = 松开高电位
#
# io/Joystick.java
#
ioBitWidthAttr = 位宽
joystickCoordinateX = 输出：X坐标
joystickCoordinateY = 输出：Y坐标
#
# io/Keyboard.java
#
keybAvailTip = 当缓冲区包含字符时可用：1
keybBufferLengthAttr = 缓冲区长度
keybClearTip = 清除：1清空缓冲区
keybClockTip = CLOCK：触发器占用缓冲区的前置字符
keybDesc = 键盘(缓冲帽%s)
keybEnableTip = 读取启用：0禁用时钟
keyboardComponent = 键盘
keybOutputTip = DATA：缓冲区前字符的ASCII值
#
# io/PortIO.java
#
pioDirection = 端口类型：
pioInput = 仅限输入
pioInputs = 输入%s
pioIOMultiple = I/O(逐位启用)
pioIOSingle = I/O(单使能)
pioNumber = 引脚数量
pioOutEnable = 输出启用
pioOutEnables = 输出启用%s
pioOutput = 仅输出
pioOutputs = 输出%s
#
# io/ReptarLocalBus.java
#
repLBTip = B尖端
#
# io/RgbLed.java
#
BLUE = 蓝色输入
GREEN = 绿色投入
RED = 红色输入
#
# io/SevenSegment.java
#
DecimalPoint = 小数点
Segment_A = 网段A
Segment_B = 网段B
Segment_C = 网段C
Segment_D = 网段D
Segment_E = 网段E
Segment_F = 段F
Segment_G = 段G
SevenSegDP = 有小数点：
#
# io/Tty.java
#
ttyClearTip = 清除：1清除屏幕
ttyClockTip = 时钟：触发器在输入上添加字符
ttyColsAttr = 列
ttyDesc = TTY(%s行，%s个列)
ttyDescShort = TTY
ttyEnableTip = 写启用：0禁用时钟
ttyInputTip = DATA：要写入的下一个字符的ASCII值
ttyRowsAttr = 行
#
# io/Video.java
#
rgbVideoCLK = 时钟
rgbVideoColor = 颜色模式
rgbVideoComponent = RGB视频
rgbVideoCursor = 光标
rgbVideoData = %s格式的数据
rgbVideoHeight = 高度
rgbVideoReset = 重置行为
rgbVideoRST = 重置
rgbVideoScale = 比例尺
rgbVideoWE = 写入启用
rgbVideoWidth = 宽度
rgbVideoX = X坐标
rgbVideoY = Y坐标
#
# bfh/bcd2sevenseg.java
#
BCDValue = BCD值
BCD2SevenSegment = BCD至七段
#
# bfh/BfhLibrary.java
#
BFHMegaFunctions = BFH mega 函数
Bin2BCD = 二进制到BCD
#
# bfh/bin2bcd.java
#
BinaryDataBits = 二进制数据位
BinaryInputTip = 二进制输入
#
# memory/AbstractFlipFlop.java
#
flipFlopClockTip = 时钟：触发时的状态更新
flipFlopNotQTip = 电流触发器状态的互补性
flipFlopPresetTip = 预设：为1时，异步将状态固定为1
flipFlopQTip = 电流触发器状态
flipFlopResetTip = 清除：为1时，异步将状态固定为0
#
# memory/Counter.java
#
counterCarryTip = 进位：当值达到最大值时为1(如果递减，则为最小值)
counterClockTip = 时钟：值可能在触发时更新
counterComponent = 计数器
counterDataTip = 数据：要加载到计数器中的值
counterEnableLabel = CT
counterEnableTip = ENABLE：当为1时，计数器递增或递减
counterGoalAttr = 对溢出的操作
counterGoalContinue = 继续计数
counterGoalLoad = 加载下一个值
counterGoalStay = 保持值
counterGoalWrap = 绕回
counterLabel = CTR
counterLoadTip = 加载：如果为1，则从数据输入加载
counterMaxAttr = 最大值
counterQTip = 输出：计数器当前值
counterResetTip = 清除：当为1时，异步重置为0
counterUpDownTip = 向上向下：当为1时，计数器递增，当为0时，计数器递减
#
# memory/JKFlipFlop.java
#
jkFlipFlopComponent = J-K触发器
#
# memory/Mem.java
#
memAsyncRead = 异步读取：
memByte = 使用字节启用
memDual = 双行
memEnables = 启用：
memLine = 启用使用线路
memLineSize = 行大小
memMisaligned = 是否允许未对齐？
memOcto = 八行
memQuad = 四行
memRaw = 写后读
memReadBehav = 读取行为
memSingle = 单行
memWar = 读后写
ramAddrWidthAttr = 地址位宽
ramDataWidthAttr = 数据位宽
ramSelAttr = 选择
stdTriggerHigh = 高电平
stdTriggerLow = 低电平
#
# memory/MemMenu.java
#
ramConfirmClearMsg = 您确定要清零内存吗？
ramConfirmClearTitle = 确认清除
ramLoadMenuItem = 加载图像.
ramSaveMenuItem = 保存图像.
#
# memory/MemoryLibrary.java
#
dFlipFlopComponent = D触发器
memoryLibrary = 内存
tFlipFlopComponent = T触发器
#
# memory/Ram.java
#
ramComponent = RAM
#
# memory/RamAppearance.java
#
memAddrTip = 地址：在内存中访问的位置
memDataTip = 数据：从地址加载的值
memDataTip0 = 数据：从地址+0加载的值
memDataTip1 = 数据：从地址+1加载的值
memDataTip2 = 数据：从地址+2加载的值
memDataTip3 = 数据：从地址+3加载的值
ramByteEnableTip0 = 字节0的字节启用
ramByteEnableTip1 = 字节1的字节启用
ramByteEnableTip2 = 字节2的字节启用
ramByteEnableTip3 = 字节3的字节启用
ramClkTip = 时钟：内存值从0上升到1时更新
ramClrPin = 清除：1将所有内存位置设置为0
ramInTip = 输入：要存储在地址的值
ramInTip0 = 输入：要存储在地址+0的值
ramInTip1 = 输入：要存储在地址+1的值
ramInTip2 = 输入：要存储在地址+2的值
ramInTip3 = 输入：要存储在地址+3的值
ramLETip0 = 为地址+0启用线路
ramLETip1 = 为地址+1启用线路
ramLETip2 = 为地址+2启用线路
ramLETip3 = 为地址+3启用线路
ramOETip = Load：如果为1，则将内存加载到输出
ramWETip = 存储：如果为1，则将输入存储到内存
#
# memory/RamAttributes.java
#
ramBidirDataBus = 一条双向数据总线
ramByteEnables = 读写控制
RamClearPin = 使用清除销
ramDataAttr = 数据总线实现
ramNoByteEnables = 全字只读/写
ramSeparateDataBus = 用于读写的独立数据总线
ramTypeAttr = RAM型
ramTypeNonVolatile = 非易失性
ramTypeVolatile = 挥发性的
ramWithByteEnables = 使用字节启用
#
# memory/Random.java
#
randomClockTip = 时钟：值可能在触发时更新
randomComponent = 随机生成器
randomLabel = 随机的
randomNextTip = 启用：时钟触发时按顺序进入下一步
randomQTip = 输出：当前序号
randomResetTip = 清除：为1时，异步重置为初始种子
randomSeedAttr = 种子
randomWidthLabel = 宽度：%d
#
# memory/Register.java
#
registerClkTip = 时钟：触发器上的值更新
registerClrTip = 清除：为1时，将值异步固定为0
registerComponent = 寄存器
registerDTip = DATA：存储在时钟触发器上的值
registerEnableTip = 启用：当为0时，时钟触发器无效
registerLabel = 注册表
registerQTip = 输出：寄存器的当前值
registerShowInTab = 在寄存器选项卡中显示
registerWidthLabel = (%SB)
#
# memory/Rom.java
#
romComponent = ROM
#
# memory/RomContentsListener.java
#
romChangeAction = 编辑ROM内容
#
# memory/ShiftRegister.java
#
shiftRegClearTip = 清除：为1时，异步将全部重置为0
shiftRegClockTip = 时钟：值可能在触发时更新
shiftRegInTip = 输入：要移入第一阶段的值
shiftRegisterComponent = 移位寄存器
shiftRegisterLabel1 = 换挡调节器
shiftRegisterLabel2 = %sx%s
shiftRegLengthAttr = 阶段数
shiftRegLoadTip = 负载：当为1时(带Shift
shiftRegOutTip = 输出：是最后一阶段的内容
shiftRegParallelAttr = 并联负载
shiftRegShiftTip = Shift：当为0时禁用Shift
#
# memory/SRFlipFlop.java
#
srFlipFlopComponent = S-R触发器
#
# plexers/BitSelector.java
#
bitSelectorComponent = 位选择器
bitSelectorDataTip = 数据
bitSelectorGroupAttr = 输出位
bitSelectorOutputTip = 输出：数据中选定位组的值
bitSelectorSelectTip = 选择：标识从数据中选择哪个组
#
# plexers/Decoder.java
#
decoderEnableTip = 启用：不为0时，所选输出为1
decoderOutTip = 输出%s
decoderSelectTip = SELECT：标识哪个输出为1
#
# plexers/Demultiplexer.java
#
demultiplexerEnableTip = 启用：不为0时，选择的输出为输入
demultiplexerInTip = 输入
demultiplexerOutTip = 输出%s
demultiplexerSelectTip = SELECT：标识哪个输出接收输入
#
# plexers/Multiplexer.java
#
multiplexerEnableTip = ENABLE：当不为0时，输出为选定的输入
multiplexerInTip = 输入%s
multiplexerOutTip = 输出
multiplexerSelectTip = SELECT：标识哪个输入将成为输出
#
# plexers/PlexersLibrary.java
#
decoderComponent = 译码器
demultiplexerComponent = 多路分离器
gateSizeAttr = 门尺寸
gateSizeNarrowOpt = 小
gateSizeWideOpt = 宽
multiplexerComponent = 多路复用器
plexerDisabledAttr = 禁用输出
plexerDisabledFloating = 浮动
plexerDisabledZero = 零
plexerEnableAttr = 包含使能吗？
plexerLibrary = 复用器
plexerSelectBitsAttr = 选择位
plexerThreeStateAttr = 三态？
priorityEncoderComponent = 优先级编码器
#
# plexers/PriorityEncoder.java
#
priorityEncoderEnableInTip = 启用输入：0表示禁用组件
priorityEncoderEnableOutTip = 启用输出：如果启用且无输入为1，则为1
priorityEncoderGroupSignalTip = 组选择：1，如果已启用且任何输入均为1
priorityEncoderInTip = 输入%s
priorityEncoderOutTip = 输出：索引最高的1个输入的地址
#
# StdAttr.java
#
ioLabelColorAttr = 标签颜色
stdClassicAppearance = 经典Logisim
stdDataWidthAttr = 数据位
stdEvolutionAppearance = LOGSIM-HOLYCROSS
stdFacingAttr = 方向
stdFPDataWidthAttr = 浮点大小
stdLabelAttr = 标签
stdLabelCenter = 居中
stdLabelFontAttr = 标签字体
stdLabelLocAttr = 标签位置
stdLabelVisibility = 标签可见
stdLogisimEvolutionAppearance = Logisim-evolution
stdTriggerAttr = 触发器
stdSelectLocAttr = 选择位置
stdSelectBottomLeftOption = 下/左
stdSelectTopRightOption = 上/右
#
# tcl/TclLibrary.java
#
tclLibrary = TCL
#
# tcl/TclComponentAttributes.java
#
tclConsoleContentFile = TCL内容文件
#
# tcl/TclConsoleReds.java
#
tclConsoleReds = TCL REDS 控制台
#
# tcl/TclGeneric.java
#
tclGeneric = Tcl通用
tclInterfaceDefinition = Tcl接口VHDL实体
tclInterfaceDefinitionValue = (单击可编辑)
#
# ttl/AbstractTtlGate.java
#
GNDPin = 接地引脚%s
VCCPin = VCC引脚%s
#
# ttl/DisplayDecoder.java
#
BI = BI
BlankingInputInTip = 消隐
DisplayDecoderComponent = 显示解码器
DisplayDecoderInTip = 输入
DisplayDecoderOutTip = 输出
ioMultiBit = 多位
LampTestInTip = 灯测试输入
LT = 它
memEnableLabel = 恩恩
RBI = RBI
RippleBlankingInputInTip = 波纹消隐输入
#
# ttl/TtlLibrary.java
#
ShowInternalStructure = 显示内部结构
TTL7400 = 7400：四路2输入与非门
TTL7402 = 7402：四路2输入或非门
TTL7404 = 7404：六反相器
TTL7408 = 7408：四路2路-输入与门
TTL7410 = 7410：三路3输入与非门
TTL7411 = 7411：三路3输入与门
TTL74125 = 74125：四总线缓冲器，三态输出，负使能
TTL74157 = 74157：四路2线对1线数据选择器
TTL74158 = 74158：四路2线对1线数据选择器，反向输出
# ==> TTL74138 =
TTL74139 = 74139：双2线至4线解码器
TTL7413 = 7413：双4输入与非门(施密特触发器)
TTL7414 = 7414：六反相器(施密特触发器)
TTL74161 = 74161：带异步清除功能的4位同步计数器
TTL74163 = 74163：带同步清除功能的4位同步计数器
# ==> TTL74164 =
# ==> TTL74165 =
TTL74175 = 74175：四路D触发器，异步复位
TTL7418 = 7418：双4输入与非门(施密特触发器)
TTL7419 = 7419：六反相器(施密特触发器)
# ==> TTL74192 =
# ==> TTL74193 =
TTL7420 = 7420：双4输入与非门
TTL7421 = 7421：双4输入与门
TTL7424 = 7424：四路2输入与非门(施密特触发器)
# ==> TTL74245 =
TTL74266 = 74266：四路2输入异或门
TTL7427 = 7427：三路3输入或非门
TTL74273 = 74273：带清零的八进制D触发器
TTL74283 = 74283：4位二进制全加器
TTL7430 = 7430：单8输入与非门
TTL7432 = 7432：四路2输入或门
TTL7434 = 7434：六反相缓冲器
TTL7436 = 7436：四路2输入或非门
TTL74377 = 74377：启用的八进制D触发器
TTL7442 = 7442：BCD至十进制解码器
TTL7443 = 7443：余3码到十进制解码器
TTL7444 = 7444：格雷码到十进制解码器
TTL7447 = 7447：BCD码至7段数码管解码器
TTL7451 = 7451：双与或反相门
TTL7454 = 7454：四个宽AND-OR-INVERT门
TTL7458 = 7458：双与或门
TTL7464 = 7464：4-2-3-2与或反相门
TTL7474 = 7474：具有预置和清除功能的双D触发器
TTL7485 = 7485：4位幅度比较器
TTL7486 = 7486：四路2输入异或门
VccGndPorts = 启用VCC和GND端口
#
# wiring/BitExtender.java
#
extenderInAttr = 位宽输入
extenderInputLabel = 输入
extenderInputType = 输入
extenderMainLabel = 延伸
extenderOneLabel = 1
extenderOneType = 1
extenderOutAttr = 位宽输出
extenderSignLabel = 带符号
extenderSignType = 带符号
extenderTypeAttr = 扩展类型
extenderZeroLabel = %0
extenderZeroType = 0
#
# wiring/Clock.java
#
clockComponent = 时钟
clockHighAttr = 高持续时间
clockLowAttr = 持续时间较短
clockPhaseAttr = 相位偏移
#
# wiring/Constant.java
#
constantComponent = 常量
constantValueAttr = 值
#
# wiring/DurationAttribute.java
#
clockDurationOneValue = 1刻度
clockDurationValue = %s刻度
durationLargeMessage = 值必须为%s或更小。
durationSmallMessage = 值必须至少为%s。
freqInvalidMessage = 值不是有效整数
PORDurationOneValue = 1秒
PORDurationValue = %s秒
#
# wiring/Pin.java
#
PinCancel = 取消
pinComponent = 引脚
PinEnterDecimal = 输入小数
PinEnterFloat = 输入FLOAT
pinFrozenQuestion = 引脚与超级电路的状态捆绑在一起。是否创建新的电路状态？
pinFrozenTitle = 连接到超级电路的引脚。
pinInputName = 输入
pinInputToolTip = 添加输入端号
PinOkay = 好的
pinOutputAttr = 输出？
pinOutputName = 输出
pinOutputToolTip = 添加输出端号
pinPullAttr = 拉动行为
pinPullDownOption = 下拉
pinPullNoneOption = 不变
pinPullUpOption = 向上拉起
pinThreeStateAttr = 三态？
#
# wiring/PowerOnReset.java
#
porHighAttr = Por-Time
PowerOnResetComponent = 端口
#
# wiring/Probe.java
#
probeComponent = 探头
#
# wiring/ProbeAttributes.java
#
probeNewPin = 箭头形状
stdAppearanceAttr = 外观
#
# wiring/PullResistor.java
#
pullComponent = 拉力电阻器
pullErrorType = -1
pullOneType = 1
pullTypeAttr = 拉动方向
pullZeroType = 0
#
# wiring/Transistor.java
#
transistorNDrain = 漏极：低源极将把漏极拉低(仅当栅极为高时)
transistorNGate = 栅极：高电平时，允许电流流过晶体管
transistorNSource = 源极：低源极将把漏极拉低(仅当栅极为高时)
transistorPDrain = 漏极：高源极将漏极拉高(仅当栅极为低时)
transistorPGate = 栅极：低电平时，允许电流流过晶体管
transistorPSource = 源极：高源极将漏极拉高(仅当栅极为低时)
transistorTypeAttr = 类型
transistorTypeN = N型
transistorTypeP = P型
#
# wiring/TransmissionGate.java
#
transmissionGateDrain = 漏极：由源极控制，取决于p栅和n栅
transmissionGateNGate = N栅极：当为低电平时，允许低电平源极通过漏极
transmissionGatePGate = P栅极：高电平时，允许高电平源极通过漏极
transmissionGateSource = 源：根据p栅极和n栅极控制漏极
#
# wiring/Tunnel.java
#
tunnelComponent = 隧道
#
# wiring/WiringLibrary.java
#
extenderComponent = 位扩展器
groundComponent = 地
noConnectionComponent = 请勿连接
powerComponent = 电源
transistorComponent = 晶体管
transmissionGateComponent = 传输门
wiringLibrary = 布线
input.output.extra = 额外输入/输出
