#
# arith/Adder.java
#
adderCarryInTip = Riporto in entrata: se è 1, aggiunge un altro 1 all'uscita
adderCarryOutTip = Riporto in uscita: è 1 se la somma supera i bit disponibili
adderComponent = Sommatore
adderInputTip = Input: uno dei numeri da aggiungere
adderOutputTip = Output: la somma degli input (più il riporto in entrata)
#
# arith/Arithmetic.java
#
arithmeticLibrary = Aritmetica
#
# arith/BitAdder.java
#
bitAdderComponent = Sommatore di bit
bitAdderInputTip = Input: i bit che devono essere contati
bitAdderOutputManyTip = Output: quanti bit di ingresso sono 1
gateInputsAttr = Numero di Input
#
# arith/BitFinder.java
#
bitFinderComponent = Bit Finder
bitFinderFindLabel = trova
bitFinderHighLabel = alto
bitFinderHighOption = %s ordine più alto
bitFinderIndexHighTip = Indice: indice dell'ordine più alto %s
bitFinderIndexLowTip = Index: indice dell'ordine più basso %s
bitFinderInputTip = Input: i bit da cercare
bitFinderLowLabel = basso
bitFinderLowOption = %s di ordine più basso
bitFinderPresentTip = Presente: 1 se l'input contiene un %s
bitFinderTypeAttr = Tipo
#
# arith/Comparator.java
#
comparatorComponent = Comparatore
comparatorEqualTip = Uguale: 1 se A è uguale a B
comparatorGreaterTip = Maggiore: 1 se A è maggiore di B
comparatorInputATip = A: il numero che precede l'operazione di comparazione
comparatorInputBTip = B: il numero che segue l'operazione di comparazione
comparatorLessTip = Minore: 1 se A è minore di B
comparatorType = Tipo numerico
twosComplementOption = Complemento di 2
unsignedOption = Senza segno
#
# arith/Divider.java
#
dividerComponent = Divisore
dividerDividendLowerTip = Dividendo minore: la metà minore del numero da dividere
dividerDividendUpperTip = Dividendo maggiore: la metà maggiore del numero da dividere
dividerDivisorTip = Divisore: il numero che dividerà
dividerOutputTip = Output: il risultato della divisione
dividerRemainderOutput = resto
dividerRemainderTip = Resto: il resto (dividendo - output * divisore)
dividerUpperInput = superiore
#
# arith/Multiplier.java
#
multiplierCarryInTip = Riporto in entrata: un ammontare da aggiungere all'uscita
multiplierCarryOutTip = Riporto in uscita: i bit più significativi del prodotto
multiplierComponent = Moltiplicatore
multiplierInputTip = Input: uno dei numeri da moltiplicare
multiplierOutputTip = Output: il prodotto dei numeri più il riporto
#
# arith/Negator.java
#
negatorComponent = Negatore
negatorInputTip = Input: il numero da negare
negatorOutputTip = Output: la negazione a due complementi dell'input
#
# arith/Shifter.java
#
shiftArithmeticRight = Aritmetica Destra
shifterComponent = Scorritore
shifterDistanceTip = Distanza: Quanto lontano far scorrere l'input
shifterInputTip = Input: bit che devono essere fatti scorrere
shifterOutputTip = Output: risultato dello scorrimento dell'input
shifterShiftAttr = Tipo di scorrimento
shiftLogicalLeft = Logica a Sinistra
shiftLogicalRight = Logica a Destra
shiftRollLeft = Ruota a Sinistra
shiftRollRight = Ruota a Destra
#
# arith/Subtractor.java
#
subtractorBorrowInTip = Prestito in ingresso: se è 1, l'output è diminuito di 1
subtractorBorrowOutTip = Prestito in uscita: è 1 se la differenza produce un valore negativo
subtractorComponent = Sottrattore
subtractorMinuendTip = Minuendo: il numero dal quale avverrà la sottrazione
subtractorOutputTip = Output: la differenza tra minuendo e sottraendo
subtractorSubtrahendTip = Sottraendo: il numero da sottrarre al minuendo
#
# base/Base.java
#
baseLibrary = Strumenti Base
#
# base/Text.java
#
textComponent = Etichetta
textFontAttr = Font
textHorzAlignAttr = Allineamento orizzontale
textHorzAlignCenterOpt = Centro
textHorzAlignLeftOpt = Sinistra
textHorzAlignRightOpt = Destra
textTextAttr = Testo
textVertAlignAttr = Allineamento Verticale
textVertAlignBaseOpt = Base
textVertAlignBottomOpt = Sotto
textVertAlignCenterOpt = Centro
textVertAlignTopOpt = Sopra
#
# base/VhdlParser.java
#
CannotFindEntityException = La dichiarazione dell'entità non può essere trovata
emptySourceException = Impossibile analizzare il contenuto vuoto
genericDeclarationException = Sintassi dei generici illegali
genericTypeException = Tipo generico non supportato
genericValueException = Valore di default dei farmaci generici non riconosciuti
invalidTypeException = Tipo di porta non valida
portDeclarationException = Sintassi del porto illegale
#
# Builtin.java
#
builtinLibrary = Libreria interna
#
# gates/AndGate.java
#
andGateComponent = Porta AND
#
# gates/Buffer.java
#
bufferComponent = Buffer
#
# gates/ControlledBuffer.java
#
controlledBufferComponent = Buffer Controllato
controlledControlOption = Posizione Linea Controllo
controlledInverterComponent = Inverter Controllato
controlledLeftHanded = Verso sinistra
controlledRightHanded = Verso destra
#
# gates/EvenParityGate.java
#
evenParityComponent = Parità Pari
#
# gates/GateAttributes.java
#
gateOutput01 = 0/1
gateOutput0Z = 0/floating
gateOutputAttr = Valore Uscita
gateOutputZ1 = floating/1
gateSizeNormalOpt = Media
xorBehaviorAttr = Funzionamento Ingressi Multipli
xorBehaviorOdd = Con numero dispari di ingressi attivi
xorBehaviorOne = Con un solo ingresso attivo
#
# gates/Gates.java
#
gatesLibrary = Porte
#
# gates/NandGate.java
#
nandGateComponent = Porta NAND
#
# gates/NegateAttribute.java
#
gateNegateAttr = Nega %s
#
# gates/NorGate.java
#
norGateComponent = Porta NOR
#
# gates/NotGate.java
#
notGateComponent = Porta NOT
#
# gates/OddParityGate.java
#
oddParityComponent = Parità Dispari
#
# gates/OrGate.java
#
orGateComponent = Porta OR
#
# gates/PLA.java
#
plaBitWidthIn = Larghezza del bit in
plaBitWidthOut = Larghezza bit fuori
input = immissione
output = uscita
PLA = PLA
plaClickToEdit = (clicca per modificare)
plaEditMenuItem = Modifica programma PLA.....
plaProgram = Programma
#
# gates/PLATable.java
#
plaEditorTitle = Editor del programma PLA
plaFileCreateError = Impossibile creare un file.
plaFileOpenError = Impossibile aprire il file.
plaLoadDialogTitle = Programma Load PLA
plaLoadErrorTitle = Errore nel caricamento del programma PLA
plaSaveDialogTitle = Salva programma PLA
plaSaveErrorTitle = Errore nel salvataggio del programma PLA
#
# gates/XnorGate.java
#
xnorGateComponent = Porta XNOR
#
# gates/XorGate.java
#
xorGateComponent = Porta XOR
#
# InstanceComponent.java
#
KeywordNameError = L'etichetta è una parola chiave riservata e non può essere usata. Si prega di specificare un'etichetta diversa.
MatchedLabelNameError = Etichetta e nome del componente possono non essere gli stessi (non sono sensibili alle maiuscole e minuscole). Si prega di specificare un'etichetta diversa dal nome del componente.
#
# InstanceTextField.java
#
changeLabelAction = Cambia Etichetta
#
# io/DipSwitch.java
#
DIP = DIP
DipSwitchComponent = Dip Switch
nrOfSwitch = Numero di interruttori
#
# io/DotMatrix.java
#
ioInputColumn = Colonne
ioInputRow = Righe
ioInputSelect = Seleziona righe/colonne
ioMatrixCols = Colonne della matrice
ioMatrixInput = Formato Input
ioMatrixPersistenceAttr = Persistenza della luce
ioMatrixRows = Righe della matrice
ioMatrixShape = Forme dei punti
ioShapeCircle = Cerchi
ioShapeSquare = Quadrati
#
# io/extra/Buzzer.java
#
buzzerFrequecy = Frequenza (12b)
buzzerVolume = Volume (0-127)
buzzerVolumeBitWidth = Bit di Dati Volume
buzzerUnitDhz = dHz (0.1Hz)
enableSound = Enable: 1 abilita il suono
Hz = Hz
#
# io/extra/DigitalOscilloscope.java
#
BorderColor = Colore Bordo
bothOption = Entrambi
ClearDiagram = Input Clear: 1 cancella il diagramma
DigitalOscilloscopeClock = Clock: aggiorna il diagramma ad ogni fronte
DrawClockFrontLine = Linee Fronte Clock
noOption = No
ShowClockAttribute = Mostra Diagramma Clock
stdTriggerFalling = Fronte di Discesa
stdTriggerRising = Fronte di Salita
#
# io/extra/ITA_IO.java
#
buzzerComponent = Cicalino
DigitalOscilloscopeComponent = Oscilloscopio Digitale
PlaRomComponent = PLA ROM
Slider = cursore
switchComponent = Interruttore
#
# io/extra/PlaRom.java
#
memCSTip = Chip select: %s disabilita i componeneti
PlaANDAttr = Numero di AND interni
PlaOutputsAttr = Numero di Output
ramCSLabel = sel
#
# io/extra/PlaRomData.java
#
PlaEditWindowTitel = Finestra di modifica %s di Pla Rom
#
# io/extra/ProgrammableGenerator.java
#
NStateAttr = Numero di Stati
ProgrammableGeneratorComponent = Generatore Programmabile
ramClearMenuItem = Cancella Contenuti
ramEditMenuItem = Modifica Contenuti...
romContentsAttr = Contenuti
romContentsValue = (clicca per editare)
#
# io/extra/Slider.java
#
left_to_rightOption = Verso destra
right_to_leftOption = Verso sinistra
#
# io/HexDigit.java
#
hexDigitDataTip = Dati: nibble da visualizzare in esadecimale
hexDigitDPTip = DecimalPoint: illumina la virgola decimale
#
# io/Io.java
#
buttonComponent = Pulsante
dipswitchComponent = Dip switch
dotMatrixComponent = Matrice di LED
hexDigitComponent = Display esadecimale digitale
ioActiveAttr = Attivo su livello alto?
ioBackgroundColor = Sfondo
ioColorAttr = Colore
ioLibrary = Ingresso/uscita
ioOffColor = Colore Off
ioOnColor = Colore On
joystickComponent = Joystick
ledComponent = LED
pioComponent = Porta I/O
repLBComponent = Autobus locale Reptar
RGBledComponent = RGBLED
sevenSegmentComponent = Display a 7 segmenti
ttyComponent = TTY
#
# io/Joystick.java
#
ioBitWidthAttr = Numero Bit
#
# io/Keyboard.java
#
keybAvailTip = disponibile: 1 quando il buffer contiene caratteri
keybBufferLengthAttr = Lunghezza Buffer
keybClearTip = Clear: 1 svuota i buffer
keybClockTip = Clock: all'aggiornamento legge il carattere frontale del buffer
keybDesc = Tastiera (buffer cap. %s)
keybEnableTip = abilita lettura: 0 disabilta il clock
keyboardComponent = Tastiera
keybOutputTip = Dati: il valore %s del carattere frontale del buffer
#
# io/PortIO.java
#
# ==> pioDirection = 
# ==> pioInput = 
# ==> pioInputs = 
# ==> pioIOMultiple = 
# ==> pioIOSingle = 
pioNumber = Numero di PIN
# ==> pioOutEnable = 
# ==> pioOutEnables = 
# ==> pioOutput = 
# ==> pioOutputs = 
#
# io/ReptarLocalBus.java
#
repLBTip = Punta B
#
# io/RGBLed.java
#
BLUE = Ingresso blu
GREEN = Ingresso verde
RED = Ingresso rosso
#
# io/SevenSegment.java
#
DecimalPoint = Punto decimale
Segment_A = Segmento A
Segment_B = Segmento B
Segment_C = Segmento C
Segment_D = Segmento D
Segment_E = Segmento E
Segment_F = Segmento F
Segment_G = Segmento G
# ==> SevenSegDP = 
#
# io/Tty.java
#
ttyClearTip = Clear: 1 Pulisce lo schermo
ttyClockTip = Clock: All' aggiornamento stampa il carattere in input
ttyColsAttr = Colonne
ttyDesc = TTY (%s righe, %s colonne)
ttyDescShort = TTY
ttyEnableTip = Abilita Scrittura: 0 disabilita il clock
ttyInputTip = Dati: valore %s del prossimo carattere da scrivere
ttyRowsAttr = Righe
#
# io/Video.java
#
rgbVideoCLK = Orologio
rgbVideoColor = Modello di colore
rgbVideoComponent = Video RGB
rgbVideoCursor = Cursore
rgbVideoData = Dati in formato %s
rgbVideoHeight = Altezza
rgbVideoReset = Reset Comportamento
rgbVideoRST = Reset
rgbVideoScale = Scala
rgbVideoWE = Abilitazione in scrittura
rgbVideoWidth = Larghezza
rgbVideoX = X Coordinata
rgbVideoY = Coordinata Y
#
# library/bcd2sevenseg.java
#
BCDValue = Valore BCD
BCD2SevenSegment = BCD a sette segmenti
#
# library/BFHPraktika.java
#
BFHMegaFunctions = Mega funzioni BFH
Bin2BCD = Binary a BCD
#
# library/bin2bcd.java
#
BinaryDataBits = Bit di dati binary
BinaryInputTip = Ingresso Binary
#
# memory/AbstractFlipFlop.java
#
flipFlopClockTip = Clock: lo stato si aggiorna all'innesco
flipFlopNotQTip = Complemento dell'attuale stato dei flip-flop
flipFlopPresetTip = Preset: se %s, lo stato dei pin diventa 1 in modo asincrono
flipFlopQTip = Attuale stato del flip-flop
flipFlopResetTip = Clear: se %s, lo stato dei pin diventa 0 in modo asincrono
#
# memory/Counter.java
#
counterCarryTip = Riporto: è 1 quando il valore raggiunge il massimo (minimo se si sta decrementando)
counterClockTip = Clock: il valore potrebbe aggiornarsi al prossimo colpo di clock
counterComponent = Contatore
counterDataTip = Dati: valore da caricare nel contatore
counterEnableLabel = ct
counterEnableTip = Conta: quando è 1, incrementa (o decrementa se Carica = 1)
counterGoalAttr = Azione Overflow
counterGoalContinue = Continua a contare
counterGoalLoad = Carica il prossimo valore
counterGoalStay = Rimane al valore
counterGoalWrap = Ricomincia
counterLabel = ctr
counterLoadTip = Carica: quando è 1, carica dai dati di ingresso (se Conta = 0) o decrementa
counterMaxAttr = Valore Massimo
counterQTip = Uscita: valore corrente del contatore
counterResetTip = Clear: quando è 1, resetta a 0 in modo asincrono
counterUpDownTip = Su/Giù: quando 1, incrementi del contatore, quando 0, decrementi del contatore
#
# memory/JKFlipFlop.java
#
jkFlipFlopComponent = Flip-Flop J-K
#
# memory/Mem.java
#
memAsyncRead = Lettura asincrona:
memByte = Byte di utilizzo abilita
memDual = Doppio
memEnables = Abilita:
memLine = La linea di utilizzo consente
memLineSize = Dimensione della linea
# ==> memMisaligned = 
memOcto = Octo
memQuad = Quad
memRaw = Leggere dopo scrivere
memReadBehav = Leggere il comportamento
memSingle = Singola
memWar = Scrivi dopo aver letto
ramAddrWidthAttr = Numero bit indirizzo
ramDataWidthAttr = Numero bit dati
ramSelAttr = Sel Attivo Su:
stdTriggerHigh = Livello Alto
stdTriggerLow = Livello Basso
#
# memory/MemMenu.java
#
ramConfirmClearMsg = Sei sicuro di voler azzerare la memoria?
ramConfirmClearTitle = Conferma Cancellazione
ramLoadMenuItem = Carica Immagine
ramSaveMenuItem = Salva immagine...
#
# memory/Memory.java
#
dFlipFlopComponent = Flip-Flop D
memoryLibrary = Memoria
tFlipFlopComponent = Flip-Flop T
#
# memory/Ram.java
#
ramComponent = RAM
#
# memory/RamAppearance.java
#
memAddrTip = Indirizzo: luogo acceduto in memoria
memDataTip = Dati: valore caricato da indirizzo
memDataTip0 = Dati: valore caricato dall'indirizzo 0
memDataTip1 = Dati: valore caricato dall'indirizzo 1
memDataTip2 = Dati: valore caricato dall'indirizzo 2
memDataTip3 = Dati: valore caricato dall'indirizzo 3
ramByteEnableTip0 = Abilitazione byte per byte 0
ramByteEnableTip1 = Abilitazione byte per il byte 1
ramByteEnableTip2 = Byte enable per il byte 2
ramByteEnableTip3 = Byte enable per il byte 3
ramClkTip = Clock: Aggiorna i valori in memoria quando in salita da 0 a 1
ramClrPin = Cancella: uno imposta tutte le posizioni di memoria a 0
ramInTip = Input: valore da memorizzare nell'indirizzo
ramInTip0 = Ingresso: valore da memorizzare all'indirizzo 0
ramInTip1 = Ingresso: valore da memorizzare all'indirizzo 1
ramInTip2 = Ingresso: valore da memorizzare all'indirizzo 2
ramInTip3 = Ingresso: valore da memorizzare all'indirizzo 3
ramLETip0 = Abilitazione della linea per l'indirizzo 0
ramLETip1 = Abilitazione della linea per l'indirizzo 1
ramLETip2 = Abilitazione della linea per l'indirizzo 2
ramLETip3 = Abilitazione della linea per l'indirizzo 3
ramOETip = Output Enable: se 1 D = Dout, se 0 D = Din
ramWETip = Magazzino: se 1, immagazzina l'input in memoria
#
# memory/RamAttributes.java
#
ramBidirDataBus = Un bus dati bidirezionale
ramByteEnables = Controllo di lettura e scrittura
RamClearPin = Utilizzare il perno trasparente
ramDataAttr = Implementazione del bus dati
ramNoByteEnables = Parola intera solo lettura/scrittura
ramSeparateDataBus = Bus dati separato per la lettura e la scrittura
ramTypeAttr = Tipo di ariete
ramTypeNonVolatile = non volatile
ramTypeVolatile = Volubile
ramWithByteEnables = Il byte di utilizzo abilita
#
# memory/Random.java
#
randomClockTip = Clock: il valore potrebbe aggiornarsi al prossimo colpo di clock
randomComponent = Generatore Casuale
randomLabel = casuale
randomNextTip = Abilita: passa al successivo al prossimo colpo di clock
randomQTip = Uscita: Numero corrente in sequenza
randomResetTip = Clear: Quando è 1, resetta al numero iniziale in modo asincrono
randomSeedAttr = Seme
randomWidthLabel = Larghezza: %d
#
# memory/Register.java
#
registerClkTip = Clock: aggiorna i valori al colpo di clock
registerClrTip = Clear: quando è 1, porta il valore a 0 in modo asincrono
registerComponent = Registro
registerDTip = Dati: valori immagazzinati al colpo di clock
registerEnableTip = Abilita: quando è 0, i colpi di clock non hanno effetto
registerLabel = reg
registerQTip = Uscita: valore corrente del registro
registerShowInTab = Mostra nella scheda Registri
registerWidthLabel = (%sb)
#
# memory/Rom.java
#
romComponent = ROM
#
# memory/RomContentsListener.java
#
romChangeAction = Edita i contenuti della ROM
#
# memory/ShiftRegister.java
#
shiftRegClearTip = Clear: quando = 1, porta tutto a 0 in modo asincrono
shiftRegClockTip = Clock: il valore si aggiorna al colpo di clock
shiftRegInTip = Input: Valore da scorrere nel primo stadio
shiftRegisterComponent = Registro a scorrimento
shiftRegisterLabel1 = reg a scorr
shiftRegisterLabel2 = %sx%s
shiftRegLengthAttr = Numero di Stadi
shiftRegLoadTip = Caricamento: quando 1 (con scorrimento = 0), tutti gli stadi caricati da input
shiftRegOutTip = Output: è il contenuto dell' ultimo stadio
shiftRegParallelAttr = Caricamento Parallelo
shiftRegShiftTip = Scorrimento: lo scorrimento è disabilitato quando = 0
#
# memory/SRFlipFlop.java
#
srFlipFlopComponent = Flip-Flop S-R
#
# plexers/BitSelector.java
#
bitSelectorComponent = Selettore di Bit
bitSelectorDataTip = Dati
bitSelectorGroupAttr = Bit di Output
bitSelectorOutputTip = Output: valore del gruppo selezionato di bit dai dati
bitSelectorSelectTip = Selezione: identifica quale gruppo di bit è selezionato
#
# plexers/Decoder.java
#
decoderEnableTip = Abilita: quando è diverso da 0, l'output selezionato è 1
decoderOutTip = Output %s
decoderSelectTip = Selezione: identifica quale output è 1
#
# plexers/Demultiplexer.java
#
demultiplexerEnableTip = Abilita: quando è diverso da 0, l'output selezionato è uguale all'input
demultiplexerInTip = Input
demultiplexerOutTip = Output %s
demultiplexerSelectTip = Selezione: identifica quali output ricevono input
#
# plexers/Multiplexer.java
#
multiplexerEnableTip = Abilita: quando è diverso da 0, l'output è uguale all'input selezionato
multiplexerInTip = Input %s
multiplexerOutTip = Output
multiplexerSelectTip = Selezione: identifica quali input diventano output
#
# plexers/Plexers.java
#
decoderComponent = Decoder
demultiplexerComponent = Demultiplexer
gateSizeAttr = Dimensione Porta
gateSizeNarrowOpt = Piccola
gateSizeWideOpt = Grande
multiplexerComponent = Multiplexer
plexerDisabledAttr = Output disabilitato
plexerDisabledFloating = Floating
plexerDisabledZero = Zero
plexerEnableAttr = Includere Abilitazione?
plexerLibrary = Plexers
plexerSelectBitsAttr = Bits di Selezione
plexerSelectBottomLeftOption = Sotto/Sinistra
plexerSelectLocAttr = Locazione Select
plexerSelectTopRightOption = Sopra/Destra
plexerThreeStateAttr = Three-state?
priorityEncoderComponent = Encoder a Priorità
#
# plexers/PriorityEncoder.java
#
priorityEncoderEnableInTip = Input Abilita: 0 disabilita il componente
priorityEncoderEnableOutTip = Output Abilita: 1 se è abilitato e non ci sono ingressi attivi
priorityEncoderGroupSignalTip = Seleziona Gruppo: 1 se è abilitato e ogni ingresso è 1
priorityEncoderInTip = Input %s
priorityEncoderOutTip = Output: indizizzo dell'ingresso attivo con indice maggiore
#
# StdAttr.java
#
ioLabelColorAttr = Colore Etichetta
stdClassicAppearance = Logisim classico
stdDataWidthAttr = Bit di Dati
stdEvolutionAppearance = Logisim-SantaCroce
stdFacingAttr = Orientamento
stdLabelAttr = Etichetta
stdLabelCenter = Centro
stdLabelFontAttr = Font Etichetta
stdLabelLocAttr = Posizione dell'etichetta
stdLabelVisibility = Etichetta Visibile
stdLogisimEvolutionAppearance = Logisim-Evoluzione
stdTriggerAttr = Innesco
#
# tcl/Tcl.java
#
tclLibrary = TCL
#
# tcl/TclComponentAttributes.java
#
tclConsoleContentFile = File di contenuto TCL
#
# tcl/TclConsoleReds.java
#
tclConsoleReds = Console TCL REDS
#
# tcl/TclGeneric.java
#
tclGeneric = TCL generico
tclInterfaceDefinition = TCL interfaccia VHDL entità VHDL
tclInterfaceDefinitionValue = (clicca per modificare)
#
# ttl/AbstractTtlGate.java
#
GNDPin = Perno a terra %s
VCCPin = Perno VCC %s
#
# ttl/DisplayDecoder.java
#
BI = BI
BlankingInputInTip = Blanking Input: quando è 0, imposta il valore di tutti gli output a 0
DisplayDecoderComponent = Decoder Display 7-Segmenti
DisplayDecoderInTip = Input %s
DisplayDecoderOutTip = Output %s
ioMultiBit = Multibit?
LampTestInTip = Lamp Test: quando è 0, imposta il valore di tutti gli output a 1
LT = LT
memEnableLabel = en
RBI = RBI
RippleBlankingInputInTip = Ripple Blanking Input: quando è 0 e A, B, C, D sono 0, imposta il valore di tutti gli output a 0
#
# ttl/TTL.java
#
ShowInternalStructure = Mostra Struttura Interna
TTL7400 = 7400: quad 2 ingressi NAND gate a 2 ingressi
TTL7402 = 7402: quad 2 ingressi NOR gate a 2 ingressi
TTL7404 = 7404: inverter esagonale
TTL7408 = 7408: quad a 2 ingressi e cancello
TTL7410 = 7410: triplo cancello NAND a 3 ingressi
TTL7411 = 7411: triplo ingresso 3 ingressi E cancello
TTL74125 = 74125: buffer quad bus, uscite a tre stati, abilitazione negativa
TTL7413 = 7413: doppio cancello NAND a 4 ingressi (schmitt-trigger)
TTL7414 = 7414: inverter esagonale (schmitt-trigger)
TTL74165 = 74165: registro di spostamento da parallelo a seriale a 8 bit
TTL74175 = 74175: quadruplo D-flipflop, reset asincrono
TTL7418 = 7418: doppio cancello NAND a 4 ingressi (schmitt-trigger)
TTL7419 = 7419: inverter esagonale (schmitt-trigger)
TTL7420 = 7420: doppio cancello NAND a 4 ingressi
TTL7421 = 7421: doppio ingresso 4 ingressi E cancello
TTL7424 = 7424: quad 2 ingressi NAND gate (schmitt-trigger)
TTL74266 = 74266: quad 2 ingressi XNOR gate a 2 ingressi
TTL7427 = 7427: triplo cancello NOR a 3 ingressi
TTL74273 = 74273: Ottale D-Flipflop con trasparente
TTL74283 = 74283: sommatore completo binario a 4 bit
TTL7430 = 7430: singolo cancello NAND a 8 ingressi
TTL7432 = 7432: quad 2 ingressi OR gate
TTL7436 = 7436: quad 2 ingressi NOR gate NOR
TTL74377 = 74377: D-Flipflop ottale con enable
TTL7442 = 7442: da BCD a decodificatore decimale
TTL7443 = 7443: da decodificatore in eccesso-3 a decodificatore decimale
TTL7444 = 7444: Decoder da Gray a decimale
TTL7447 = 7447: Decoder da BCD a 7 segmenti
TTL7451 = 7451: doppio cancello AND-OR-INVERT
TTL7454 = 7454: Quattro ampi cancello AND-OR-INVERT
TTL7458 = 7458: doppio cancello AND-OR
TTL7464 = 7464: 4-2-2-3-3-2-2 E-OR-INVERT gate
TTL7474 = 7474: doppio D-Flipflop con preset e chiaro
TTL7485 = 7485: comparatore di grandezza a 4 bit
TTL7486 = 7486: quad 2 ingressi XOR gate a 2 ingressi
VccGndPorts = Includi pin Vcc/Gnd
#
# wiring/BitExtender.java
#
extenderInAttr = Bit in Entrata
extenderInputLabel = input
extenderInputType = Input
extenderMainLabel = Estendi
extenderOneLabel = 1
extenderOneType = Uno
extenderOutAttr = Bit in Uscita
extenderSignLabel = segno
extenderSignType = Segno
extenderTypeAttr = Tipo di estensione
extenderZeroLabel = 0
extenderZeroType = Zero
#
# wiring/Clock.java
#
clockComponent = Clock
clockHighAttr = Durata Livello Alto
clockLowAttr = Durata Livello Basso
#
# wiring/Constant.java
#
constantComponent = Costante
constantValueAttr = Valore
#
# wiring/DurationAttribute.java
#
clockDurationOneValue = %s Fronte di Clock
clockDurationValue = %s Fronti di Clock
durationLargeMessage = Il valore deve essere %s o meno.
durationSmallMessage = Il valore deve essere almeno %s.
freqInvalidMessage = Il valore non è un intero valido
PORDurationOneValue = 1 secondo
PORDurationValue = %s Secs
#
# wiring/Pin.java
#
PinCancel = Annulla
pinComponent = Pin
PinEnterDecimal = Inserisci decimale
pinFrozenQuestion = Pin collegato allo stato del circuito superiore. Creare un nuovo stato del circuito?
pinFrozenTitle = Pin Collegato Al Circuito Superiore.
pinInputName = Input
pinInputToolTip = Aggiungi un pin di entrata
PinOkay = OK
pinOutputAttr = Output?
pinOutputName = Output
pinOutputToolTip = Aggiungi un pin di uscita
pinPullAttr = Funzionamento alla Pressione
pinPullDownOption = Spinta Giù
pinPullNoneOption = Senza Cambiamenti
pinPullUpOption = Spinta Su
pinThreeStateAttr = Three-state?
#
# wiring/PowerOnReset.java
#
porHighAttr = POR-tempo
PowerOnResetComponent = POR
#
# wiring/Probe.java
#
probeComponent = Sonda
#
# wiring/ProbeAttributes.java
#
probeNewPin = Forme di freccia
stdAppearanceAttr = Aspetto
#
# wiring/PullResistor.java
#
pullComponent = Resistore
pullErrorType = Errore
pullOneType = Uno
pullTypeAttr = Direzione Resistenza
pullZeroType = Zero
#
# wiring/Transistor.java
#
transistorNDrain = drenaggio: una sorgente bassa tira il drenaggio basso (solo quando il cancello è alto)
transistorNGate = gate: quando è alto, permette alla corrente di fluire attraverso il transistor
transistorNSource = sorgente: una sorgente bassa tira il drenaggio verso il basso (solo quando il cancello è alto)
transistorPDrain = drenaggio: una sorgente alta tira il drenaggio in alto (solo quando il cancello è basso)
transistorPGate = gate: quando è basso, permette alla corrente di fluire attraverso il transistor
transistorPSource = sorgente: una sorgente alta tira il drenaggio in alto (solo quando il cancello è basso)
transistorTypeAttr = Tipo
transistorTypeN = N-Tipo
transistorTypeP = P-Tipo
#
# wiring/TransmissionGate.java
#
transmissionGateDrain = drenaggio: controllato dalla sorgente, a seconda del portone p e del portone n-gate
transmissionGateNGate = n-gate: quando è basso, permette alla sorgente bassa di passare attraverso per drenare.
transmissionGatePGate = p-gate: quando è alto, permette alla sorgente alta di passare attraverso per drenare.
transmissionGateSource = sorgente: controlla il drenaggio, a seconda della porta P e della porta N
#
# wiring/Tunnel.java
#
tunnelComponent = Tunnel
#
# wiring/Wiring.java
#
extenderComponent = Estensore di Bit
groundComponent = Terra
noConnectionComponent = Non collegare
powerComponent = Alimentazione
transistorComponent = Transistor
transmissionGateComponent = Porta di Trasmissione
wiringGateAttr = Posizione Porta
wiringGateBottomRightOption = Sotto/Destra
wiringGateTopLeftOption = Sopra/Sinistra
wiringLibrary = Connessioni


