#
# arith/Adder.java
#
adderCarryInTip = Вход переноса: если 1, то дополнительная 1 добавляется к выходному значению
adderCarryOutTip = Выход переноса: 1, если сумма переполняет доступные биты
adderComponent = Сумматор
adderInputTip = Вход: одно из чисел для сложения
adderOutputTip = Выход: сумма значений на входах (плюс значение переноса)
#
# arith/ArithmeticLibrary.java
#
arithmeticLibrary = Арифметика
#
# arith/BitAdder.java
#
bitAdderComponent = Сумматор битов
bitAdderInputTip = Вход: биты для подсчета
bitAdderOutputManyTip = Выход: количество единиц среди входных битов
gateInputsAttr = Количество входов
#
# arith/BitFinder.java
#
bitFinderComponent = Искатель битов
bitFinderFindLabel = find
bitFinderHighLabel = high
bitFinderHighOption = Старший %s
bitFinderIndexHighTip = Номер: номер старшего бита %s во входном значении
bitFinderIndexLowTip = Номер: номер младшего бита %s во входном значении
bitFinderInputTip = Вход: биты для поиска
bitFinderLowLabel = low
bitFinderLowOption = Младший %s
bitFinderPresentTip = Присутствие: 1, если входное значение содержит %s
bitFinderTypeAttr = Тип
#
# arith/Comparator.java
#
comparatorComponent = Компаратор
comparatorEqualTip = Равно: 1, если A равно B
comparatorGreaterTip = Больше: 1, если A больше, чем B
comparatorInputATip = A: первое число для операции сравнения
comparatorInputBTip = B: второе число для операции сравнения
comparatorLessTip = Меньше: 1, если A меньше, чем B
comparatorType = Формат числа
twosComplementOption = Дополнительный код
unsignedOption = Беззнаковое
#
# arith/Divider.java
#
dividerComponent = Делитель
dividerDividendLowerTip = Низ делимого: младшая половина числа для деления
dividerDividendUpperTip = Верх делимого: старшая половина числа для деления
dividerDivisorTip = Делитель: число, на которое делить
dividerOutputTip = Выход: результат деления делимого на делитель
dividerRemainderOutput = rem
dividerRemainderTip = Остаток: остаток (делимое - частное*делитель)
dividerUpperInput = upper
#
# arith/FPAdder.java
#
# ==> fpAdderComponent =
# ==> fpAdderOutputTip =
# ==> fpErrorTip =
#
# arith/FPComparator.java
#
# ==> fpComparatorComponent =
#
# arith/FPDivider.java
#
# ==> fpDividerDividendTip =
# ==> fpDividerComponent =
#
# arith/FPMultiplier.java
#
# ==> fpMultiplierComponent =
# ==> fpMultiplierOutputTip =
#
# arith/FPNegator.java
#
# ==> fpNegatorComponent =
# ==> fpNegatorOutputTip =
#
# arith/FPSubtractor.java
#
# ==> fpSubtractorComponent =
#
# arith/FPToInt.java
#
# ==> ceilOption =
# ==> floorOption =
# ==> fpToIntComponent =
# ==> fpToIntInputTip =
# ==> fpToIntOutputTip =
# ==> fpToIntType =
# ==> roundOption =
# ==> truncateOption =
#
# arith/IntToFP.java
#
# ==> intToFPComponent =
# ==> intToFPInputTip =
# ==> intToFPOutputTip =
#
# arith/Multiplier.java
#
multiplierCarryInTip = Вход переноса: величина, прибавляемая к выходному значению
multiplierCarryOutTip = Выход переноса: старшие биты произведения
multiplierComponent = Множитель
multiplierInputTip = Вход: одно из чисел для умножения
multiplierOutputTip = Выход: произведение входов плюс вход переноса
#
# arith/Negator.java
#
negatorComponent = Отрицатель
negatorInputTip = Вход: число для инвертирования
negatorOutputTip = Выход: инвертированное входное значение в дополнительном коде
#
# arith/Shifter.java
#
shiftArithmeticRight = Арифметический правый
shifterComponent = Сдвигатель
shifterDistanceTip = Дистанция: на сколько сдвигать входное значение
shifterInputTip = Вход: биты для сдвига
shifterOutputTip = Выход: результат сдвига входного значения
shifterShiftAttr = Тип сдвига
shiftLogicalLeft = Логический левый
shiftLogicalRight = Логический правый
shiftRollLeft = Циклический левый
shiftRollRight = Логический правый
#
# arith/Subtractor.java
#
subtractorBorrowInTip = Вход займа: если 1, то из выходного значения вычитается 1
subtractorBorrowOutTip = Выход займа: 1, если разность даёт отрицательное значение
subtractorComponent = Вычитатель
subtractorMinuendTip = Уменьшаемое: число, из которого вычитать
subtractorOutputTip = Выход: разность между уменьшаемым и вычитаемым
subtractorSubtrahendTip = Вычитаемое: число, которое отнимается от уменьшаемого
#
# base/BaseLibrary.java
#
baseLibrary = Базовые
#
# base/Text.java
#
textComponent = Метка
textFontAttr = Шрифт
textColorAttr = Цвет
textHorzAlignAttr = Горизонтальное выравнивание
textHorzAlignCenterOpt = Центр
textHorzAlignLeftOpt = Слева
textHorzAlignRightOpt = Справа
textTextAttr = Текст
textVertAlignAttr = Вертикальное выравнивание
textVertAlignBaseOpt = По базовой
textVertAlignBottomOpt = По низу
textVertAlignCenterOpt = По центру
textVertAlignTopOpt = По верху
#
# base/VhdlParser.java
#
CannotFindEntityException = Декларация организации не может быть найдена
emptySourceException = Невозможно разобрать пустое содержимое
genericDeclarationException = Незаконный синтаксис непатентованных препаратов
genericTypeException = Не поддерживаемый тип генерических препаратов
genericValueException = Непризнанное значение по умолчанию для непатентованных генерических препаратов
invalidTypeException = Недействительный тип порта
portDeclarationException = Незаконный синтаксис порта
# ==> portTypeException =
#
# Builtin.java
#
builtinLibrary = Встроенный
#
# gates/AndGate.java
#
andGateComponent = Элемент И
#
# gates/Buffer.java
#
bufferComponent = Буфер
#
# gates/ControlledBuffer.java
#
controlledBufferComponent = Управляемый буфер
controlledControlOption = Расположение управляющего входа
controlledInverterComponent = Управляемый инвертор
controlledLeftHanded = По левую руку
controlledRightHanded = По правую руку
#
# gates/EvenParityGate.java
#
evenParityComponent = Чётность
#
# gates/GateAttributes.java
#
gateOutput01 = 0/1
gateOutput0Z = 0/плавающее
gateOutputAttr = Выходное значение
gateOutputZ1 = плавающее/1
gateSizeNormalOpt = Средний
xorBehaviorAttr = Многовходовое поведение
xorBehaviorOdd = Когда на нечётном количестве 1
xorBehaviorOne = Когда на одном входе 1
#
# gates/GatesLibrary.java
#
gatesLibrary = Элементы
#
# gates/NandGate.java
#
nandGateComponent = Элемент И-НЕ
#
# gates/NegateAttribute.java
#
gateNegateAttr = Инвертировать %s
#
# gates/NorGate.java
#
norGateComponent = Элемент ИЛИ-НЕ
#
# gates/NotGate.java
#
notGateComponent = Элемент НЕ
#
# gates/OddParityGate.java
#
oddParityComponent = Нечётность
#
# gates/OrGate.java
#
orGateComponent = Элемент ИЛИ
#
# gates/PLA.java
#
plaBitWidthIn = Ширина бита
plaBitWidthOut = Ширина бита
input = Вход
output = Выход
PLA = Программируемый логический массив (PLA)
plaClickToEdit = (нажмите для редактирования)
plaEditMenuItem = Редактировать программу....
plaProgram = Программа
#
# gates/PLATable.java
#
plaEditorTitle = Редактор программ PLA
plaFileCreateError = Ошибка при создании файла.
plaFileOpenError = Ошибка при открытии файла.
plaLoadDialogTitle = Загрузить программу
plaLoadErrorTitle = Ошибка загрузки программы
plaSaveDialogTitle = Сохранить программу
plaSaveErrorTitle = Ошибка при сохранении программы
#
# gates/XnorGate.java
#
xnorGateComponent = Элемент Исключающее ИЛИ-НЕ
#
# gates/XorGate.java
#
xorGateComponent = Элемент Исключающее ИЛИ
#
# InstanceComponent.java
#
KeywordNameError = Этикетка является зарезервированным ключевым словом и не может быть использована. Пожалуйста, укажите другой ярлык.
MatchedLabelNameError = Название и название компонента могут отличаться (они не зависят от регистра). Пожалуйста, укажите метку, отличную от названия компонента.
#
# InstanceTextField.java
#
changeLabelAction = Изменить метку
#
# io/DipSwitch.java
#
DIP = ДИП
DipSwitchComponent = Двухпозиционный переключатель
nrOfSwitch = Количество переключателей
#
# io/LedCluster.java
#
#
# io/DotMatrix.java
#
ioInputColumn = Столбцы
ioInputRow = Строки
ioInputSelect = Выбор Строки/Столбцы
ioMatrixCols = Столбцы матрицы
ioMatrixInput = Формат входа
ioMatrixPersistenceAttr = Продолжительность свечения
ioMatrixRows = Строки матрицы
ioMatrixShape = Форма точки
ioShapeCircle = Круглая
ioShapeSquare = Квадратная
# ==> ioShapePaddedSquare =
# ==> ioLedBarComponent =
# ==> ioLedBarSegments =
# ==> ioLedBarInput =
# ==> ioLedBarInputSeparated =
# ==> ioLedBarInputOneWire =
#
# io/extra/Buzzer.java
#
buzzerFrequecy = Частота
buzzerVolume = Громкость
buzzerVolumeBitWidth = Количество бит
buzzerUnitDhz = дГц (0.1Гц)
# ==> buzzerWaveform =
# ==> buzzerSine =
# ==> buzzerSquare =
# ==> buzzerSmoothLevel =
# ==> buzzerSmoothWidth =
# ==> buzzerChannel =
# ==> buzzerChannelBoth =
# ==> buzzerChannelLeft =
# ==> buzzerChannelRight =
# ==> buzzerTriangle =
# ==> buzzerSawtooth =
# ==> buzzerNoise =
# ==> buzzerDutyCycle =
enableSound = Включить звук
Hz = Гц
#
# io/extra/DigitalOscilloscope.java
#
BorderColor = Цвет рамки
bothOption = Оба
ClearDiagram = Четкая диаграмма
DigitalOscilloscopeClock = генератор тактовых импульсов
DrawClockFrontLine = линия фронтальных часов
noOption = Нет
ShowClockAttribute = Показать атрибут часов
stdTriggerFalling = Задний фронт
stdTriggerRising = Передний фронт
#
# io/extra/ExtraIoLibrary.java
#
buzzerComponent = Пищалка
DigitalOscilloscopeComponent = Цифровой осциллятор.
PlaRomComponent = PLA ROM
Slider = Ползунок
switchComponent = Переключатель
#
# io/extra/PlaRom.java
#
memCSTip = Выбор кристалла: 0 выключает компонент
PlaANDAttr = Количество элементов И
PlaOutputsAttr = Выход
ramCSLabel = sel
#
# io/extra/PlaRomData.java
#
PlaEditWindowTitel = Окно редактирования Pla Rom %s
#
# io/extra/ProgrammableGenerator.java
#
NStateAttr = Число состояний
ProgrammableGeneratorComponent = Проектный генератор
ramClearMenuItem = Очистить содержимое
ramEditMenuItem = Редактировать содержимое...
romContentsAttr = Содержимое
romContentsValue = (нажмите чтобы редактировать)
#
# io/extra/Slider.java
#
left_to_rightOption = Слева направо
right_to_leftOption = Справа налево
#
# io/HexDigit.java
#
hexDigitDataTip = Вход данных для отображения в шестнадцатеричном формате
hexDigitDPTip = Десятичная точка
#
# io/IoLibrary.java
#
buttonComponent = Кнопка
dipswitchComponent = Двухпозиционный переключатель
dotMatrixComponent = Светодиодная матрица
hexDigitComponent = Шестнадцатеричный индикатор
ioActiveAttr = Активен при единице?
ioBackgroundColor = Фон
ioColorAttr = Цвет
ioLibrary = Ввод/вывод
ioOffColor = Цвет выключенных
ioOnColor = Цвет включенных
joystickComponent = Джойстик
ledComponent = Светодиод
pioComponent = Порт ввода/вывода
repLBComponent = Reptar Local Bus
RGBledComponent = Трёхцветный светодиод
sevenSegmentComponent = 7-сегментный индикатор
ttyComponent = Терминал
#
# io/Button.java
#
# ==> buttonPressAttr =
# ==> buttonPressActive =
# ==> buttonPressPassive =
#
# io/Joystick.java
#
ioBitWidthAttr = Разрядность
# ==> joystickCoordinateX =
# ==> joystickCoordinateY =
#
# io/Keyboard.java
#
keybAvailTip = Наличие: 1, когда буфер содержит символы
keybBufferLengthAttr = Длина буфера
keybClearTip = Очистка: 1 очищает буфер
keybClockTip = Тактовый вход: срабатывание считывает первый символ буфера
keybDesc = клавиатура (буфер %s)
keybEnableTip = Разрешение записи: 0 отключает тактовый вход
keyboardComponent = Клавиатура
keybOutputTip = Данные: ASCII значение первого символа буфера
#
# io/PortIO.java
#
pioDirection = Направление порта
pioInput = Вход
pioInputs = Входы
pioIOMultiple = Оба направления
pioIOSingle = Оба направления (один контакт управления выходами)
pioNumber = Количество контактов
pioOutEnable = Выход включён
pioOutEnables = Управление выходами
pioOutput = Выход
pioOutputs = Выходы
#
# io/ReptarLocalBus.java
#
# ==> repLBTip =
#
# io/RgbLed.java
#
BLUE = Синий вход
GREEN = Зеленый вход
RED = Красный вход
#
# io/SevenSegment.java
#
DecimalPoint = Десятичная запятая
Segment_A = Сегмент А
Segment_B = Сегмент B
Segment_C = Сегмент С
Segment_D = Сегмент D
Segment_E = Сегмент Е
Segment_F = Сегмент F
Segment_G = Сегмент G
# ==> SevenSegDP =
#
# io/Tty.java
#
ttyClearTip = Очистка: 1 очищает экран
ttyClockTip = Тактовый вход: срабатывание добавляет символ на вход
ttyColsAttr = Столбцы
ttyDesc = Терминал (%s строк, %s столбцов)
ttyDescShort = Терминал
ttyEnableTip = Разрешение записи: 0 отключает тактовый вход
ttyInputTip = Данные: ASCII значение следующего символа для записи
ttyRowsAttr = Строки
#
# io/Video.java
#
rgbVideoCLK = Часы
rgbVideoColor = Цветовая модель
rgbVideoComponent = RGB видео
rgbVideoCursor = Курсор
rgbVideoData = Данные в формате %s
rgbVideoHeight = Высота
rgbVideoReset = Сброс поведения
rgbVideoRST = Сброс
rgbVideoScale = Масштаб
rgbVideoWE = Включить запись
rgbVideoWidth = Ширина
rgbVideoX = X Координата
rgbVideoY = Y Координата
#
# bfh/bcd2sevenseg.java
#
BCDValue = Вход BCD
BCD2SevenSegment = BCD в 7-сегмент
#
# bfh/BfhLibrary.java
#
BFHMegaFunctions = BFH мега-функции
Bin2BCD = Двоичные данные в десятичные
#
# bfh/bin2bcd.java
#
BinaryDataBits = Биты двоичных данных
BinaryInputTip = Двоичный вход
#
# memory/AbstractFlipFlop.java
#
flipFlopClockTip = Тактовый вход: состояние обновляется при срабатывании
flipFlopNotQTip = Дополнение текущего состояния триггера
flipFlopPresetTip = Установка: когда 1, состояние асинхронно фиксируется на 1
flipFlopQTip = Текущее состояние триггера
flipFlopResetTip = Очистка: когда 1, состояние асинхронно фиксируется на 0
#
# memory/Counter.java
#
counterCarryTip = Перенос: 1, когда значение достигает максимума (минимума при уменьшении)
counterClockTip = Тактовый вход: значение может обновиться при срабатывании
counterComponent = Счётчик
counterDataTip = Данные: значение для загрузки в счётчик
counterEnableLabel = ct
counterEnableTip = Счёт: когда 1, счётчик увеличивается (или уменьшается, если Загрузка = 1)
counterGoalAttr = Действие при переполнении
counterGoalContinue = Продолжать счёт
counterGoalLoad = Загрузить следующее значение
counterGoalStay = Оставаться на значении
counterGoalWrap = Закольцовывать
counterLabel = ctr
counterLoadTip = Загрузка: когда 1, загружает с входа данных (если Счёт = 0) или уменьшает
counterMaxAttr = Максимальное значение
counterQTip = Выход: текущее значение счётчика
counterResetTip = Очистка: когда 1, асинхронно сбрасывает в 0
counterUpDownTip = Вверх вниз: когда 1, увеличение счетчика, когда 0, уменьшение счетчика
#
# memory/JKFlipFlop.java
#
jkFlipFlopComponent = J-K триггер
#
# memory/Mem.java
#
memAsyncRead = Асинхронное чтение:
memByte = Одноканальная
memDual = Два
memEnables = Каналы памяти:
memLine = Многоканальная
memLineSize = Количество каналов
# ==> memMisaligned =
memOcto = Четыре
memQuad = Восемь
memRaw = Читать после записи
memReadBehav = Поведение при чтении
memSingle = Один
memWar = Пишите после прочтения
ramAddrWidthAttr = Разрядность адреса
ramDataWidthAttr = Разрядность данных
ramSelAttr = Выберите
stdTriggerHigh = Высокий уровень
stdTriggerLow = Низкий уровень
#
# memory/MemMenu.java
#
ramConfirmClearMsg = Вы уверены, что хотите обнулить память?
ramConfirmClearTitle = Подтверждение очистки
ramLoadMenuItem = Загрузить образ...
ramSaveMenuItem = Сохранить образ...
#
# memory/MemoryLibrary.java
#
dFlipFlopComponent = D триггер
memoryLibrary = Память
tFlipFlopComponent = T триггер
#
# memory/Ram.java
#
ramComponent = ОЗУ
#
# memory/RamAppearance.java
#
memAddrTip = Адресу: место в памяти, к которому производится доступ
memDataTip = Данные: значение, считываемое по адресу
memDataTip0 = Данные: значение, загруженное с адреса 0
memDataTip1 = Данные: значение, загруженное с адреса 1
memDataTip2 = Данные: значение, загруженное с адреса 2
memDataTip3 = Данные: значение, загруженное с адреса 3
ramByteEnableTip0 = Включение байта для байта 0
ramByteEnableTip1 = Включение байта для байта 1
ramByteEnableTip2 = Байт включения для байта 2
ramByteEnableTip3 = Байт включения для байта 3
ramClkTip = Тактовый вход: значение в памяти обновляется при изменении с 0 на 1
ramClrPin = Очистить: один устанавливает все ячейки памяти на 0.
ramInTip = Вход: значение, которое будет храниться по адресу
ramInTip0 = Вход: значение для хранения по адресу 0
ramInTip1 = Вход: значение для хранения по адресу 1
ramInTip2 = Вход: значение для хранения по адресу 2
ramInTip3 = Вход: значение для хранения по адресу 3
ramLETip0 = Включение линии для адреса 0
ramLETip1 = Включение линии для адреса 1
ramLETip2 = Включение линии для адреса 2
ramLETip3 = Включение линии для адреса 3
ramOETip = Чтение: если 1, память считывается на выход
ramWETip = Запись: если 1, значение со входа записывается в память
#
# memory/RamAttributes.java
#
ramBidirDataBus = Одна двунаправленная шина данных
ramByteEnables = Чтение управления записью
RamClearPin = Сброс
ramDataAttr = Реализация шины данных
ramNoByteEnables = Только чтение/запись всего слова
ramSeparateDataBus = Отдельная шина данных для чтения и записи
ramTypeAttr = Очистка при сбросе схемы
ramTypeNonVolatile = Нет
ramTypeVolatile = Да
ramWithByteEnables = Байт использования позволяет
#
# memory/Random.java
#
randomClockTip = Тактовый вход: значение может обновиться при срабатывании
randomComponent = Генератор случайных чисел
randomLabel = произвольный
randomNextTip = Включение: переходить к следующему в последовательности при срабатывании тактового входа
randomQTip = Выход: текущее число в последовательности
randomResetTip = Очистка: когда 1, асинхронно сбрасывает на начальное семя
randomSeedAttr = Семя
randomWidthLabel = Ширина: %d
#
# memory/Register.java
#
registerClkTip = Тактовый вход: значение обновляется при срабатывании
registerClrTip = Очистка: когда 1, значение асинхронно фиксируется на 0
registerComponent = Регистр
registerDTip = Данные: значение, загружаемое при срабатывании тактового входа
registerEnableTip = Включение: когда 0, срабатывание тактового входа не даёт эффекта
registerLabel = reg
registerQTip = Выход: текущее значение регистра
registerShowInTab = Показать в регистрах Вкладка
registerWidthLabel = (%sb)
#
# memory/Rom.java
#
romComponent = ПЗУ
#
# memory/RomContentsListener.java
#
romChangeAction = Редактировать содержимое ПЗУ
#
# memory/ShiftRegister.java
#
shiftRegClearTip = Очистка: когда 1, асинхронно сбрасывает все в 0
shiftRegClockTip = Тактовый вход: значения могут обновиться при срабатывании
shiftRegInTip = Вход: значение для сдвига в первую ступень
shiftRegisterComponent = Сдвиговый регистр
shiftRegisterLabel1 = shift reg
shiftRegisterLabel2 = %sx%s
shiftRegLengthAttr = Количество ступеней
shiftRegLoadTip = Загрузка: когда 1 (при Сдвиг = 0), все ступени загружаются со входов
shiftRegOutTip = Выход: содержимое последней ступени
shiftRegParallelAttr = Параллельная загрузка
shiftRegShiftTip = Сдвиг: сдвиг выключен, если 0
#
# memory/SRFlipFlop.java
#
srFlipFlopComponent = S-R триггер
#
# plexers/BitSelector.java
#
bitSelectorComponent = Селектор битов
bitSelectorDataTip = Данные
bitSelectorGroupAttr = Выходные биты
bitSelectorOutputTip = Выход: значение выбранной из данных группы бит
bitSelectorSelectTip = Выбирающий вход: определяет, какая группа из данных выбрана
#
# plexers/Decoder.java
#
decoderEnableTip = Разрешить: когда не 0, на выбранном выходе - 1
decoderOutTip = Выход %s
decoderSelectTip = Выбирающий вход: определяет, на каком выходе 1
#
# plexers/Demultiplexer.java
#
demultiplexerEnableTip = Разрешить: когда не 0, на выбранном выходе - значение со входа
demultiplexerInTip = Вход
demultiplexerOutTip = Выход %s
demultiplexerSelectTip = Выбирающий вход: определяет, на какой выход посылается значение со входа
#
# plexers/Multiplexer.java
#
multiplexerEnableTip = Разрешить: когда не 0, на выходе - значение с выбранного входа
multiplexerInTip = Вход %s
multiplexerOutTip = Выход
multiplexerSelectTip = Выбирающий вход: определяет, какой вход становится выходом
#
# plexers/PlexersLibrary.java
#
decoderComponent = Декодер
demultiplexerComponent = Демультиплексор
gateSizeAttr = Размер элемента
gateSizeNarrowOpt = Узкий
gateSizeWideOpt = Широкий
multiplexerComponent = Мультиплексор
plexerDisabledAttr = На отключенном выходе
plexerDisabledFloating = Плавающее
plexerDisabledZero = Ноль
plexerEnableAttr = Разрешающий вход?
plexerLibrary = Плексоры
plexerSelectBitsAttr = Выбирающие биты
plexerThreeStateAttr = Три состояния?
priorityEncoderComponent = Шифратор приоритетов
#
# plexers/PriorityEncoder.java
#
priorityEncoderEnableInTip = Разрешающий вход: 0 отключает компонент
priorityEncoderEnableOutTip = Разрешающий выход: 1, если включен и ни на одном входе нет 1
priorityEncoderGroupSignalTip = Выбор группы: 1, если включен и хотя бы на одном входе 1
priorityEncoderInTip = Вход %s
priorityEncoderOutTip = Выход: адрес старшего по номеру входа, на котором 1
#
# StdAttr.java
#
ioLabelColorAttr = Цвет метки
stdClassicAppearance = Logisim-Классический
stdDataWidthAttr = Биты данных
stdEvolutionAppearance = Logisim-HolyCross
stdFacingAttr = Направление
# ==> stdFPDataWidthAttr =
stdLabelAttr = Метка
stdLabelCenter = Центр
stdLabelFontAttr = Шрифт метки
stdLabelLocAttr = Местоположение этикетки
stdLabelVisibility = Ярлык видимый
stdLogisimEvolutionAppearance = Logisim-Эволюция
stdTriggerAttr = Срабатывание
stdSelectLocAttr = Положение выбирающего входа
stdSelectBottomLeftOption = Снизу/слева
stdSelectTopRightOption = Сверху/справа
#
# tcl/TclLibrary.java
#
tclLibrary = TCL
#
# tcl/TclComponentAttributes.java
#
tclConsoleContentFile = файл содержания TCL
#
# tcl/TclConsoleReds.java
#
tclConsoleReds = Консоль TCL REDS
#
# tcl/TclGeneric.java
#
tclGeneric = общий TCL
tclInterfaceDefinition = TCL интерфейс VHDL объект VHDL
tclInterfaceDefinitionValue = (нажмите для редактирования)
#
# ttl/AbstractTtlGate.java
#
GNDPin = Минусовой контакт %s
VCCPin = Плюсовой контакт %s
#
# ttl/DisplayDecoder.java
#
BI = БИ
BlankingInputInTip = Глушение
DisplayDecoderComponent = Декодер дисплея
DisplayDecoderInTip = Вход
DisplayDecoderOutTip = Выход
ioMultiBit = мультибитный
LampTestInTip = Тестовый вход лампы
LT = ЛИТОВСКИЙ
memEnableLabel = en
RBI = РБИ
RippleBlankingInputInTip = Вход блокировки сосков
#
# ttl/TtlLibrary.java
#
ShowInternalStructure = Показать внутреннюю структуру
TTL7400 = 7400: четырехъядерные 2-входные NAND ворота
TTL7402 = 7402: четырехъядерные 2-входные НОР ворота
TTL7404 = 7404: шестнадцатеричный инвертор
TTL7408 = 7408: четырехъядерный 2-входной И ворота
TTL7410 = 7410: тройные 3-входные NAND ворота
TTL7411 = 7411: тройной 3-вход И ворота
TTL74125 = 74125: буфер четырехпроводной шины, выходы в трех состояниях, отрицательная разблокировка.
# ==> TTL74157 =
# ==> TTL74158 =
# ==> TTL74138 =
# ==> TTL74139 =
TTL7413 = 7413: двойные 4-входные ворота NAND (шмитт-триггер)
TTL7414 = 7414: шестнадцатеричный инвертор (шмитт-триггер)
TTL74161 = 74161: 4-bit sync counter with clear
# ==> TTL74163 =
# ==> TTL74164 =
# ==> TTL74165 =
TTL74175 = 74175: четырехпозиционный D-flipflop, асинхронный сброс
TTL7418 = 7418: двойные 4-входные ворота NAND (шмитт-триггер)
TTL7419 = 7419: шестнадцатеричный инвертор (шмитт-триггер)
# ==> TTL74192 =
# ==> TTL74193 =
TTL7420 = 7420: двойные 4-входные NAND-врата
TTL7421 = 7421: двойной 4-входной И ворота
TTL7424 = 7424: четырехъядерные 2-входные NAND ворота (шмитт-триггер)
# ==> TTL74245 =
TTL74266 = 74266: четырехъядерные 2-входные ворота XNOR
TTL7427 = 7427: тройные 3-входные НОР-врата
TTL74273 = 74273: восьмеричная D-Флипфлоп с прозрачностью
TTL74283 = 74283: 4-разрядный сумматор с полным двоичным сумматором
TTL7430 = 7430: одноступенчатые 8-ми входные NAND ворота
TTL7432 = 7432: четырехъядерный 2-входной ИЛИ ворота
# ==> TTL7434 =
TTL7436 = 7436: четырехъядерные 2-входные НОР ворота
TTL74377 = 74377: восьмеричная D-Flipflop с разрешением
TTL7442 = 7442: BCD к десятичному декодеру
TTL7443 = 7443: Декодер с лишним от 3 до 10 знаков после запятой
TTL7444 = 7444: выбирается одна линия из N в зависимости кода Gray
TTL7447 = 7447: Декодер с BCD до 7-сегментного декодера
TTL7451 = 7451: двойные ворота AND-OR-INVERT (ИЛИ-ИНВЕРТ)
TTL7454 = 7454: Четыре широких ворот AND-OR-INVERT (ИЛИ-ИНВЕРТНЫЕ)
TTL7458 = 7458: двойные AND-OR ворота
TTL7464 = 7464: 4-2-3-3-2 И-ОР-ИНВЕРТНЫЕ ворота
TTL7474 = 7474: двойные шлепанцы D-Flipflops с предустановленной и прозрачной посадкой.
TTL7485 = 7485: 4-разрядный компаратор магнитуды
TTL7486 = 7486: четырехъядерные 2-входные ворота XOR
VccGndPorts = Включить порты Vcc и Gnd
#
# wiring/BitExtender.java
#
extenderInAttr = Разрядность входа
extenderInputLabel = input
extenderInputType = Вход
extenderMainLabel = extend
extenderOneLabel = 1
extenderOneType = Единица
extenderOutAttr = Разрядность выхода
extenderSignLabel = sign
extenderSignType = Знак
extenderTypeAttr = Тип расширения
extenderZeroLabel = 0
extenderZeroType = Ноль
#
# wiring/Clock.java
#
clockComponent = Тактовый генератор
clockHighAttr = Продолжительность единицы
clockLowAttr = Продолжительность нуля
# ==> clockPhaseAttr =
#
# wiring/Constant.java
#
constantComponent = Константа
constantValueAttr = Значение
#
# wiring/DurationAttribute.java
#
clockDurationOneValue = 1 такт
clockDurationValue = %s тактов
durationLargeMessage = Значение должно быть %s или меньше.
durationSmallMessage = Значение должно быть как минимум %s.
freqInvalidMessage = Значение не является допустимым целым
PORDurationOneValue = 1 секунда
PORDurationValue = секунды
#
# wiring/Pin.java
#
PinCancel = Отмена
pinComponent = Контакт
PinEnterDecimal = Введите десятичную дробь
# ==> PinEnterFloat =
pinFrozenQuestion = Значение на контакте привязано к состоянию надсхемы. Создать новое состояние схемы?
pinFrozenTitle = Контакт подключен к надсхеме.
pinInputName = Вход
pinInputToolTip = Добавить входной контакт
PinOkay = ХОРОШО
pinOutputAttr = Выход?
pinOutputName = Выход
pinOutputToolTip = Добавить выходной контакт
pinPullAttr = Обращение с плавающими
pinPullDownOption = Понижать
pinPullNoneOption = Не менять
pinPullUpOption = Повышать
pinThreeStateAttr = Три состояния?
#
# wiring/PowerOnReset.java
#
porHighAttr = Длительность импульса
PowerOnResetComponent = Сигнал сброса
#
# wiring/Probe.java
#
probeComponent = Датчик
#
# wiring/ProbeAttributes.java
#
probeNewPin = Форма стрелы
stdAppearanceAttr = Внешний вид
#
# wiring/PullResistor.java
#
pullComponent = Согласующий резистор
pullErrorType = Ошибка
pullOneType = Единица
pullTypeAttr = Направление согласования
pullZeroType = Ноль
#
# wiring/Transistor.java
#
transistorNDrain = слив: низкий источник тянет слив низкий (только когда затвор высокий).
transistorNGate = затвор: когда высокий, позволяет току протекать через транзистор.
transistorNSource = источник: низкий источник тянет сток ниже (только когда затвор высокий).
transistorPDrain = слив: высокий источник тянет слив высоко (только при низком уровне затвора).
transistorPGate = затвор: при низком уровне тока пропускает его через транзистор.
transistorPSource = источник: высокий источник тянет сток вверх (только при низком уровне затвора).
transistorTypeAttr = Тип
transistorTypeN = n-тип
transistorTypeP = p-тип
#
# wiring/TransmissionGate.java
#
transmissionGateDrain = дренаж: контролируется источником, в зависимости от p-образных и n-образных затворов.
transmissionGateNGate = n-образный затвор: когда низкий, позволяет низкому источнику проникать сквозь него для дренажа
transmissionGatePGate = p-образные ворота: когда высока, позволяет высокому источнику проникать сквозь них для слива воды.
transmissionGateSource = Источник: органы управления сливом в зависимости от p- и n-образных затворов.
#
# wiring/Tunnel.java
#
tunnelComponent = Тоннель
#
# wiring/WiringLibrary.java
#
extenderComponent = Расширитель битов
groundComponent = Земля
noConnectionComponent = Не подключайтесь
powerComponent = Питание
transistorComponent = Транзистор
transmissionGateComponent = Передаточный вентиль
wiringLibrary = Проводка
# ==> input.output.extra =
