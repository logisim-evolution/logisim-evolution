#
# arith/Adder.java
#
adderCarryInTip = Carry In: se 1, um valor adicional em 1 será adicionado à saída
adderCarryOutTip = Carry Out: 1 se a soma transbordar para os bits disponíveis
adderComponent = Somador
adderInputTip = Entrada: um dos números a ser adicionado
adderOutputTip = Saída: a soma das entradas (mais "carry in")
#
# arith/Arithmetic.java
#
arithmeticLibrary = Aritmética
#
# arith/BitAdder.java
#
bitAdderComponent = Contador de bits
bitAdderInputTip = Entrada: bits a serem contados
bitAdderOutputManyTip = Saída: número de bits de entrada iguais a 1
gateInputsAttr = Quantidade de entradas
#
# arith/BitFinder.java
#
bitFinderComponent = Indexador de bits
bitFinderFindLabel = find
bitFinderHighLabel = alto
bitFinderHighOption = Mais alta ordem %s
bitFinderIndexHighTip = Index: índice da mais alta ordem da entrada %s
bitFinderIndexLowTip = Index: índice da mais baixa ordem da entrada %s
bitFinderInputTip = Entrada: bits a serem procurados
bitFinderLowLabel = baixo
bitFinderLowOption = Mais baixa ordem %s
bitFinderPresentTip = Present: 1 se a entrada contiver um %s
bitFinderTypeAttr = Tipo
#
# arith/Comparator.java
#
comparatorComponent = Comparador
comparatorEqualTip = Equal: 1 se A igual a B
comparatorGreaterTip = Greater: 1 se A for maior que B
comparatorInputATip = A: número precedendo a operação de comparação
comparatorInputBTip = B: número seguindo a operação de comparação
comparatorLessTip = Less: 1 se A for menor que B
comparatorType = Tipo numérico
twosComplementOption = Complemento de 2
unsignedOption = Sem sinal
#
# arith/Divider.java
#
dividerComponent = Divisor
dividerDividendLowerTip = Parte baixa do dividendo: metade baixa do número a ser dividido
dividerDividendUpperTip = Parte alta do dividendo: metade alta do número a ser dividido
dividerDivisorTip = Divisor: número pelo qual será dividido
dividerOutputTip = Saída: o resultado da divisão do dividendo pelo divisor
dividerRemainderOutput = rem
dividerRemainderTip = Resto: o resto da divisão (dividendo - output * divisor)
dividerUpperInput = upper
#
# arith/Multiplier.java
#
multiplierCarryInTip = Carry In: valor a ser adicionado à saída
multiplierCarryOutTip = Carry Out: bits mais significativos do produto
multiplierComponent = Multiplicador
multiplierInputTip = Entrada: um dos números a ser multiplicado
multiplierOutputTip = Saída: o produto das entradas, mais o "carry in"
#
# arith/Negator.java
#
negatorComponent = Negador
negatorInputTip = Entrada: número a ser negado
negatorOutputTip = Saída: complemento de dois da entrada
#
# arith/Shifter.java
#
shiftArithmeticRight = Aritmético para a direita
shifterComponent = Deslocador
shifterDistanceTip = Distance: até onde deslocar a entrada
shifterInputTip = Entrada: bits a serem deslocados
shifterOutputTip = Saída: resultado do deslocamento da entrada
shifterShiftAttr = Tipo do deslocamento
shiftLogicalLeft = Lógico para a esquerda
shiftLogicalRight = Lógico para a direita
shiftRollLeft = Com rotação à esquerda
shiftRollRight = Com rotação à direita
#
# arith/Subtractor.java
#
subtractorBorrowInTip = Borrow In: se 1, 1 será deduzido da saída
subtractorBorrowOutTip = Borrow Out: 1 se a diferença levar a um valor negativo
subtractorComponent = Subtrator
subtractorMinuendTip = Minuendo: número do qual outro será subtraído
subtractorOutputTip = Saída: a diferença entre o minuendo e o subtraendo
subtractorSubtrahendTip = Subtraendo: número a subtrair do minuendo
#
# base/Base.java
#
baseLibrary = Base
#
# base/Text.java
#
textComponent = Rótulo
textFontAttr = Fonte
textHorzAlignAttr = Alinhamento horizontal
textHorzAlignCenterOpt = Centro
textHorzAlignLeftOpt = Esquerda
textHorzAlignRightOpt = Direita
textTextAttr = Texto
textVertAlignAttr = Alinhamento vertical
textVertAlignBaseOpt = Base
textVertAlignBottomOpt = Embaixo
textVertAlignCenterOpt = Centro
textVertAlignTopOpt = Em cima
#
# base/VhdlParser.java
#
CannotFindEntityException = Impossível encontrar definição de entidade
emptySourceException = Impossível interpretar conteúdo vazio
genericDeclarationException = Sintaxe de genéricos ilegais
genericTypeException = Tipo de genéricos não suportados
genericValueException = Valor padrão genérico não reconhecido
invalidTypeException = Tipo de porta inválido
portDeclarationException = Erro de sintaxe na porta
#
# Builtin.java
#
builtinLibrary = Predefinido
#
# gates/AndGate.java
#
andGateComponent = Porta AND
#
# gates/Buffer.java
#
bufferComponent = Buffer
#
# gates/ControlledBuffer.java
#
controlledBufferComponent = Buffer controlado
controlledControlOption = Posição da linha de controle
controlledInverterComponent = Inversor controlado
controlledLeftHanded = À esquerda
controlledRightHanded = À direita
#
# gates/EvenParityGate.java
#
evenParityComponent = Paridade par
#
# gates/GateAttributes.java
#
gateOutput01 = 0/1
gateOutput0Z = 0/flutuante
gateOutputAttr = Valor de saída
gateOutputZ1 = flutuante/1
gateSizeNormalOpt = Médio
xorBehaviorAttr = Comportamento para múltiplas entradas
xorBehaviorOdd = Quando existir um número ímpar
xorBehaviorOne = Quando uma entrada estiver em 1
#
# gates/Gates.java
#
gatesLibrary = Portas
#
# gates/NandGate.java
#
nandGateComponent = Porta NAND
#
# gates/NegateAttribute.java
#
gateNegateAttr = Negar %s
#
# gates/NorGate.java
#
norGateComponent = Porta NOR
#
# gates/NotGate.java
#
notGateComponent = Porta NOT
#
# gates/OddParityGate.java
#
oddParityComponent = Paridade ímpar
#
# gates/OrGate.java
#
orGateComponent = Porta OR
#
# gates/PLA.java
#
plaBitWidthIn = Largura da broca em
plaBitWidthOut = Largura da broca para fora
input = entrada
output = saída
PLA = PLA
plaClickToEdit = (clique para editar)
plaEditMenuItem = Editar programa PLA...
plaProgram = Programação
#
# gates/PLATable.java
#
plaEditorTitle = Editor do Programa PLA
plaFileCreateError = Não foi possível criar um ficheiro.
plaFileOpenError = Não foi possível abrir o ficheiro.
plaLoadDialogTitle = Carregar programa PLA
plaLoadErrorTitle = Erro ao carregar o programa PLA
plaSaveDialogTitle = Salvar Programa PLA
plaSaveErrorTitle = Erro ao salvar o programa PLA
#
# gates/XnorGate.java
#
xnorGateComponent = Porta XNOR
#
# gates/XorGate.java
#
xorGateComponent = Porta XOR
#
# InstanceComponent.java
#
KeywordNameError = A etiqueta é uma palavra-chave reservada e não pode ser usada. Por favor, especifique uma etiqueta diferente.
MatchedLabelNameError = A etiqueta e o nome do componente podem não ser os mesmos (são insensíveis a maiúsculas e minúsculas). Especifique uma etiqueta diferente do nome do componente.
#
# InstanceTextField.java
#
changeLabelAction = Substituir rótulo
#
# io/DipSwitch.java
#
DIP = DIP
DipSwitchComponent = Interruptor Dip
nrOfSwitch = Quantidade de chaves
#
# io/DotMatrix.java
#
ioInputColumn = Colunas
ioInputRow = Linhas
ioInputSelect = Selecionar linhas/colunas
ioMatrixCols = Colunas da matriz
ioMatrixInput = Formato da entrada
ioMatrixPersistenceAttr = Persistência
ioMatrixRows = Linhas da matriz
ioMatrixShape = Forma dos pontos
ioShapeCircle = Circular
ioShapeSquare = Quadrado
#
# io/extra/Buzzer.java
#
buzzerFrequecy = frequência
buzzerVolume = volume
buzzerVolumeBitWidth = largura do bit de volume
buzzerUnitDhz = dHz (0.1Hz)
enableSound = Habilitar som
Hz = Hz
#
# io/extra/DigitalOscilloscope.java
#
BorderColor = Cor da borda
bothOption = ambos
ClearDiagram = Limpar diagrama
DigitalOscilloscopeClock = relógio
DrawClockFrontLine = desenhar a linha da frente do relógio
noOption = nenhum
ShowClockAttribute = Mostrar atributo de relógio
stdTriggerFalling = Borda de descida
stdTriggerRising = Borda de subida
#
# io/extra/ITA_IO.java
#
buzzerComponent = Sinal sonoro
DigitalOscilloscopeComponent = oscilação digital.
PlaRomComponent = 
Slider = cursor
switchComponent = interruptor
#
# io/extra/PlaRom.java
#
memCSTip = Chip select: 0 desabilita componente
PlaANDAttr = E...
PlaOutputsAttr = Saída
ramCSLabel = sel
#
# io/extra/PlaRomData.java
#
PlaEditWindowTitel = Janela de edição do Pla Rom %s
#
# io/extra/ProgrammableGenerator.java
#
NStateAttr = Nº de Estados
ProgrammableGeneratorComponent = Gerador de Progr.
ramClearMenuItem = Limpar conteúdos
ramEditMenuItem = Editar conteúdos...
romContentsAttr = Conteúdos
romContentsValue = (clicar para editar)
#
# io/extra/Slider.java
#
left_to_rightOption = da esquerda para a direita
right_to_leftOption = da direita para a esquerda
#
# io/HexDigit.java
#
hexDigitDataTip = Dados: mordiscar para exibir em hexadecimal
hexDigitDPTip = DecimalPoint: ilumina o ponto decimal
#
# io/Io.java
#
buttonComponent = Botão
dipswitchComponent = Dip switch
dotMatrixComponent = Matriz de LED
hexDigitComponent = Display hexadecimal
ioActiveAttr = Ativar em alto?
ioBackgroundColor = Fundo
ioColorAttr = Cor
ioLibrary = Entrada/Saída
ioOffColor = Cor se desligado
ioOnColor = Cor se ligado
joystickComponent = Joystick
ledComponent = LED
pioComponent = Porta para entrada/saída
repLBComponent = Reptar Local Bus
RGBledComponent = LED RGB
sevenSegmentComponent = Display de 7-segmentos
ttyComponent = TTY
#
# io/Joystick.java
#
ioBitWidthAttr = Largura em bits
#
# io/Keyboard.java
#
keybAvailTip = Available: 1 quando o buffer contiver caracteres
keybBufferLengthAttr = Tamanho do buffer
keybClearTip = Clear: 1 irá limpar o buffer
keybClockTip = Clock: ao gatilho irá consumir o primeiro caractere no buffer
keybDesc = teclado (buffer cap. %s)
keybEnableTip = Read enable: 0 irá desabilitar o clock
keyboardComponent = Teclado
keybOutputTip = Data: valor ASCII do primeiro caractere no buffer
#
# io/PortIO.java
#
# ==> pioDirection = 
# ==> pioInput = 
# ==> pioInputs = 
# ==> pioIOMultiple = 
# ==> pioIOSingle = 
pioNumber = Número do PIN
# ==> pioOutEnable = 
# ==> pioOutEnables = 
# ==> pioOutput = 
# ==> pioOutputs = 
#
# io/ReptarLocalBus.java
#
repLBTip = Ponta B
#
# io/RGBLed.java
#
BLUE = Entrada azul
GREEN = Entrada verde
RED = Entrada vermelha
#
# io/SevenSegment.java
#
DecimalPoint = Ponto decimal
Segment_A = Segmento A
Segment_B = Segmento B
Segment_C = Segmento C
Segment_D = Segmento D
Segment_E = Segmento E
Segment_F = Segmento F
Segment_G = Segmento G
# ==> SevenSegDP = 
#
# io/Tty.java
#
ttyClearTip = Clear: 1 irá limpar a tela
ttyClockTip = Clock: ao gatilho irá acrescentar caractere à entrada
ttyColsAttr = Colunas
ttyDesc = TTY (%s linhas, %s colunas)
ttyDescShort = TTY
ttyEnableTip = Write enable: 0 irá desabilitar o clock
ttyInputTip = Data: valor ASCII do próximo caractere a ser escrito
ttyRowsAttr = Linhas
#
# io/Video.java
#
rgbVideoCLK = Relógio
rgbVideoColor = Modelo de cor
rgbVideoComponent = Vídeo RGB
rgbVideoCursor = Cursor
rgbVideoData = Dados em formato %s
rgbVideoHeight = Altura
rgbVideoReset = Resetar Comportamento
rgbVideoRST = Redefinir
rgbVideoScale = Escala
rgbVideoWE = Escrever Habilitar
rgbVideoWidth = Largura
rgbVideoX = X Coordenadas
rgbVideoY = Y Coordenada
#
# library/bcd2sevenseg.java
#
BCDValue = Valor BCD
BCD2SevenSegment = BCD para sete segmentos
#
# library/BFHPraktika.java
#
BFHMegaFunctions = BFH mega funções
Bin2BCD = Binary a BCD
#
# library/bin2bcd.java
#
BinaryDataBits = Bits de dados Binary
BinaryInputTip = Entrada Binary
#
# memory/AbstractFlipFlop.java
#
flipFlopClockTip = Clock: atualizar estado ao gatilho
flipFlopNotQTip = Complemento do estado atual do flip-flop
flipFlopPresetTip = Preset: quando em 1, o estado do pino será 1 assincronamente
flipFlopQTip = Estado atual do flip-flop
flipFlopResetTip = Clear: quando em 1, o estado do pino será 0 assincronamente
#
# memory/Counter.java
#
counterCarryTip = Carry: será 1 quando o valor máximo for alcançado (ou mínimo se em decremento)
counterClockTip = Clock: valor pode ser atualizado ao gatilho
counterComponent = Contador
counterDataTip = Dados: valor a ser carregado no contador
counterEnableLabel = ct
counterEnableTip = Count: quando em 1, incrementar contador (ou decrementar se Load = 1)
counterGoalAttr = Ação quando houver transbordamento
counterGoalContinue = Continuar contando
counterGoalLoad = Carregar próximo valor
counterGoalStay = Permanecer no valor
counterGoalWrap = Reiniciar contagem
counterLabel = ctr
counterLoadTip = Load: quando em 1, carregar a partir dos dados de entrada (se Count = 0) ou decrementar
counterMaxAttr = Valor máximo
counterQTip = Saída: valor atual do contador
counterResetTip = Clear: quando em 1, reiniciar em 0 assincronamente
counterUpDownTip = UpDown: quando em 1, incrementar contador; quando em 0, decrementar contador
#
# memory/JKFlipFlop.java
#
jkFlipFlopComponent = Flip-Flop tipo JK
#
# memory/Mem.java
#
memAsyncRead = Leitura assíncrona:
memByte = O byte de utilização permite
memDual = Duplo
memEnables = Permite:
memLine = A linha de uso permite
memLineSize = Tamanho da linha
# ==> memMisaligned = 
memOcto = Octo
memQuad = Quad
memRaw = Ler depois de escrever
memReadBehav = Comportamento de leitura
memSingle = Individual
memWar = Escreva depois de ler
ramAddrWidthAttr = Largura em bits do endereço
ramDataWidthAttr = Largura em bits dos dados
ramSelAttr = Selecione
stdTriggerHigh = Nível alto
stdTriggerLow = Nível baixo
#
# memory/MemMenu.java
#
ramConfirmClearMsg = Tem certeza que quer zerar toda a memória
ramConfirmClearTitle = Confirmar apagamento
ramLoadMenuItem = Carregar imagem...
ramSaveMenuItem = Salvar imagem...
#
# memory/Memory.java
#
dFlipFlopComponent = Flip-Flop tipo D
memoryLibrary = Memória
tFlipFlopComponent = Flip-Flop tipo T
#
# memory/Ram.java
#
ramComponent = RAM
#
# memory/RamAppearance.java
#
memAddrTip = Address: posição acessada na memória
memDataTip = Data: valor carregado a partir do endereço
memDataTip0 = Dados: valor carregado do endereço 0
memDataTip1 = Dados: valor carregado do endereço 1
memDataTip2 = Dados: valor carregado do endereço 2
memDataTip3 = Dados: valor carregado do endereço 3
ramByteEnableTip0 = Byte habilitado para byte 0
ramByteEnableTip1 = Byte habilitado para byte 1
ramByteEnableTip2 = Byte habilitado para byte 2
ramByteEnableTip3 = Byte habilitado para byte 3
ramClkTip = Clock: valor da memória será atualizado na varição de 0 para 1
ramClrPin = Limpo: um define todas as posições de memória para 0
ramInTip = Entrada: valor a ser armazenado no endereço
ramInTip0 = Entrada: valor a ser armazenado no endereço 0
ramInTip1 = Entrada: valor a ser armazenado no endereço 1
ramInTip2 = Input: valor a ser armazenado no endereço 2
ramInTip3 = Input: valor a ser armazenado no endereço 3
ramLETip0 = Linha habilitada para endereço 0
ramLETip1 = Linha habilitada para o endereço 1
ramLETip2 = Linha habilitada para o endereço 2
ramLETip3 = Linha habilitada para o endereço 3
ramOETip = Load: se 1, carregar memória à saída
ramWETip = Store: se 1, armazenar entrada na memória
#
# memory/RamAttributes.java
#
ramBidirDataBus = Um barramento de dados bidirecional
ramByteEnables = Controle de leitura e escrita
RamClearPin = Use o pino transparente
ramDataAttr = Implementação do barramento de dados
ramNoByteEnables = Somente leitura/escrita de palavra completa
ramSeparateDataBus = Barramento de dados separado para leitura e escrita
ramTypeAttr = Tipo de carneiro
ramTypeNonVolatile = não volátil
ramTypeVolatile = volátil
ramWithByteEnables = Usar ativação de byte
#
# memory/Random.java
#
randomClockTip = Clock: valor pode ser atualizado ao gatilho
randomComponent = Gerador de valor aleatório
randomLabel = aleatório
randomNextTip = Enable: passos até o próximo na sequência ao gatilho do clock
randomQTip = Saída: próximo número na sequência
randomResetTip = Clear: quando em 1, reiniciar com a semente inicial assincronamente
randomSeedAttr = Semente
randomWidthLabel = Largura: %d
#
# memory/Register.java
#
registerClkTip = Clock: valor atualizado ao gatilho
registerClrTip = Clear: quanto em 1, o valor do pino será 0 assincronamente
registerComponent = Registrador
registerDTip = Data: valor armazenado ao gatilho do clock
registerEnableTip = Enable: quando em 0, os gatilhos de clock não serão efetivos
registerLabel = reg
registerQTip = Saída: valor corrente do registrador
registerShowInTab = Mostrar na aba Registradores
registerWidthLabel = (%sb)
#
# memory/Rom.java
#
romComponent = ROM
#
# memory/RomContentsListener.java
#
romChangeAction = Editar conteúdos da ROM
#
# memory/ShiftRegister.java
#
shiftRegClearTip = Clear: quando em 1, reiniciar todos os valores em 0 assincronamente
shiftRegClockTip = Clock: valores poderão ser atualizados ao gatilho
shiftRegInTip = Entrada: valor a ser deslocado no primeiro estágio
shiftRegisterComponent = Registrador de deslocamento
shiftRegisterLabel1 = shift reg
shiftRegisterLabel2 = %sx%s
shiftRegLengthAttr = Número de estágios
shiftRegLoadTip = Load: quando em 1 (com shift = 0), todos os estágios serão carregados a partir das entradas
shiftRegOutTip = Saída: conteúdo do último estágio
shiftRegParallelAttr = Carga em paralelo
shiftRegShiftTip = Shift: desabilitar se 0
#
# memory/SRFlipFlop.java
#
srFlipFlopComponent = Flip-Flop tipo SR
#
# plexers/BitSelector.java
#
bitSelectorComponent = Selector de bit
bitSelectorDataTip = Dados
bitSelectorGroupAttr = Bits de saída
bitSelectorOutputTip = Saída: valor do grupo de bits selecionados a partir dos dados
bitSelectorSelectTip = Select: identificar qual grupo de dados da entrada será selecionado
#
# plexers/Decoder.java
#
decoderEnableTip = Enable: quando diferente de 0, a saída selecionada será 1
decoderOutTip = Saída %s
decoderSelectTip = Select: identificar qual saída será igual a 1
#
# plexers/Demultiplexer.java
#
demultiplexerEnableTip = Enable: quando diferente de 0, a saída selecionada será entrada
demultiplexerInTip = Entrada
demultiplexerOutTip = Saída %s
demultiplexerSelectTip = Select: identificar qual saída receberá a entrada
#
# plexers/Multiplexer.java
#
multiplexerEnableTip = Enable: quando diferente de 0, a saída será a entrada selecionada
multiplexerInTip = Entrada %s
multiplexerOutTip = Saída
multiplexerSelectTip = Select: identificar qual entrada se tornará saída
#
# plexers/Plexers.java
#
decoderComponent = Decodificador
demultiplexerComponent = Demultiplexador
gateSizeAttr = Tamanho da porta
gateSizeNarrowOpt = Pequeno
gateSizeWideOpt = Grande
multiplexerComponent = Multiplexador
plexerDisabledAttr = Desabilitar saída
plexerDisabledFloating = Flutuante
plexerDisabledZero = Zero
plexerEnableAttr = Incluir Enable?
plexerLibrary = Plexers
plexerSelectBitsAttr = Bits para seleção
plexerSelectBottomLeftOption = Abaixo/Esquerda
plexerSelectLocAttr = Selecionar posição
plexerSelectTopRightOption = Acima/Direita
plexerThreeStateAttr = Tri-state?
priorityEncoderComponent = Codificador de prioridade
#
# plexers/PriorityEncoder.java
#
priorityEncoderEnableInTip = Enable Input: 0 irá desabilitar o componente
priorityEncoderEnableOutTip = Enable Output: 1 se habilitado e nenhuma entrada estiver em 1
priorityEncoderGroupSignalTip = Group Select: 1 se habilitado e alguma entrada estiver em 1
priorityEncoderInTip = Entrada %s
priorityEncoderOutTip = Saída: endereço do valor 1 mais significativo na entrada
#
# StdAttr.java
#
ioLabelColorAttr = Cor do rótulo
stdClassicAppearance = Logisim Clássico
stdDataWidthAttr = Bits de dados
stdEvolutionAppearance = Logisim-HolyCross
stdFacingAttr = Posição
stdLabelAttr = Rótulo
stdLabelCenter = Centro
stdLabelFontAttr = Fonte do rótulo
stdLabelLocAttr = Localização da etiqueta
stdLabelVisibility = Etiqueta Visível
stdLogisimEvolutionAppearance = Logisim-Evolução
stdTriggerAttr = Gatilho
#
# tcl/Tcl.java
#
tclLibrary = TCL
#
# tcl/TclComponentAttributes.java
#
tclConsoleContentFile = Arquivo com conteúdo TCL
#
# tcl/TclConsoleReds.java
#
tclConsoleReds = Console TCL REDS
#
# tcl/TclGeneric.java
#
tclGeneric = TCL genérico
tclInterfaceDefinition = TCL interface para entidade VHDL
tclInterfaceDefinitionValue = (clicar para editar)
#
# ttl/AbstractTtlGate.java
#
GNDPin = Pino de terra %s
VCCPin = Pino VCC %s
#
# ttl/DisplayDecoder.java
#
BI = BI
BlankingInputInTip = Blanking
DisplayDecoderComponent = Decodificador de Display
DisplayDecoderInTip = Entrada
DisplayDecoderOutTip = Saída
ioMultiBit = multi bits
LampTestInTip = Entrada de teste de lâmpada
LT = LT
memEnableLabel = en
RBI = RBI
RippleBlankingInputInTip = Ripple blanking input
#
# ttl/TTL.java
#
ShowInternalStructure = Mostrar a estrutura interna
TTL7400 = 7400: portão NAND quad 2 entradas
TTL7402 = 7402: quad 2 entradas NOR gate
TTL7404 = 7404: inversor hexagonal
TTL7408 = 7408: quad 2 entradas e portão
TTL7410 = 7410: triplo 3 entradas porta NAND
TTL7411 = 7411: triplo 3 entradas e portão
TTL74125 = 74125: buffer de barramento quádruplo, saídas de três estados, habilitação negativa
TTL7413 = 7413: dual 4-input NAND gate(schmitt-trigger)
TTL7414 = 7414: inversor hexadecimal (schmitt-trigger)
TTL74165 = 74165: Registo de deslocação paralela para série de 8-bit
TTL74175 = 74175: quad D-flipflop, reset assíncrono
TTL7418 = 7418: dual 4-input NAND gate(schmitt-trigger)
TTL7419 = 7419: inversor hexadecimal (schmitt-trigger)
TTL7420 = 7420: porta NAND dupla de 4 entradas
TTL7421 = 7421: 4 entradas e porta dupla
TTL7424 = 7424: portão NAND quad 2 entradas (disparador schmitt-trigger)
TTL74266 = 74266: quad 2 entradas XNOR gate
TTL7427 = 7427: triplo 3 entradas porta NOR
TTL74273 = 74273: D-Flipflop octal com transparente
TTL74283 = 74283: Adicionador binário completo de 4 bits
TTL7430 = 7430: portão NAND de 8 entradas simples
TTL7432 = 7432: quad 2 entradas OU porta
TTL7436 = 7436: quad 2 entradas NOR gate
TTL74377 = 74377: D-Flipflop octal com habilitação
TTL7442 = 7442: BCD para decodificador decimal
TTL7443 = 7443: Descodificador de excesso-3 para decimal
TTL7444 = 7444: Descodificador Gray com decimal
TTL7447 = 7447: BCD para descodificador de 7 segmentos
TTL7451 = 7451: porta dupla AND-OR-INVERT
TTL7454 = 7454: Quatro portas largas AND-OR-INVERT
TTL7458 = 7458: dual AND-OR gate
TTL7464 = 7464: 4-2-3-3-2 E-OR-INVERT porta
TTL7474 = 7474: D-Flipflops duplos com ajuste predefinido e claro
TTL7485 = 7485: Comparador de magnitude de 4 bits
TTL7486 = 7486: quad 2 entradas XOR gate
VccGndPorts = Habilitar portas Vcc e Gnd
#
# wiring/BitExtender.java
#
extenderInAttr = Largura em bits à entrada
extenderInputLabel = entrada
extenderInputType = Entrada
extenderMainLabel = estendido
extenderOneLabel = 1
extenderOneType = Um
extenderOutAttr = Largura em bits à saída
extenderSignLabel = sinal
extenderSignType = Sinal
extenderTypeAttr = Tipo da extensão
extenderZeroLabel = 0
extenderZeroType = Zero
#
# wiring/Clock.java
#
clockComponent = Clock
clockHighAttr = Duração em nível alto
clockLowAttr = Duração em nível baixo
#
# wiring/Constant.java
#
constantComponent = Constante
constantValueAttr = Valor
#
# wiring/DurationAttribute.java
#
clockDurationOneValue = 1 pulso
clockDurationValue = %s pulsos
durationLargeMessage = Valor deve ser %s ou menor.
durationSmallMessage = Valor deve ser ao menos %s.
freqInvalidMessage = Valor não é um inteiro válido
PORDurationOneValue = 1 Sec
PORDurationValue = %s Secs
#
# wiring/Pin.java
#
PinCancel = Cancelar
pinComponent = Pino
PinEnterDecimal = Entrar decimal
pinFrozenQuestion = Pino vinculado ao estado do supercircuito. Criar um novo estado do circuito?
pinFrozenTitle = Pino associado ao supercircuito.
pinInputName = Entrada
pinInputToolTip = Acrescentar um pino de entrada
PinOkay = ESTÁ BEM.
pinOutputAttr = Saída?
pinOutputName = Saída
pinOutputToolTip = Acrescentar um pino de saída
pinPullAttr = Comportamento para ajuste
pinPullDownOption = Ajustar para baixo
pinPullNoneOption = Sem alterações
pinPullUpOption = Ajustar para cima
pinThreeStateAttr = Tri-state?
#
# wiring/PowerOnReset.java
#
porHighAttr = POR-tempo
PowerOnResetComponent = POR
#
# wiring/Probe.java
#
probeComponent = Ponta de prova
#
# wiring/ProbeAttributes.java
#
probeNewPin = Formas de setas
stdAppearanceAttr = Aparência
#
# wiring/PullResistor.java
#
pullComponent = Resistor para ajuste
pullErrorType = Erro
pullOneType = Um
pullTypeAttr = Direção para ajuste
pullZeroType = Zero
#
# wiring/Transistor.java
#
transistorNDrain = dreno: uma fonte baixa puxará o dreno para baixo (apenas quando o portão estiver alto)
transistorNGate = portão: quando alto, permite que a corrente flua através do transistor
transistorNSource = fonte: uma fonte baixa puxará o dreno para baixo (apenas quando o portão estiver alto)
transistorPDrain = dreno: uma fonte alta puxará o dreno para cima (apenas quando o portão estiver baixo)
transistorPGate = portão: quando baixo, permite que a corrente flua através do transistor
transistorPSource = fonte: uma fonte alta puxará o dreno para cima (apenas quando o portão estiver baixo)
transistorTypeAttr = Tipo
transistorTypeN = Tipo-N
transistorTypeP = Tipo-P
#
# wiring/TransmissionGate.java
#
transmissionGateDrain = dreno: controlado por fonte, dependendo de p-gate e n-gate
transmissionGateNGate = n-gate: quando baixo, permite que a fonte baixa passe para o dreno
transmissionGatePGate = p-gate: quando alto, permite que a fonte alta passe para drenar
transmissionGateSource = fonte: controla o dreno, dependendo do p-gate e n-gate
#
# wiring/Tunnel.java
#
tunnelComponent = Túnel
#
# wiring/Wiring.java
#
extenderComponent = Extensor de bits
groundComponent = Terra
noConnectionComponent = Não conectar
powerComponent = Fonte
transistorComponent = Transistor
transmissionGateComponent = Porta de Transmissão
wiringGateAttr = Posição
wiringGateBottomRightOption = Embaixo/Direita
wiringGateTopLeftOption = Em cima/Esquerda
wiringLibrary = Conexão


