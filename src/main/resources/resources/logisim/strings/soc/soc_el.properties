#
# bus/SocBusAttributes.java
#
# ==> SocBusTraceSize =
# ==> SocBusTraceVisible =
#
# bus/SocBusMenuProvider.java
#
# ==> insertTrans =
# ==> SocBusMemMap =
# ==> SocBusTraceWindow =
# ==> SocInsertTransWindowTitle =
# ==> TraceWindowTitleDoubleClickOnTraceToRemoveTrace =
#
# data/SocBusInfo.java
#
# ==> SocBusNotConnected =
#
# data/SocBusStateInfo.java
#
# ==> SocBusNoTrace =
# ==> SocMemMapWindowTitle =
# ==> SocMemoryMapOk =
# ==> SocMemoryMapTitle =
#
# data/SocBusTransaction.java
#
# ==> SocBusStateMaster =
# ==> SocBusStateNoDataMax10chars =
# ==> SocBusStateSlave =
# ==> SocBusStateTraceIndex =
# ==> SocTransactionByteAccesNoSupport =
# ==> SocTransactionByteAccesNoSupportShort =
# ==> SocTransactionHalfWordAccesNoSupport =
# ==> SocTransactionHalfWordAccesNoSupportShort =
# ==> SocTransactionMisalignedAddress =
# ==> SocTransactionMisalignedAddressShort =
# ==> SocTransactionMultipleSlaveAnswers =
# ==> SocTransactionMultipleSlaveAnswersShort =
# ==> SocTransactionNoBusConnected =
# ==> SocTransactionNoBusConnectedShort =
# ==> SocTransactionNoneAtomicRW =
# ==> SocTransactionNoneAtomicRWShort =
# ==> SocTransactionNoRespons =
# ==> SocTransactionNoResponsShort =
# ==> SocTransactionNoSlavesAttached =
# ==> SocTransactionNoSlavesAttachedShort =
# ==> SocTransactionReadOnlyAccessError =
# ==> SocTransactionReadOnlyAccessErrorShort =
# ==> SocTransactionRegisterDoesNotExist =
# ==> SocTransactionRegisterDoesNotExistShort =
# ==> SocTransactionSuccessfull =
# ==> SocTransactionSuccessfullShort =
# ==> SocTransactionUnknownError =
# ==> SocTransactionUnknownErrorShort =
# ==> SocTransactionWordAccesNoSupport =
# ==> SocTransactionWordAccesNoSupportShort =
# ==> SocTransactionWriteOnlyAccessError =
# ==> SocTransactionWriteOnlyAccessErrorShort =
#
# data/SocMemMapModel.java
#
# ==> SocMemMapEmpty =
# ==> SocMemMapEndAddress =
# ==> SocMemMapSlaveName =
# ==> SocMemMapStartAddress =
#
# data/SocSimulationManager.java
#
# ==> SocBusManagerSelectBus =
# ==> SocBusSelectAttr =
# ==> SocBusSelectAttrClick =
# ==> SocManagerNoBusses =
#
# data/SocUpMenuProvider.java
#
# ==> ProcReadElfLoadedAndEntrySet =
# ==> SocUpMenuAsmWindow =
# ==> SocUpMenuCpuAsmWindowTitle =
# ==> SocUpMenuCpuProgramWindowTitle =
# ==> SocUpMenuCpuStateWindowTitle =
# ==> SocUpMenuErrorReadingElfTitle =
# ==> SocUpMenuReadElf =
# ==> SocUpMenuSelectElfFile =
# ==> SocUpMenuShowProgram =
# ==> SocUpMenuShowState =
#
# data/SocUpSimulationState.java
#
# ==> SocUpSimHalt =
# ==> SocUpSimHaltBreak =
# ==> SocUpSimHaltError =
# ==> SocUpSimRunning =
# ==> SocUpSimStateLabel =
# ==> SocUpSimstateStart =
# ==> SocUpSimstateStop =
# ==> SocUpUnknown =
#
# file/ElfHeader.java
#
# ==> ElfHeaderEIClassError =
# ==> ElfHeaderEIDataError =
# ==> ElfHeaderIncorrectEISize =
# ==> ElfHeaderIncorrectESize =
# ==> ElfHeaderIncorrectMagic =
# ==> ElfHeaderNoErrors =
# ==> ElfHeaderReadingFileError =
# ==> ElfHeaderUnknownArchitecture =
#
# file/ElfProgramHeader.java
#
# ==> ProgHeaderNotFound =
# ==> ProgHeaderReadError =
# ==> ProgHeaderSizeError =
# ==> ProgHeaderSuccess =
#
# file/ElfSectionHeader.java
#
# ==> ElfSectHeadMultiStringtabError =
# ==> ElfSectHeadMultiSymtabError =
# ==> ElfSectHeadNotFound =
# ==> ElfSectHeadReadError =
# ==> ElfSectHeadSizeError =
# ==> ElfSectHeadStingIdxError =
# ==> ElfSectHeadStingNotFound =
# ==> ElfSectHeadStingReadError =
# ==> ElfSectHeadStingTypeError =
# ==> ElfSectHeadSuccess =
# ==> ElfSymTableNotFound =
# ==> ElfSymTableReadError =
#
# file/ProcessorReadElf.java
#
# ==> ProcReadElf64BitNotSupportedYet =
# ==> ProcReadElfArchError =
# ==> ProcReadElfEndianMismatch =
# ==> ProcReadElfErrorOpeningFile =
# ==> ProcReadElfLoadableSectionNotFound =
# ==> ProcReadElfLoadableSectionReadError =
# ==> ProcReadElfLoadableSectionSizeError =
# ==> ProcReadElfLoadableSectionTooBig =
# ==> ProcReadElfMemoryError =
# ==> ProcReadElfNotExecutable =
# ==> ProcReadElfSuccess =
#
# gui/AssemblerPanel.java
#
# ==> AsmPanAmsFileExtention =
# ==> AsmPanAssemble =
# ==> AsmPanDocumentChangedSave =
# ==> AsmPanErrorCreateFile =
# ==> AsmPanErrorReadingFile =
# ==> AsmPanNextError =
# ==> AsmPanOpenFile =
# ==> AsmPanPreviousError =
# ==> AsmPanReadAsmFile =
# ==> AsmPanRun =
# ==> AsmPanSaveAsmFile =
# ==> AsmPanSaveFile =
# ==> AsmPanSaveFileAs =
# ==> AsmPanSaveFirstBeforeOpen =
# ==> AssemblerAssembleSuccess =
# ==> AssemblerRunSuccess =
# ==> AssemblerUnableToDownload =
# ==> RV32imAsmLineIndicator =
#
# gui/BreakpointPanel.java
#
# ==> RV32imRemoveBreakPoint =
# ==> RV32imSetBreakpoint =
#
# gui/BusTransactionInsertionGui.java
#
# ==> SocTransInsAddress =
# ==> SocTransInsAtomicRequest =
# ==> SocTransInsByteAccess =
# ==> SocTransInsHalfWordAccess =
# ==> SocTransInsInputData =
# ==> SocTransInsInsertTransaction =
# ==> SocTransInsManual =
# ==> SocTransInsReadData =
# ==> SocTransInsReadRequest =
# ==> SocTransInsTransResultTitle =
# ==> SocTransInsWordAccess =
# ==> SocTransInsWriteRequest =
#
# gui/CpuDrawSupport.java
#
# ==> Rv32imAsmInstruction =
# ==> Rv32imBinInstruction =
# ==> Rv32imEmptyTrace =
# ==> Rv32imExecutionTrace =
# ==> Rv32imRegisterFile =
#
# gui/SocCPUShape.java
#
# ==> RV32ShapeSimControl =
#
# jtaguart/JtagUart.java
#
# ==> JtagUartClearKeyb =
# ==> JtagUartKeybAvailable =
# ==> JtagUartKeybData =
# ==> JtagUartKeybReadEnable =
# ==> JtagUartTtyClear =
# ==> JtagUartTtyData =
# ==> JtagUartTtyWrite =
# ==> SocJtagUartComponent =
#
# jtaguart/JtagUartAttributes.java
#
# ==> JtagUartReadIrqThreshold =
# ==> JtagUartWriteIrqThreshold =
# ==> UartJtagREADFifoSize =
# ==> UartJtagWriteFifoSize =
#
# memory/SocMemory.java
#
# ==> SocMemBase =
# ==> SocMemoryComponent =
# ==> SocMemSizeStr =
#
# memory/SocMemoryAttributes.java
#
# ==> SocMemSize =
# ==> SocMemStartAddress =
#
# nios2/Nios2.java
#
# ==> Nios2A =
# ==> Nios2B =
# ==> Nios2C =
# ==> Nios2Component =
# ==> Nios2Dataa =
# ==> Nios2Datab =
# ==> Nios2Done =
# ==> Nios2N =
# ==> Nios2ReadRa =
# ==> Nios2ReadRb =
# ==> Nios2Result =
# ==> Nios2Start =
# ==> Nios2WriteRc =
# ==> Rv32imClockInput =
# ==> Rv32imIrqInput =
# ==> Rv32imResetInput =
#
# nios2/Nios2Attributes.java
#
# ==> nios2BreakVector =
# ==> rv32ExceptionVector =
# ==> rv32imIrqWidth =
# ==> rv32ResetVector =
# ==> rv32StateVisible =
#
# nios2/Nios2CustomInstructions.java
#
# ==> AssemblerExpectedFourArguments =
# ==> Nios2DonePinError =
#
# nios2/Nios2DataTransferInstructions.java
#
# ==> LoadStoreErrorInReadTransaction =
# ==> LoadStoreErrorInWriteTransaction =
#
# nios2/Nios2OtherControlInstructions.java
#
# ==> AssemblerExpectedImmediateValue =
# ==> AssemblerExpectedNoArguments =
# ==> AssemblerExpectedOneArgument =
# ==> AssemblerExpectedTwoArguments =
# ==> AssemblerExpectedZeroOrOneArgument =
# ==> AssemblerImmediateOutOfRange =
# ==> AssemblerUnknownRegister =
# ==> Nios2AssemblerExpectedBracketedRegister =
# ==> Nios2AssemblerExpectedImmediateIndexedRegister =
# ==> Nios2CannotUseControlRegister =
# ==> Nios2CannotUseCustomRegister =
# ==> Nios2ExpectedControlRegister =
#
# nios2/Nios2ProgramControlInstructions.java
#
# ==> AssemblerExpectedThreeArguments =
# ==> AssemblerExpextedImmediateOrLabel =
#
# nios2/Nios2State.java
#
# ==> Nios2Bstatus =
# ==> Nios2Estatus =
# ==> Nios2Status =
# ==> RV32imBreakPointReached =
# ==> RV32imFetchExecutionError =
# ==> RV32imFetchInvalidInstruction =
# ==> RV32imFetchInvInstrAsm =
# ==> RV32imFetchTransaction =
# ==> Rv32imProgramCounter =
# ==> SocHiddenForFasterSimulation =
#
# nios2/Nios2Support.java
#
# ==> AssemblerExpectedRegister =
#
# pio/PioAttributes.java
#
# ==> SicPioIrqType =
# ==> SocPioAnyEdge =
# ==> SocPioBidir =
# ==> SocPioCaptureEdge =
# ==> SocPioDirection =
# ==> SocPioFallingEdge =
# ==> SocPioGenIRQ =
# ==> SocPioInout =
# ==> SocPioInputCaptureBit =
# ==> SocPioInputOnly =
# ==> SocPioInputsSyncCapture =
# ==> SocPioIrQEdge =
# ==> SocPioIrqLevel =
# ==> SocPioOutputIndividualBits =
# ==> SocPioOutputOnly =
# ==> SocPioOutputResetValue =
# ==> SocPioRisingEdge =
#
# pio/PioMenu.java
#
# ==> ErrorCreatingHeaderAndOrCFile =
# ==> ExportC =
# ==> PioMenuBidirFunctionsRemark =
# ==> PioMenuCaptureAll =
# ==> PioMenuCaptureAny =
# ==> PioMenuCaptureBit =
# ==> PioMenuCaptureFalling =
# ==> PioMenuCaptureRising =
# ==> PioMenuEdgeCaptureRemark =
# ==> PioMenuInputDataFunctionRemark =
# ==> PioMenuIrqEdge =
# ==> PioMenuIrqLevel =
# ==> PioMenuMaskFunctionsRemark =
# ==> PioMenuOutClearRemark =
# ==> PioMenuOutputDataFunctionRemark =
# ==> PioMenuOutSetRemark =
# ==> SelectDirectoryToStoreC =
# ==> SuccesCreatingHeaderAndCFile =
#
# pio/SocPio.java
#
# ==> SocPioBidirPinx =
# ==> SocPioBidirs =
# ==> SocPioComponent =
# ==> SocPioInputPinx =
# ==> SocPioInputs =
# ==> SocPioIrqOutput =
# ==> SocPioOutputPinx =
# ==> SocPioOutputs =
# ==> SocPioResetInput =
#
# rv32im/Rv32im_riscv.java
#
# ==> Rv32imComponent =
#
# rv32im/RV32imControlTransferInstructions.java
#
# ==> Rv32imAssemblerExpectedOneOrTwoArguments =
# ==> Rv32imAssemblerExpectedTwoOrThreeArguments =
#
# rv32im/RV32imEnvironmentCallAndBreakpoints.java
#
# ==> Rv32imECABNotImplmented =
#
# rv32im/RV32imIntegerRegisterImmediateInstructions.java
#
# ==> RV32imAssemblerBUG =
#
# rv32im/RV32imLoadAndStoreInstructions.java
#
# ==> RV32imAssemblerExpectedBracketedRegister =
# ==> RV32imAssemblerExpectedImmediateIndexedRegister =
#
# rv32im/Rv32imMemoryOrderingInstructions.java
#
# ==> RV32imAssemblerNotSupportedYet =
# ==> Rv32imMOINotImplmented =
#
# Soc.java
#
# ==> SocBusComponent =
# ==> socLibrary =
#
# util/AbstractAssembler.java
#
# ==> AssemblerUnknownOpcode =
# ==> UnknownInstruction =
#
# util/Assembler.java
#
# ==> AssemblerAssumingEntryPoint =
# ==> AssemblerCannotUseInsideMacro =
# ==> AssemblerEndOfMacroNotFound =
# ==> AssemblerExpectedMacroName =
# ==> AssemblerExpectedMacroNrOfParameters =
# ==> AssemblerExpectingLabelIdentifier =
# ==> AssemblerMissingLabelBefore =
# ==> AssemblerNoExecutableSection =
# ==> AssemblerReguiresNumberAfterMath =
# ==> AssemblerUnknowCharacter =
# ==> AssemblerWrongClosingBracket =
# ==> AssemblerWrongOpeningBracket =
#
# util/AssemblerAsmInstruction.java
#
# ==> AssemblerCouldNotFindAddressForLabel =
# ==> AssemblerCouldNotFindValueForDefine =
# ==> AssemblerDivZero =
# ==> AssemblerExpectedImmediateValueAfterMath =
#
# util/AssemblerInfo.java
#
# ==> AssemblerDuplicatedLabelNotSupported =
# ==> AssemblerDuplicatedName =
# ==> AssemblerDuplicatedSectionError =
# ==> AssemblerExpectedLabel =
# ==> AssemblerExpectedLabelAndNumber =
# ==> AssemblerExpectedParameter =
# ==> AssemblerExpectingNumber =
# ==> AssemblerExpectingPositiveNumber =
# ==> AssemblerExpectingSectionName =
# ==> AssemblerExpectingString =
# ==> AssemblerMacroIncorrectNumberOfParameters =
# ==> AssemblerOverlappingSections =
# ==> AssemblerUnknownIdentifier =
# ==> AssemblerUnknownLabel =
# ==> AssemblerUnsupportedAssemblerInstruction =
# ==> AssemblerValueOutOfRange =
#
# util/AssemblerMacro.java
#
# ==> AssemblerMacroCallingEachotherDeadlock =
# ==> AssemblerMacroCannotUseRecurency =
# ==> AssemblerMacroParameterNotDefined =
#
# vga/SocVgaShape.java
#
# ==> SocVgaComponent =
#
# vga/VgaAttributes.java
#
# ==> VgaBufferAddress =
# ==> VgaInitialDisplayMode =
# ==> VgaSoftMode =
# ==> VgaStartAddress =
#
# vga/VgaMenu.java
#
# ==> VgaMenuModeSelectFunctions =
