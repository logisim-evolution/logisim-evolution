#
# bus/SocBusAttributes.java
#
SocBusTraceSize = Trace grootte:
SocBusTraceVisable = Sporen zichtbaar:
#
# bus/SocBusMenuProvider.java
#
insertTrans = Een bustransactie invoegen
SocBusMemMap = Geheugenkaart weergeven
SocBusTraceWindow = Toon bustransactie(s) spoor(en) van bustransactie(s)
SocInsertTransWindowTitle = Plaats een transactie in de bus:
TraceWindowTitleDoubleClickOnTraceToRemoveTrace = Busspoorvenster (dubbelklik op een spoor om het te verwijderen)
#
# data/SocBusInfo.java
#
SocBusNotConnected = Niet aangesloten op een bus
#
# data/SocBusStateInfo.java
#
SocBusNoTrace = Geen sporen aanwezig
SocMemMapWindowTitle = Geheugenkaart voor de bus:
SocMemoryMapOk = Sluiten
SocMemoryMapTitle = Geheugenkaart (rood geeft overlappende geheugenregio's aan):
#
# data/SocBusTransaction.java
#
SocBusStateMaster = Initiatiefnemer:
SocBusStateNoDataMax10chars = geen gegevens
SocBusStateSlave = Reageer:
SocBusStateTraceIndex = Transactie nr:
SocTransactionByteAccesNoSupport = Slave ondersteunt geen byte-toegangen.
SocTransactionByteAccesNoSupportShort = Geen byte toegang
SocTransactionHalfWordAccesNoSupport = Slaaf ondersteunt geen toegang tot halve woorden.
SocTransactionHalfWordAccesNoSupportShort = Geen HW toegang
SocTransactionMisallignedAddress = De slaaf ontdekte een verkeerd uitgelijnd adres.
SocTransactionMisallignedAddressShort = Misal. Addr.
SocTransactionMultipleSlaveAnswers = Meerdere slaven beantwoordden aan een transactie. Controleer de geheugenkaart van uw slaven.
SocTransactionMultipleSlaveAnswersShort = Meerdere slaven
SocTransactionNoBusConnected = De mastercomponent is niet aangesloten op een Soc-bus. Sluit de master aan op een buscomponent.
SocTransactionNoBusConnectedShort = Geen bus
SocTransactionNoneAtomicRW = Er wordt verzocht om een geen atomaire lees-/schrijfactie. Dit is niet toegestaan.
SocTransactionNoneAtomicRWShort = Geen atoom RW
SocTransactionNoRespons = Geen enkel slavenonderdeel beantwoordde het verzoek. Controleer het geheugenadres van de aanvraag en de geheugenkaart van uw systeem.
SocTransactionNoResponsShort = Geen reactie
SocTransactionNoSlavesAttached = Op de bus die op de master is aangesloten, zijn geen slaves aangesloten. Bevestig alsjeblieft enkele slaven aan de bus.
SocTransactionNoSlavesAttachedShort = Geen slaven
SocTransactionReadOnlyAccessError = Slave ondersteunt alleen leestoegang op dit adres.
SocTransactionReadOnlyAccessErrorShort = Alleen lezen
SocTransactionRegisterDoesNotExist = Slave ondersteunt geen toegang op dit adres.
SocTransactionRegisterDoesNotExistShort = Geen toegang
SocTransactionSuccessfull = Er is geen fout opgetreden, de transactie is succesvol.
SocTransactionSuccessfullShort = Succes
SocTransactionUnknownError = Bizar, deze foutmelding zou nooit moeten voorkomen en vertegenwoordigt een bug in logisim.
SocTransactionUnknownErrorShort = BUG!
SocTransactionWordAccesNoSupport = Slaaf ondersteunt geen woordtoegang.
SocTransactionWordAccesNoSupportShort = Geen woord toegang
SocTransactionWriteOnlyAccessError = Slaaf ondersteunt geen leesactie op dit adres.
SocTransactionWriteOnlyAccessErrorShort = Alleen schrijven
#
# data/SocMemMapModel.java
#
SocMemMapEmpty = Leeg (geen slaven)
SocMemMapEndAddress = Eindadres:
SocMemMapSlaveName = Naam van het onderdeel:
SocMemMapStartAddress = Start adres:
#
# data/SocSimulationManager.java
#
SocBusManagerSelectBus = Selecteer een bus om aan te sluiten op
SocBusSelectAttr = Aangesloten bus
SocBusSelectAttrClick = Klik om te selecteren
SocManagerNoBusses = Geen bussen beschikbaar, voeg een SOC-bus toe aan uw schema.
#
# data/SocUpMenuProvider.java
#
ProcReadElfLoadedAndEntrySet = Heeft met succes het elfenbestand in het geheugen geladen.\nHet invoerpunt van het uitvoerbare bestand is ingesteld op de processor.\n\nBelangrijk:\n   Aangezien het elfendossier geen informatie bevat over de uitzonderingsvectoren\n   moet je ze zelf controleren!
SocUpMenuAsmWindow = Open assembler
SocUpMenuCpuAsmWindowTitle = Assembleur voor cpu :
SocUpMenuCpuProgramWindowTitle = demonteerder voor cpu:
SocUpMenuCpuStateWindowTitle = processor staat voor cpu :
SocUpMenuErrorReadingElfTitle = Fout in het lezen van het elfenbestand
SocUpMenuReadElf = Lees elfenbestand
SocUpMenuSelectElfFile = Selecteer elfenbestand om te importeren
SocUpMenuShowProgram = Toon geladen programma
SocUpMenuShowState = CPU-status tonen
#
# data/SocUpSimulationState.java
#
SocUpSimHalt = Gehouden
SocUpSimHaltBreak = Breekpunt
SocUpSimHaltError = Fout
SocUpSimRunning = Lopend
SocUpSimStateLabel = Sim staat:
SocUpSimstateStart = Begin
SocUpSimstateStop = Pauze
SocUpUnknown = Onbekend
#
# file/ElfHeader.java
#
ElfHeaderEIClassError = Geen 32 of 64 bit elfenbestand...
ElfHeaderEIDataError = Niet een klein of groot endiaans gecodeerd bestand
ElfHeaderIncorrectEISize = De grootte van de EI-sectie is onjuist.
ElfHeaderIncorrectESize = De grootte van de E-sectie is onjuist.
ElfHeaderIncorrectMagic = Het bestand bevat niet de juiste elfenmagie; waarschijnlijk geen elfenbestand.
ElfHeaderNoErrors = De koptekst is correct
ElfHeaderReadingFileError = Fout bij het lezen van het bestand
ElfHeaderUnknownArchitecture = Onbekende architectuur
#
# file/ElfProgramHeader.java
#
ProgHeaderNotFound = Programma koptekst niet gevonden.
ProgHeaderReadError = Fout in de koptekst van het leesprogramma.
ProgHeaderSizeError = Grootteverstoring in de koptekst van het programma.
ProgHeaderSuccess = Succes
#
# file/ElfSectionHeader.java
#
ElfSectHeadMultiStringtabError = Meerdere stringtabellen gevonden, die momenteel niet worden ondersteund.
ElfSectHeadMultiSymtabError = Meerdere symbooltabellen gevonden, die momenteel niet worden ondersteund;
ElfSectHeadNotFound = Sectiekoptekst niet gevonden.
ElfSectHeadReadError = Fout leessectie koptekst.
ElfSectHeadSizeError = Omvangmismatch in de koptekst van de sectie.
ElfSectHeadStingIdxError = Error String Index.
ElfSectHeadStingNotFound = Sectie naam niet gevonden.
ElfSectHeadStingReadError = Fout bij het lezen van de tabel met tekenreeksen.
ElfSectHeadStingTypeError = Fout van het snaartype.
ElfSectHeadSuccess = Succes
ElfSymTableNotFound = Kon de tabel met symbolen niet vinden.
ElfSymTableReadError = Kon de symboollijst niet lezen.
#
# file/ProcessorReadElf.java
#
ProcReadElf64BitNotSupportedYet = Logisim ondersteunt nog geen 64-bit elfenbestanden.
ProcReadElfArchError = Elf dossier is voor een "%s" processor, terwijl het voor een "%s" processor zou moeten zijn.
ProcReadElfEndianMismatch = Endian mismatch, elfenbestand is "%s" terwijl de verwerker om "%s" heeft gevraagd.
ProcReadElfErrorOpeningFile = Onmogelijk om elfen-bestand te openen
ProcReadElfLoadableSectionNotFound = Laadbare sectie niet gevonden in het elfenbestand.
ProcReadElfLoadableSectionReadError = Fout bij het lezen van het belastbare gedeelte.
ProcReadElfLoadableSectionSizeError = Grootteafwijking in belastbaar gedeelte.
ProcReadElfLoadableSectionTooBig = De grootte van het laadbare gedeelte is groter dan de grootte die wordt ondersteund door logisim.
ProcReadElfMemoryError = Er is een fout opgetreden bij het schrijven van een belastbaar gedeelte naar het geheugen.\nZorg ervoor dat u een SOC-geheugencomponent voor het geheugengebied beschikbaar hebt:\n%s....%s....%s
ProcReadElfNotExecutable = Het elfenbestand is geen uitvoerbaar bestand...
ProcReadElfSuccess = Succes
#
# gui/AssemblerPanel.java
#
AsmPanAmsFileExtention = Montagebestanden (.asm,.S)
AsmPanAssemble = Verzamel de code (ALT-A)
AsmPanDocumentChangedSave = Zijn er wijzigingen in uw document, opslaan?
AsmPanErrorCreateFile = Niet in staat om het montagebestand aan te maken.
AsmPanErrorReadingFile = Niet in staat om het bestand te lezen
AsmPanNextError = Ga naar de volgende fout (CTRL-N)
AsmPanOpenFile = Een bestand lezen (CTRL-L)
AsmPanPreviousError = Ga naar vorige fout (CTRL-P)
AsmPanReadAsmFile = Selecteer een te lezen bestand
AsmPanRun = Voer de code (ALT-R) uit (ALT-R)
AsmPanSaveAsmFile = Selecteer een bestand om op te slaan
AsmPanSaveFile = Bestand opslaan (CTRL-S)
AsmPanSaveFileAs = Bestand opslaan als
AsmPanSaveFirstBeforeOpen = Er zijn veranderingen in uw document\nWilt u ze opslaan voordat u een nieuw bestand opent?
AssemblerAssembleSuccess = Succes!\nGeen fouten gevonden in uw code.
AssemblerRunSuccess = Het programma met succes in het geheugen geladen.\nOm het programma uit te voeren, zorg er dan voor dat u dat doet:\na) u schakelt de tikken in\nb) u stelt de cpu in op de lopende modus
AssemblerUnableToDownload = Kan het programma niet in het geheugen opslaan,\nzorg ervoor dat u voldoende geheugen beschikbaar hebt...\nop de juiste geheugenplaatsen.
RV32imAsmLineIndicator = Lijn %d van %d
#
# gui/BreakpointPanel.java
#
RV32imRemoveBreakPoint = Breekpunt verwijderen
RV32imSetBreakpoint = Breekpunt toevoegen
#
# gui/BusTransactionInsertionGui.java
#
SocTransInsAddress = Busadres: 0x
SocTransInsAtomicRequest = Atoomtransactie
SocTransInsByteAccess = Byte transactie
SocTransInsHalfWordAccess = Halve woordtransactie (2 bytes)
SocTransInsInputData = Gegevens om te schrijven: 0x
SocTransInsInsertTransaction = Plaats de transactie in de bus
SocTransInsManual = Handleiding ingevoegd
SocTransInsReadData = Gegevens geretourneerd:
SocTransInsReadRequest = Aanvraag voor het lezen van de bus
SocTransInsTransResultTitle = Resultaat van de ingevoegde transactie:
SocTransInsWordAccess = Woordtransactie (4 bytes)
SocTransInsWriteRequest = Schrijfaanvraag voor de bus
#
# gui/CpuDrawSupport.java
#
Rv32imAsmInstruction = Montage:
Rv32imBinInstruction = Op code:
Rv32imEmptyTrace = Geen uitvoeringssporen beschikbaar
Rv32imExecutionTrace = Uitvoeringsspoor (laatst bovenaan uitgevoerd):
Rv32imRegisterFile = Registreer bestand:
#
# gui/SocCPUShape.java
#
RV32ShapeSimControl = Simulatiecontrole
#
# jtaguart/JtagUart.java
#
JtagUartClearKeyb = Duidelijk toetsenbord
JtagUartKeybAvailable = Toetsenbordgegevens beschikbaar
JtagUartKeybData = Toetsenbordgegevens
JtagUartKeybReadEnable = Toetsenbord lezen inschakelen
JtagUartTtyClear = TTY duidelijk
JtagUartTtyData = TTY gegevens
JtagUartTtyWrite = TTY gegevens schrijven
SocJtagUartComponent = Jtag Uart component
#
# jtaguart/JtagUartAttributes.java
#
JtagSize1024 = 1k
JtagSize128 = 128
JtagSize16 = 16
JtagSize16384 = 16k
JtagSize2048 = 2k
JtagSize256 = 256
JtagSize32 = 32
JtagSize32768 = 32k
JtagSize4096 = 4k
JtagSize512 = 512
JtagSize64 = 64
JtagSize8 = 8
JtagSize8192 = 8k
JtagUartReadIrqThreshold = IRQ-drempel lezen
JtagUartWriteIrqThreshold = IRQ-drempel schrijven
UartJtagREADFifoSize = Lees de FIFO grootte:
UartJtagWriteFifoSize = Schrijf FIFO grootte:
#
# memory/SocMemory.java
#
SocMemBase = Basis:
SocMemoryComponent = Geheugensimulator
SocMemSizeStr = Grootte:
#
# memory/SocMemoryAttributes.java
#
SocMemSize = Byte adres breedte:
SocMemStartAddress = Start adres:
#
# nios2/Nios2.java
#
Nios2A = A
Nios2B = B
Nios2C = C
Nios2Component = Nios2s simulator
Nios2Dataa = Gegevens A
Nios2Datab = Gegevens B
Nios2Done = Klaar
Nios2N = N
Nios2ReadRa = Lees Ra
Nios2ReadRb = Lees Rb
Nios2Result = Resultaat
Nios2Start = Begin
Nios2WriteRc = Schrijf Rc
Rv32imClockInput = Klokingang
Rv32imIrqInput = IRQ input %s
Rv32imResetInput = Invoer resetten
#
# nios2/Nios2Attributes.java
#
nios2BreakVector = Breukvector
rv32ExceptionVector = Uitzonderlijke vector
rv32imIrqWidth = Aantal IRQ-regels
rv32ResetVector = Het terugstellenvector
rv32StateVisable = Staat zichtbaar:
#
# nios2/Nios2CustomInstructions.java
#
AssemblerExpectedFourArguments = Verwachte vier argumenten
Nios2DonePinError = Gereed pin niet gedefinieerd of in fouttoestand kan niet verder gaan.\n Controleer de gedaane pin.
#
# nios2/Nios2DataTransferInstructions.java
#
LoadStoreErrorInReadTransaction = Fout bij het uitvoeren van een belasting vanuit het geheugensysteem:
LoadStoreErrorInWriteTransaction = Fout bij het uitvoeren van een opslag in het geheugensysteem:
#
# nios2/Nios2OtherControlInstructions.java
#
AssemblerExpectedImmediateValue = Verwachte onmiddellijke waarde
AssemblerExpectedNoArguments = Verwacht geen argumenten
AssemblerExpectedOneArgument = Verwacht één argument
AssemblerExpectedTwoArguments = Verwachte twee argumenten
AssemblerExpectedZeroOrOneArgument = Verwacht geen of één argument
AssemblerImmediateOutOfRange = De directe waarde ligt buiten het bereik van de klant.
AssemblerUnknownRegister = Onbekend register
Nios2AssemblerExpectedBracketedRegister = Verwacht een register met haakjes, bijv. (r1)
Nios2AssemblerExpectedImmediateIndexedRegister = Verwacht een onmiddellijk geïndexeerd register, bv. 5(r1)
Nios2CannotUseControlRegister = Kan in dit verband geen controleregister gebruiken
Nios2CannotUseCustomRegister = Kan in deze context geen gebruik maken van een aangepast register
Nios2ExpectedControlRegister = Verwacht een controleregister (bv. ctl4)
#
# nios2/Nios2ProgramControlInstructions.java
#
AssemblerExpectedThreeArguments = Verwachte drie argumenten
AssemblerExpextedImmediateOrLabel = Verwacht een onmiddellijke waarde of een label
#
# nios2/Nios2State.java
#
Nios2Bstatus = status
Nios2Estatus = estatus
Nios2Status = stand
RV32imBreakPointReached = De uitvoering wordt gepauzeerd vanwege een breekpunt dat in de huidige instructie is ingesteld.
RV32imFetchExecutionError = Fout in het uitvoeren van de opgehaalde instructie
RV32imFetchInvalidInstruction = Ongeldige instructie opgehaald
RV32imFetchInvInstrAsm = Ongeldige instructie!
RV32imFetchTransaction = -> Transactiefout ophalen.
Rv32imProgramCounter = pc:
SocHiddenForFasterSimulation = Verborgen inhoud voor een snellere simulatie
#
# nios2/Nios2Support.java
#
AssemblerExpectedRegister = Verwacht een register
#
# pio/PioAttributes.java
#
SicPioIrqType = Irq type:
SocPioAnyEdge = Elke rand
SocPioBidir = Bidirectionele (tristaat-)poorten
SocPioCaptureEdge = Type vangen:
SocPioDirection = Richting:
SocPioFallingEdge = Vallende rand
SocPioGenIRQ = IRQ ingeschakeld:
SocPioInout = Zowel de ingangs- als de uitgangspoorten
SocPioInputCaptureBit = Leg de bit-clearing vast:
SocPioInputOnly = Alleen ingangspoorten
SocPioInputsSyncCapture = Synchroniseren, vangen:
SocPioIrQEdge = Rand
SocPioIrqLevel = Niveau
SocPioOutputIndividualBits = Uitgangsbit ingesteld/ontruimd:
SocPioOutputOnly = Alleen uitgangspoorten
SocPioOutputResetValue = Uitgang reset waarde:
SocPioRisingEdge = Opgaande rand
#
# pio/PioMenu.java
#
ErrorCreatingHeaderAndOrCFile = Kon geen header en/of c-bestand maken!
ExportC = C-sjablonen exporteren
PioMenuBidirFunctionsRemark = /* Met de volgende functies kan het bidirectionele register ingesteld of uitgelezen worden\n * een 1 geeft aan dat het respect. bit is een uitgang, een 0 geeft aan dat het een ingang is.\n * Opmerking: alleen de lagere %s bits worden gebruikt.\n */
PioMenuCaptureAll = alle bits in het capture register worden gewist, onafhankelijk van de waarde van de parameter "waarde".
PioMenuCaptureAny = ten minste één wijziging van 0 naar 1 of van 1 naar 0
PioMenuCaptureBit = de bits in het capture register die in de parameter "waarde" 1 staan, worden gewist.
PioMenuCaptureFalling = ten minste één wijziging van 1 naar 0
PioMenuCaptureRising = ten minste één wijziging van 0 naar 1
PioMenuEdgeCaptureRemark = /* Met de volgende functies kan het randschapsregister worden gewist of uitgelezen\n * als het randregister wordt uitgelezen, geeft een 1 op een positie aan dat de\n * respectievelijke input heeft een hoed %s,\n * anders is de betreffende ingang niet veranderd.\n *\n * Schrijven naar dit register zal %s.\n * Opmerking: alleen de lagere %s bits worden gebruikt.\n */
PioMenuInputDataFunctionRemark = /* Met de volgende functie kunnen de ingangswaarden van de PIO als volgt worden ingesteld\n * voorgelezen.\n * Deze functie geeft de desbetreffende waarde terug\n * Opmerking: alleen de lagere %s-bits zijn geldig.\n */
PioMenuIrqEdge = overeenkomstige bit in het vangstregister
PioMenuIrqLevel = overeenkomstige input
PioMenuMaskFunctionsRemark = /* Met de volgende functies kan het interruptmaskerregister worden ingesteld of uitgelezen.\n * Een 1 op een specifieke locatie geeft aan dat er een interrupt wordt gegenereerd.\n * indien het %s gelijk is aan 1.\n * Opmerking: alleen de lagere %s bits worden gebruikt.\n */
PioMenuOutClearRemark = /* Met de volgende functie dwingen de bits die in de parameter "waarde" 1 staan, de bits die in de parameter "waarde" staan\n * de overeenkomstige output tot 0\n * Opmerking: alleen de lagere %s bits worden gebruikt.\n */
PioMenuOutputDataFunctionRemark = /* Met de volgende functie kunnen de uitgangswaarden van de PIO als volgt worden weergegeven\n * ingesteld.\n * Deze functie neemt de nieuwe uitgangswaarde als parameter "waarde".\n * Opmerking: alleen de lagere %s-bits van de opgegeven parameter "waarde" zijn geldig.\n */
PioMenuOutSetRemark = /* Met de volgende functie dwingen de bits die in de parameter "waarde" 1 staan, de bits die in de parameter "waarde" staan\n * de overeenkomstige output tot 1\n * Opmerking: alleen de lagere %s bits worden gebruikt.\n */
SelectDirectoryToStoreC = Directory instellen om de C-templates op te slaan
SuccesCreatingHeaderAndCFile = De bestanden zijn met succes aangemaakt:\n%s\nen\n%s
#
# pio/SocPio.java
#
SocPioBidirPinx = Bidir bit %s
SocPioBidirs = Bi-directionele pinnen
SocPioComponent = Parallelle in-/uitbreiding van de in-/uitgang
SocPioInputPinx = Ingangsbit %s
SocPioInputs = Invoerpinnen
SocPioIrqOutput = Irq uitgang
SocPioOutputPinx = Uitgangsbit %s
SocPioOutputs = Uitgangspinnen
SocPioResetInput = Invoer resetten
#
# rv32im/Rv32im_riscv.java
#
Rv32imComponent = Risc V IM simulator
#
# rv32im/RV32imControlTransferInstructions.java
#
Rv32imAssemblerExpectedOneOrTwoArguments = Verwachte één of twee argumenten
Rv32imAssemblerExpectedTwoOrThreeArguments = Verwachte twee of drie argumenten
#
# rv32im/RV32imEnvironmentCallAndBreakpoints.java
#
Rv32imECABNotImplmented = Momenteel worden de milieuoproep- en onderbrekingspunten niet uitgevoerd.
#
# rv32im/RV32imIntegerRegisterImmediateInstructions.java
#
RV32imAssemblerBUG = BUG!
#
# rv32im/RV32imLoadAndStoreInstructions.java
#
RV32imAssemblerExpectedBracketedRegister = Verwacht een register met haakjes, bijv. (x1)
RV32imAssemblerExpectedImmediateIndexedRegister = Verwacht een onmiddellijk geïndexeerd register, bv. 5(x1)
#
# rv32im/Rv32imMemoryOrderingInstructions.java
#
RV32imAssemblerNotSupportedYet = Niet-ondersteunde asm op code
Rv32imMOINotImplmented = Momenteel zijn de instructies voor het bestellen van het geheugen niet geïmplementeerd.
#
# Soc.java
#
SocBusComponent = SOC-bussimulator
socLibrary = Systeem op chip componenten
#
# util/AbstractAssembler.java
#
AssemblerUnknownOpcode = Onbekende opcode
UnknownInstruction = Onbekende instructie
#
# util/Assembler.java
#
AssemblerAssumingEntryPoint = Uitgaande van het laagste adres met een instructie als ingangspunt.\nOm er zeker van te zijn dat uw cpu op het juiste adres begint met het uitvoeren van de uitvoering op het juiste adres.\nvoeg op de locatie een label toe met de naam '_start'.\nwaar je cpu het programma moet gaan uitvoeren.
AssemblerCannotUseInsideMacro = Deze constructie kan niet worden gebruikt binnen een macro-definitie.
AssemblerEndOfMacroNotFound = Kon het einde van de macro-definitie niet vinden
AssemblerExpectedMacroName = Verwachtte een naam van de macro
AssemblerExpectedMacroNrOfParameters = Verwacht het aantal macroparameters
AssemblerExpectingLabelIdentifier = Verwachting van een label
AssemblerMissingLabelBefore = Voor deze operator moet er een label zijn....
AssemblerNoExecutableSection = Geen instructies gevonden die kunnen worden uitgevoerd.
AssemblerReguiresNumberAfterMath = Na een wiskundige ingreep moet een nummer gevolgd worden door een nummer
AssemblerUnknowCharacter = Onbekend karakter
AssemblerWrongClosingBracket = Deze sluitbeugel wordt niet ondersteund.
AssemblerWrongOpeningBracket = Deze openingsbeugel wordt niet ondersteund.
#
# util/AssemblerAsmInstruction.java
#
AssemblerCouldNotFindAddressForLabel = Kon geen adres voor dit label bepalen
AssemblerCouldNotFindValueForDefine = Kon geen definitie van deze parameter vinden
AssemblerDivZero = Verdeel door een nulfout
AssemblerExpectedImmediateValueAfterMath = Verwachtte een onmiddellijke waarde na een wiskundige ingreep
#
# util/AssemblerInfo.java
#
AssemblerDuplicatedLabelNotSupported = Labelnamen moeten uniek zijn, meerdere definities van dit label zijn te vinden.
AssemblerDuplicatedName = Kan niet dezelfde naam gebruiken voor een .equ en een label.
AssemblerDuplicatedSectionError = Sectienamen moeten uniek zijn, meerdere sectienamen moeten met deze naam gevonden worden.
AssemblerExpectedLabel = Verwacht een label
AssemblerExpectedLabelAndNumber = Verwacht een label gevolgd door een onmiddellijke waarde
AssemblerExpectedParameter = Verwachtte een parameter op deze positie
AssemblerExpectingNumber = Verwacht een aantal
AssemblerExpectingPositiveNumber = Verwacht een positief getal
AssemblerExpectingSectionName = Verwacht een naam voor deze sectie
AssemblerExpectingString = Verwacht een tekenreeks
AssemblerMacroIncorrectNumberOfParameters = Onjuist aantal opgegeven macroparameters
AssemblerOverlappingSections = Deze sectie overlapt met een andere sectie
AssemblerUnknownIdentifier = Ik ken deze identificator niet...
AssemblerUnknownLabel = Dit label is niet gedefinieerd, dus ik kan het niet gebruiken.
AssemblerUnsupportedAssemblerInstruction = Deze montagehandleiding is niet bekend.
AssemblerValueOutOfRange = Waarde is buiten bereik
#
# util/AssemblerMacro.java
#
AssemblerMacroCallingEachotherDeadlock = Macro's bellen elkaar op, waardoor een impasse ontstaat...
AssemblerMacroCannotUseRecurency = Macro belt zichzelf en veroorzaakt een impasse....
AssemblerMacroParameterNotDefined = Deze macro-parameter is niet gedefinieerd, controleer het aantal parameters in uw macro-definitie.
#
# vga/SocVgaShape.java
#
SocVgaComponent = VGA-scherm
#
# vga/VgaAttributes.java
#
VgaBufferAddress = Pixelbuffer Adres:
VgaInitialDisplayMode = Initiële modus:
VgaMode1024x768 = 1024x768
VgaMode160x120 = 160x120
VgaMode320x240 = 320x240
VgaMode640x480 = 640x480
VgaMode800x600 = 800x600
VgaSoft1024x768 = Software 1024x768:
VgaSoft160x120 = Software 160x120:
VgaSoft320x240 = Software 320x240:
VgaSoft640x480 = Software 640x480:
VgaSoft800x600 = Software 800x600x600:
VgaStartAddress = Basis adres:
#
# vga/VgaMenu.java
#
VgaMenuModeSelectFunctions = /* Met de volgende functies kan de vga-modus worden gemanipuleerd.\n * Het lezen van de vga-modus geeft de ondersteunde modi weer (zie hierboven definieert de mogelijke modi).\n * Het schrijven van een ondersteunde modus zal de weergavemodus van het VGA-display veranderen.\n */


