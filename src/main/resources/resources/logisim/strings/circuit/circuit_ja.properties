#
# Analyze.java
#
defaultInputLabels = a,b,c,d,e,f,g,h
defaultOutputLabels = x,y,z,u,v,w,s,t
#
# AnalyzeException.java
#
analyzeCannotHandleError = %s が原因で式の代わりに真理値表を計算しています。
analyzeCircularError = 円形参照が検出されました; 代わりに真理値表を計算しています。
analyzeConflictError = 出力が競合していることが検出されました; 代わりに真理値表を計算しています。
#
# appear/AppearanceAnchor.java
#
appearanceFacingAttr = 外観の向き
circuitAnchor = アンカー
#
# appear/AppearancePort.java
#
circuitPort = ポート
#
# appear/DynamicElement.java
#
circuitLabelBottom = 下
circuitLabelCenter = 中央
circuitLabelLeft = 左
circuitLabelNone = ラベル無し
circuitLabelRight = 右
circuitLabelTop = 上
circuitShowLabelAttr = ラベル位置
#
# Circuit.java
#
changeComponentAttributesAction = コンポーネントの属性を変更するアクション
ComponentLabelCollisionError = 回路内の1つのコンポーネントに、新しく配置されたコンポーネントのコンポーネント名と同じラベルがあります。このラベルは削除されました!
ComponentLabelEqualCircuitName = 指定されたラベルが回路名と同じです。別の名前を指定してください。
ComponentLabelNameError = 回路内で使用されているコンポーネント名に対応したラベルです。\nコンポーネント名と一致しないラベルを使用してください。
UsedLabelNameError = このラベルが付いている部品は既に存在します\n 回路内では一意なラベルを使用してください。
#
# CircuitAttributes.java
#
circuitAppearanceAttr = 外観
circuitCustomAppearance = カスタム
circuitIsVhdl = VHDLアーキテクチャへの参照?
circuitLabelAttr = 共有ラベル
circuitLabelDirAttr = 共有ラベルの向き
circuitLabelFontAttr = 共有ラベルフォント
circuitLabelLocAttr = ラベルの位置
circuitName = 回路名
circuitNamedBoxFixedSize = 固定のボックスサイズを使用します。
CircuitSameInputOutputLabel = 回路名は入力または出力のラベルと同じです。他の回路名を指定してください。
circuitVhdlPath = VHDLアーキテクチャ・ファイルのパス
EmptyNameError = 各回路には名前が必要で、空の回路を許可することはできません。空でない回路名を指定してください。
#
# CircuitMutation.java
#
unknownChangeAction = 回路の変更
#
# RadixOption.java
#
radix10Signed = 符号付き10進数
radix10Unsigned = 符号なし10進数
radix16 = 16進数
radix2 = 2進数
radix8 = 8進数
radixAttr = 基数
#
# Splitter.java
#
splitterCombinedTip = スプリッターの結合端
splitterSplit0Tip = 結合端からのビットなし
splitterSplit1Tip = 結合端からのビット %s
splitterSplitManyTip = 結合端からのビット %s
#
# SplitterAttributes.java
#
splitterAppearanceAttr = 外観
splitterAppearanceCenter = 中央揃え
splitterAppearanceLeft = 左利き向き
splitterAppearanceLegacy = レガシー
splitterAppearanceRight = 右利き向き
splitterBitAttr = ビット %s
splitterBitNone = 無し
splitterBitWidthAttr = ビット幅
splitterFanOutAttr = ファンアウト
splitterSpacing = 間隔
#
# SplitterDistributeItem.java
#
splitterDistributeAscending = 昇順割当
splitterDistributeDescending = 降順割当
#
# SplitterFactory.java
#
splitterComponent = スプリッタ
#
# SubcircuitFactory.java
#
subcircuitViewItem = %sの表示
#
# Wire.java
#
wireDirectionAttr = 方向
wireDirectionHorzOption = 水平方向
wireDirectionVertOption = 垂直方向
wireLengthAttr = 長さ
#
# WireFactory.java
#
wireComponent = ワイヤ


