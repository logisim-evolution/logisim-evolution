fontBoldFont = 粗体
fontItalicFont = 斜体
fontExampleLineText = The quick brown fox jumps over the lazy dog. \n敏捷的棕毛狐狸从懒狗身上跃过。
#
# appear/AppearanceEditHandler.java
#
deleteSelectionAction = 删除选定内容
duplicateSelectionAction = 重复选择
pasteClipboardAction = 粘贴剪贴板
#
# appear/ClipboardActions.java
#
copySelectionAction = 复制选定内容
cutSelectionAction = 剪切选择
#
# appear/RevertAppearanceAction.java
#
revertAppearanceAction = 还原外观
#
# appear/ShowStateDialog.java
#
showStateDialogCancelButton = 取消
showStateDialogEmptyNode = 空电路%s
showStateDialogNodeTitle = %s 的状态
showStateDialogOkButton = 好的
showStateDialogTitle = %s 的状态
#
# chronogram/chronogui/ChronoFrame.java
#
ButtonExport = 导出.
ButtonLoad = 加载文件
ChronoTitle = 时序图
ChronoHelp = 实时显示信号值。
ChronoPrintTitle = 时序图：%s，共%s
ButtonExportAsImage = 导出为图像
InputFileLoaded = 加载的文件：
InputFileNoSysclk = 未找到 sysclk 信号
SimStatusCurrentScheme = 模拟当前方案
SimStatusName = 状态：
SimStatusNoSignal = 在模拟->时刻表中未选择任何信号
SimStatusNoSysclk = 在模拟->时刻表中添加‘sysclk’信号以供实时使用，或加载文件
NoSignalsSelected = 当前未选择任何信号。|将管脚添加到电路，或选择信号|使用“Options”面板。
optionsTab = 选项
optionsHelp = 配置时序图信号、模式和时序
selectionLabel = 信号和格式
modeLabel = 日志记录模式
timingLabel = 计时选项
historyLabel = 历史
historyUnlimited = 存储无限历史记录
historyLimit = 要存储的最近值数：
timeScale = 时间尺度：
gateDelay = 闸门延迟：
cycleLength = 时钟周期：%s 节拍
nsFormat = %s ns
usFormat = %s \u00b5s
msFormat = %s ms
sFormat = %s s
perSecond = 每秒
perTick = 每刻度
stepTime = 定格模式
stepCoarse = 粗粒度摘要
stepCoarseDescription = 只有当所有信号都稳定下来时，才会捕获数据，而忽略传播过程中可能发生的任何瞬时信号波动。每个捕获的值都会被记录，就好像它在 %s 内保持稳定一样。
fineDetail = 捕获细粒度的细节
stepFineDescription = 每当任何信号值发生变化（包括传播过程中可能发生的任何瞬时信号波动）时，都会捕获数据。瞬时波动被记录为门延迟为%s，稳定信号被记录为保持稳定达%s。
realTime = 连续实时模式
realCoarse = 粗粒度摘要
realCoarseDescription = 每当模拟器启用时，都会连续捕获数据，但会忽略瞬态信号波动。实时的每一秒记录为模拟电路时间的%s。
realFine = 细粒度细节
realFineDescription = 无论何时启用模拟器，都会连续捕获数据，包括瞬态信号波动。实时的每一秒记录为模拟电路时间的%s。
clockTime = 时钟模式
clockCoarse = 粗粒度摘要
clockCoarseDescriptionDual = 在每个时钟转换时捕获数据，忽略转换之间或传播期间可能发生的任何瞬时波动。每个时钟周期被记录为每个周期花费%s（每个节拍%s）。
clockCoarseDescriptionRising = 在每个上升时钟转换时捕获数据，忽略转换之间或传播期间可能发生的任何瞬时波动。每个时钟周期被记录为每个周期花费%s（每个节拍%s）。
clockCoarseDescriptionFalling = 在每个下降时钟转换时捕获数据，忽略转换之间或传播期间可能发生的任何瞬时波动。每个时钟周期被记录为每个周期花费%s（每个节拍%s）。
clockCoarseDescriptionHigh = 只有在时钟较高时才会连续捕获数据，而忽略传播过程中或时钟较低时可能发生的任何瞬态信号波动。时钟高电平时的更改被记录为门延迟为%s，每个时钟周期被记录为每个周期花费%s（每个节拍%s）。
clockCoarseDescriptionLow = 只有在时钟较低时才会连续捕获数据，而忽略传播过程中或时钟较高时可能发生的任何瞬态信号波动。时钟较低时的更改被记录为门延迟为%s，每个时钟周期被记录为每个周期花费%s（每个节拍%s）。
clockFine = 细粒度细节
clockFineDescription = 每当任何信号值发生变化（包括传播过程中可能发生的任何瞬时信号波动）时，都会捕获数据。瞬时波动的记录方式就像栅极延迟是 %s 一样，每个时钟周期的记录方式是每个周期花费 %s 时间（每个刻度%s）。
clockSourceLabel = 时钟源：
clockSourceNone = 不适用
selectClockDriverMessage = 此功能需要时钟组件，但在电路中找不到。向电路添加时钟组件，或选择下面的一个输入作为时钟。
selectClockObserverMessage = 选择要用作主时钟的时钟或信号。
selectClockMissingMessage = 此模式需要时钟组件，但在电路中找不到。向电路添加时钟组件，或选择以下信号之一作为时钟。
selectClockMultipleMessage = 该电路包含多个时钟。选择下面的一个时钟或信号作为主时钟。
clockDisciplineLabel = 时钟纪律：
clockDisciplineRising = 上升沿捕获
clockDisciplineFalling = 下降沿捕获
clockDisciplineDual = 在两边都捕获
clockDisciplineHigh = 在时钟高电平期间捕获
clockDisciplineLow = 在时钟低电平期间捕获
#
# chronogram/chronogui/LeftPanel.java
#
SignalName = 信号名称
SignalValue = 信号值
#
# chronogram/chronogui/PopupMenu.java
#
BusExpand = 扩展
BusFormat = 格式化
#
# generic/AttributeSetTableModel.java
#
attributeChangeInvalidError = 属性未更改，因为请求无效
FPGA_Supported = 是否支持 FPGA：
#
# generic/AttrTable.java
#
attributeChangeInvalidTitle = 数值无效
attributeDialogTitle = 选择数值
#
# generic/ZoomControl.java
#
zoomShowGrid = 切换是否显示网格
zoomAuto = 自动
#
# hex/Clip.java
#
hexPasteErrorTitle = 粘贴错误
hexPasteSupportedError = 无法将剪贴板内容粘贴到编辑器中。
hexPasteTooSmall = 剪贴板（%d 字）太小，无法填充所选区（%d 字）。还是要粘贴吗？
#
# hex/HexFile.java
#
confirmOverwriteMessage = 该文件已存在。是否要覆盖它？
confirmOverwriteTitle = 确认覆盖
hexFileOpenError = 无法打开文件：%s
hexFileWriteError = 写入文件时出错：%s
hexFormatTitle = HEX 文件格式
ramLoadDialogTitle = 加载内存映像
ramLoadErrorTitle = 内存映像加载错误
ramSaveDialogTitle = 保存内存映像
ramSaveErrorTitle = 内存图像保存错误
#
# hex/HexFrame.java
#
closeButton = 关闭窗口
hexFrameMenuItem = HEX 编辑
hexFrameTitle = HEX 编辑
openButton = 打开…
saveButton = 保存…
#
# log/FilePanel.java
#
fileAppendOption = 附加
fileCancelOption = 取消
fileCannotWriteMessage = 您没有写入“%s”的权限。
fileCannotWriteTitle = 文件不可用
fileDisableButton = 禁用
fileDisabled = 文件输出已禁用。
fileEnableButton = 启用
fileEnabled = 文件输出已启用。
fileExistsMessage = 文件“%s”已存在。
fileExistsTitle = 文件已存在
fileHeaderCheck = 包括标题行
fileHelp = 配置文件输出。
fileLabel = 文件：
fileOverwriteOption = 覆盖
fileSelectButton = 选择.
fileTab = 文件
#
# log/LogFrame.java
#
logFrameMenuItem = %s：时序图
logFrameTitle = 时序图%s（共%s）
addRemoveSignals = 添加或删除信号
#
# log/SelectionPanel.java
#
selectionTab = 信号
selectionHelp = 选择要查看的信号。
selectionDesc = 拖动信号以选择或重新排列。
exploreLabel = 电路中提供的信号：
listLabel = 要查看的信号：
timeSelectionClock = 选择您的时钟：
timeSelectionEnable = 启用时间选择
timeSelectionFrequency = 频率：
#
# log/TablePanel.java
#
tableHelp = 查看最近值的日志。
tableTab = 表格
#
# log/ValueTable.java
#
tableEmptyMessage = 所选内容为空。
tableHeaderHelp = 基数：
#
# main/AttrTableCircuitModel.java
#
cannotModifyCircuitError = 此电路不能修改。
changeCircuitAttrAction = 更改线路
circuitAttrTitle = 电路：%s
#
# main/AttrTableComponentModel.java
#
changeAttributeAction = 更改属性
#
# main/AttrTableSelectionModel.java
#
hdlAttrTitle = VHDL 实体：%s
selectionAttributeAction = 更改选择属性
selectionMultiple = %s×%s
selectionVarious = 各种项目×%s
#
# main/Canvas.java
#
canvasExceptionError = 模拟因内部错误而停止
canvasOscillationError = 明显的振荡
canvasWidthError = 宽度不兼容
#
# main/ExportImage.java
#
couldNotCreateFile = 无法创建该文件。
exportEmptyCircuitsMessage = 没有非空线路可供导出。
exportEmptyCircuitsTitle = 无法导出
exportGifFilter = GIF 文件（*.gif）
exportImageDirectorySelect = 选择导出目录
exportImageProgress = 正在计算图片…
exportImageSelect = 导出图片
exportJpgFilter = JPEG 文件（*.jpeg，*.jpg）
exportNewDirectoryErrorMessage = 无法创建目录。
exportNewDirectoryErrorTitle = 无法创建目录
exportPngFilter = PNG 文件（*.png）
exportSvgFilter = SVG 文件（*.svg）
exportTikZFilter = TikZ 图片文件（*.tex）
labelCircuits = 线路：
labelImageFormat = 图像格式：
labelPrinterView = 打印机视图：
labelScale = 比例因子：
#
# main/Frame.java
#
cancelOption = 取消
confirmCloseTitle = 确认关闭
confirmDiscardMessage = 应如何处理对 %s 的未保存更改？
designTab = 设计
discardOption = 丢弃
propertiesTab = 属性
saveOption = 保存
simulateTab = 模拟
stateTab = 状态
titleCircFileKnown = %s - %s
titleFileKnown = %s
titleUnsavedProjectState = 未保存
#
# main/Print.java
#
labelHeader = 标题：
labelRotateToFit = 旋转以适合：
printEmptyCircuitsMessage = 没有非空电路可供打印。
printEmptyCircuitsTitle = 无法打印
printParmsTitle = 打印参数
#
# main/SelectionActions.java
#
circularError = 圆形误差
dropComponentAction = 丢弃零部件
dropComponentsAction = 删除组件
moveSelectionAction = 移动选定内容
pasteCloneCancel = 取消
pasteCloneIgnore = 忽略
pasteCloneQuery = 剪贴板包括“%s”。该项目不包括它，但它有另一个同名的名称。
pasteCloneReplace = 替换
pasteCloneTitle = 组件
pasteDropMessage = 某些剪贴板组件未粘贴，因为项目库不支持它们：
pasteDropTitle = 未粘贴的组件
#
# main/SimulationToolbarModel.java
#
simulateDisableTicksTip = 禁用时钟模拟
simulateEnableTicksTip = 启用时钟模拟
simulateRunTip = 持续运行模拟器
simulateStepTip = 模拟前进一步
simulateStopTip = 停止模拟
simulateTickFullTip = 时钟前进一步
simulateTickHalfTip = 时钟前进半步
#
# main/StatisticsDialog.java
#
statsCloseButton = 关闭
statsComponentColumn = 组件
statsDialogTitle = %s 统计信息
statsLibraryColumn = 库
statsRecursiveCountColumn = 递归
statsSimpleCountColumn = 简单
statsUniqueCountColumn = 唯一
#
# main/TickCounter.java
#
tickRateHz = %s Hz
tickRateKHz = %s kHz
#
# main/ToolAttributeAction.java
#
changeToolAttrAction = 更改工具属性
#
# main/ToolboxToolbarModel.java
#
projectAddCircuitTip = 添加线路
projectEditAppearanceTip = 编辑查看的线路的外观
projectMoveCircuitDownTip = 将查看的线路下移
projectMoveCircuitUpTip = 将查看的线路上移
projectRemoveCircuitTip = 删除查看的线路
#
# menu/EditPopup.java
#
editAddControlItem = 添加顶点
editClearItem = 删除
editCopyItem = 复制
editCutItem = 剪切
editDuplicateItem = 复制
editLowerBottomItem = 下沉至底
editLowerItem = 选区下沉
editRaiseItem = 选区上升
editRaiseTopItem = 上升至顶
editRemoveControlItem = 删除顶点
#
# menu/MenuEdit.java
#
editCantRedoItem = 无法重做
editCantUndoItem = 无法撤消
editMenu = 编辑
editPasteItem = 粘贴
editRedoItem = 重做%s
editSelectAllItem = 全选
editUndoItem = 撤消%s
#
# menu/MenuFile.java
#
fileCloseItem = 关闭
fileExportImageItem = 导出图像…
fileMenu = 文件
fileMergeItem = 合并…
fileNewItem = 新建
fileOpenItem = 打开…
filePreferencesItem = 首选项…
filePrintItem = 打印…
fileQuitItem = 退出
fileSaveAsItem = 另存为…
fileSaveItem = 保存
fileExportProject = 导出项目
#
# menu/MenuHelp.java
#
helpAboutItem = 关于…
helpDisplayError = 无法显示帮助数据。
helpGuideItem = 用户指南
helpLibraryItem = 帮助文档
helpMenu = 帮助
helpNotFoundError = 找不到帮助数据。
helpsetUrl = doc/doc_zh.hs
helpTutorialItem = 教程
helpUnavailableError = 无法加载帮助数据。
helpWindowTitle = Logisim-evolution 文档
helpProjectWebsite = 项目网站
#
# menu/MenuProject.java
#
projectImportVhdlItem = 导入 VHDL 实体…
projectMenu = 项目
projectMoveCircuitDownItem = 将电路下移
projectMoveCircuitUpItem = 将电路上移
projectOptionsItem = 选项…
projectRevertAppearanceItem = 恢复为默认外观
projectUnloadLibrariesItem = 卸载库…
#
# menu/MenuSimulate.java
#
simulateAssemblyViewer = 汇编视图
simulateDownStateMenu = 进入到
simulateGenVhdlFilesItem = 重启 VHDL 模拟器
simulateLogItem = 时序图
simulateMenu = 模拟
simulateRunItem = 启动自动仿真
simulateResetItem = 电路复位
simulateStepItem = 信号单步传播
simulateTestItem = 测试向量…
simulateTickFreqItem = %s Hz
simulateTickHalfItem = 时钟前进半步
simulateTickFullItem = 时钟前进一步
simulateTickItem = 启用时钟模拟
simulateTickFreqMenu = 时钟滴答频率
simulateTickKFreqItem = %s kHz
simulateUpStateMenu = 退出到
simulateVhdlEnableItem = 启用 VHDL 模拟
#
# menu/OpenRecent.java
#
fileOpenRecentItem = 打开最近使用的文件
fileOpenRecentNoChoices =（无）
#
# menu/Popups.java
#
circuitMenu = 线路
libMenu = 库
projectAddCircuitItem = 添加线路
projectAddVhdlItem = 添加 VHDL 实体
projectAnalyzeCircuitItem = 分析电路
projectEditCircuitAppearanceItem = 编辑电路外观
projectEditCircuitLayoutItem = 编辑电路布局
projectToggleCircuitAppearanceItem = 在布局视图和外观视图之间切换
projectEditVhdlItem = 编辑 VHDL 代码
projectGetCircuitStatisticsItem = 获取电路统计信息
projectLoadBuiltinItem = 内置库…
projectLoadJarItem = JAR 库…
projectLoadLibraryItem = 加载库
projectLoadLogisimItem = Logisim-evolution 库…
projectReloadLibraryItem = 重新加载库
projectRemoveCircuitItem = 删除电路
projectRemoveVhdlItem = 删除 VHDL 实体
projectSetAsMainItem = 设置为主电路
projectUnloadLibraryItem = 卸载库
projMenu = 项目
vhdlMenu = VHDL 实体
#
# menu/PrintHandler.java
#
couldNotCreateImage = 无法创建映像。
exportImageButton = 导出
exportImageFileSelect = 选择导出文件
printError = 打印期间出错：%s
printErrorTitle = 打印过程中出错
#
# menu/ProjectCircuitActions.java
#
analyzeErrorTitle = 无法分析
analyzeNoExpressionTitle = 表达式未确定
analyzeTooManyInputsError = 分析不能处理 %s 个以上的输入。
analyzeTooManyOutputsError = 分析不能处理 %s 个以上的输出。
circuitCreateTitle = 添加回路动作
circuitNameDialogTitle = 输入电路名称
circuitNameExists = 此名称已在您的项目中使用，因此不能使用。
circuitNameInvalidName = 名称无效（它必须遵循规则（[a-za-Z]+\\w*））。
circuitNameKeyword = 此名称是关键字，因此不能使用。
circuitNameMissingError = 每条线路都需要一个名称。
circuitNamePrompt = 线路名称：
circuitRemoveErrorTitle = 无法删除线路
circuitRemoveLastError = 库必须至少包含一个电路。
circuitRemoveUsedError = 不能删除其他电路中使用的电路。
vhdlNameDialogTitle = 输入 VHDL 实体名称
vhdlNamePrompt = VHDL 实体名称：
#
# menu/ProjectLibraryActions.java
#
jarClassNamePrompt = 类名：
jarClassNameTitle = 输入 JAR 类
loadBuiltinDialogTitle = 加载内置库
loadBuiltinErrorTitle = 无法加载内置库
loadBuiltinNoneError = 所有内置库都已加载。
loadJarDialogTitle = 加载 JAR 文件
loadLogisimDialogTitle = 加载 Logisim 文件
unloadErrorTitle = 无法删除库
unloadLibrariesDialogTitle = 选择要卸载的库
unloadNoneError = 所有打开的库都在使用中。
#
# opts/MouseOptions.java
#
mouseHelp = 编辑与鼠标按键关联的工具。
mouseMapNone = 未选择任何工具
mouseMapText = 单击使用组合
mouseMapText2 = 映射%s
mouseRemoveButton = 删除
mouseTitle = 鼠标
#
# opts/OptionsActions.java
#
addMouseMappingAction = 添加鼠标映射
removeMouseMappingAction = 删除鼠标映射
setOptionAction = 集合%s
#
# opts/OptionsFrame.java
#
optionsFrameMenuItem = %s：项目选项
optionsFrameTitle = %s 项目选项
revertButton = 重置所有设置
revertHelp = 将项目设置恢复为模板默认值。
revertTitle = 重置
#
# opts/SimulateOptions.java
#
gateUndefined = 未定义时的门输出
MemoriesStartupUnknown = 存储器元件开始于未知/随机状态（而不是 0）
simulateHelp = 配置引擎以模拟电路行为。
simulateLimit = 直到振荡的迭代
simulateRandomness = 向组件延迟添加噪声
simulateTitle = 模拟
#
# opts/ToolbarActions.java
#
toolbarAddAction = 添加工具栏按钮
toolbarInsertSepAction = 插入分隔符
toolbarMoveAction = 移动工具栏按钮
toolbarRemoveAction = 删除工具栏按钮
toolbarRemoveSepAction = 删除分隔符
#
# opts/ToolbarOptions.java
#
toolbarAddSeparator = 添加分隔符
toolbarAddTool = 添加工具
toolbarHelp = 编辑工具栏中显示的工具。
toolbarMoveDown = 下移
toolbarMoveUp = 向上移动
toolbarRemove = 删除
toolbarTitle = 工具栏
#
# PrefMonitorBooleanConvert.java
#
OptionConvertAll = 转换管脚和探针的当前外观
OptionConvertAllPinsProbes = 是否将项目中的所有管脚和探头转换为使用外观“%s”？
OptionNo = 保持原样
OptionYes = 确认转换
#
# prefs/ExperimentalOptions.java
#
accelD3D = Direct3D
accelDefault = 使用默认值
accelLabel = 图形加速：
accelNone = 无
accelOpenGL = OpenGL
accelRestartLabel = 需重启 Logisim 以使更改生效。
experimentHelp = 启用尚未彻底测试的功能
experimentTitle = 实验性
#
# prefs/IntlOptions.java
#
intlGateShape = 逻辑门形状：
intlHelp = 编辑本地化首选项
intlLocale = 语言：
intlTitle = 国际化
shapeDIN40700 = DIN 40700
shapeRectangular = IEC
shapeShaped = ANSI
#
# prefs/LayoutOptions.java
#
layoutAddAfter = 添加组件后：
layoutAddAfterEdit = 切换到编辑工具
layoutAddAfterUnchanged = 保持在组件工具上
layoutAddShowGhosts = 添加时显示重影
layoutAntiAliasing = 使用抗锯齿
layoutAttributeHalo = 显示属性光环
layoutDefaultApearance = 使用由以下各项提供的默认外观：
layoutHelp = 配置布局编辑器的行为
layoutMoveKeepConnect = 移动时保持连接
layoutNamedCircuitBoxesFixedSize = 使用固定大小的电路盒
layoutRadix1 = 拨线时的第一个基数：
layoutRadix2 = 拨线时的第二个基数：
layoutShowTips = 显示组件提示
layoutTitle = 布局
layoutUseNewInputOutputSymbols = 使用新的输入和输出形状
layoutPinAppearance = 将连接点绘制为：
layoutPinAppearanceDotSmall = 小网点
layoutPinAppearanceDotMedium = 中点
layoutPinAppearanceDotBig = 大圆点
layoutPinAppearanceDotBigger = 更大的网点
#
# prefs/PreferencesFrame.java
#
preferencesFrameMenuItem = 首选项
preferencesFrameTitle = 首选项
#
# prefs/SimOptions.java
#
simBusColTitle = 总线颜色：
simColorBlindColors = 色盲色
simDefaultColors = Logisim 默认颜色
simDontCareCharTitle = 不关心字符：
simErrorCharTitle = 错误值字符：
simErrorColTitle = 错误颜色：
simFalseCharTitle = 假值字符：
simFalseColTitle = 假值颜色：
simHelp = 编辑使用的模拟颜色和符号
simKmapColors = 图形颜色%d：
simKmapColorsTitle = 卡诺图图形颜色：
simNilColTitle = 未连接的颜色：
simStrokeColTitle = 导线/母线描边颜色：
simTitle = 模拟
simTrueCharTitle = 真值字符：
simTrueColTitle = 真值颜色：
simUnknownCharTitle = 未知值字符：
simUnknownColTitle = 未知颜色：
simWidthErrorBackgroundTitle = 宽度错误背景颜色：
simWidthErrorCaptionTitle = 宽度错误标题颜色：
simWidthErrorHighlightTitle = 宽度错误突出显示颜色：
simWidthErrorTitle = 宽度错误颜色：
simClockFrequencyTitle = 时钟频率显示颜色：
#
# prefs/TemplateOptions.java
#
selectDialogButton = 选择
selectDialogTitle = 选择模板
templateCustomOption = 用户模板：
templateEmptyOption = 空模板
templateErrorMessage = 无法加载模板：%s
templateErrorTitle = 加载模板时出错
templateHelp = 选择当前模板
templatePlainOption = 普通模板
templateSelectButton = 选择.
templateTitle = 模板
templateRemoveLibsOnSave = 保存时删除未使用的库
#
# prefs/AutosaveOptions.java
#
# ==> autosaveEnabled = Enable autosaving (Takes effect after a restart).
# ==> autosaveInterval = Autosaving interval in seconds:
# ==> autosaveTitle = Autosave
# ==> autosaveHelp = Select autosave settings
#
# prefs/WindowOptions.java
#
windowHelp = 配置主编辑窗口
windowTickRate = 显示运行速率（Tick）
windowTitle = 窗口
windowToolbarHidden = 隐藏
windowToolbarImportant = 重要提示：更改下列值可能会导致不可预知的结果！
windowToolbarLocation = 工具栏位置：
windowToolbarLookandfeel = 外观样式：
windowToolbarPleaserestart = 需重启 Logisim 生效
windowToolbarPreview = 预览
windowToolbarReset = 将窗口布局重置为 Logisim 的默认值
windowToolbarZoomfactor = 缩放系数
windowCanvasBgColor = 画布背景颜色：
windowComponentColor = 组件颜色：
windowGridBgColor = 网格背景颜色：
windowGridDotColor = 栅格点颜色：
windowGridZoomedDotColor = 栅格缩放点颜色：
windowGridColorsReset = 将网格颜色重置为 Logisim 的默认值
windowSetAutoScaleFactor = 将缩放比例重置为 Logisim 的默认值
windowCanvasLocation = 主要画布位置
#
# prefs/HotkeyOptions.java
#
hotkeyOptMenuKeyHeader = 需要 %s 键的菜单快捷键：
hotkeyOptNormalKeyHeader = 不需要 %s 键的上下文相关快捷键：
hotkeyOptOrientDesc = 组件方向快捷键
hotkeyOptHelp = 要设置快捷键，请点击右侧的边框区域并在键盘上按下您期望的键。点击勾号保存，或点击叉号放弃。
hotkeyOptTitle = 快捷键设置
hotkeyOptResetBtn = 重置为默认
hotkeySimAutoPropagate = 自动传播
hotkeySimReset = 重置模拟
hotkeySimStep = 单步传播
hotkeySimTickHalf = 时钟前进半周期
hotkeySimTickFull = 时钟前进一周期
hotkeySimTickEnabled = 自动时钟模拟启用
hotkeyEditUndo = 编辑撤销
hotkeyEditRedo = 编辑重做
hotkeyWindowClose = 关闭窗口
hotkeyWindowMinimize = 最小化窗口
hotkeyFileExport = 导出文件
hotkeyFilePrint = 打印文件
hotkeyErrMeta = 必须包含 %s 键。
hotkeyErrConflict = 此键与 %s 冲突。
hotkeyDirNorth = 北方
hotkeyDirSouth = 南方
hotkeyDirEast = 东方
hotkeyDirWest = 西方
hotkeyEditMenuDuplicate = 复制
hotkeyEditToolDuplicate = 复制选定对象
hotkeyProjMoveUp = 将电路向上移动一层
hotkeyProjMoveDown = 将电路向下移动一层
hotkeyAutoLabelOpen = 编辑/指定组件标签
hotkeyAutoLabelToggle = 切换标签可见性
hotkeyAutoLabelView = 设置标签可见性
hotkeyAutoLabelHide = 重置标签可见性
hotkeyAutoLabelSelfNumberedStop = 结束自编号功能
hotkeyAddToolRotate = 添加组件时旋转
hotkeyGateModifierSizeSmall = 将门的尺寸设为小
hotkeyGateModifierSizeMedium = 将门的尺寸设为中
hotkeyGateModifierSizeWide = 将门的尺寸设为宽
hotkeyGateModifierInputAdd = 添加门的输入端口
hotkeyGateModifierInputSub = 减少门的输入端口
#
# start/About.java
#
aboutDialogTitle = 关于Logisim-evolution
aboutDialogClose = 关闭
aboutDialogCopyDetails = 复制详情
#
# start/AboutCredits.java
#
creditsRoleFork = 从原始项目派生的分支
creditsRoleOriginal = 原始版本
creditsBuildInfo = 编译信息
creditsCompiled = 编译时间：%s
creditsDevelopedBy = 开发者
creditsDevelopedByAndOthers = 以及更多人…
#
# start/SplashScreen.java
#
progressFileCreate = 正在创建文件
progressFileLoad = 正在加载文件
progressFrameCreate = 正在创建窗口
progressGuiInitialize = 正在初始化接口
progressLibraries = 正在加载组件
progressProjectCreate = 正在创建项目
progressTemplateClose = 关闭模板
progressTemplateCreate = 正在创建模板
progressTemplateLoad = 正在加载模板
progressTemplateOpen = 打开模板
startupCloseButton = 关闭
startupQuitButton = 退出
#
# start/Startup.java
#
argCircuitOption = 测试作为参数传递的名称循环，而不是“main”；与“-tty table”一起使用。
argClearOption = 在启动时清除应用程序首选项。
argDuplicateSubstitutionError = 不能多次通过替身发送同一文件。
argGatesOption = 设置“ANSI”或“IEC”浇口样式。
argGatesOptionArgName = 形状
argGatesOptionError = --gate 选项的参数必须是“ANSI”或“IEC”。
argGeometryError = --geometry 的参数必须采用“WIDTHxHEIGHT”或“WIDTHxHEIGHT+X+Y”的形式。
argGeometryOption = 设置主窗口的几何图形：参数：WIDTHxHEIGHT[+X+Y]
argGeometryOptionArgName = 几何体
argHelpOption = 显示此参数摘要帮助页。
argLoadOption = 将图像文件加载到 RAM 中（仅适用于 -tty）。
argLoadOptionArgName = 文件
argSaveOption = 将 RAM 保存到图像文件（仅适用于 -tty）。
argSaveOptionArgName = 文件
argLocaleOption = 将区域设置设置为作为参数给定。
argLocaleOptionArgName = 语言
argNoSplashOption = 在启动时隐藏闪屏。
argMainCircuitOption = 设置要使用的主电路。参数：<电路名称>
argMainCircuitOptionArgName = 名字
argTestVectorOption = 测试向量。参数：<电路><测试向量>
argTestVectorOptionArgName = 参数
argOneTemplateError = 只允许一个模板。
argSubOption = 用 lib2 替换库 lib1。参数：lib1，lib2。
argSubOptionArgName = 参数
argTemplateOption = 选择模板。参数：“Empty”表示空模板，“Plain”表示默认模板，或者是要加载的模板的文件名。
argTemplateOptionArgName = Arg
argTestCircGenOption = 打开任何版本的 Logisim 的 .circ 文件，并以 Logisim-evolution 中使用的当前格式编写一个新文件。参数：<CIRC_INPUT><CIRC_OUTPUT>
argTestCircGenOptionArgName = 参数
argTestCircuitOption = 打开一个 CIRC 文件并在其中启动测试台。它返回成功或失败。参数：<PATH_TO_CIRC>
argTestCircuitOptionArgName = 文件
argTestImplement = 使用 CIRC_INPUT 文件测试实现设计。实现电路_NAME 是选择实现的电路（FPGA_TOP），电路板是资源/logisim/boards/中不带扩展名“.xml”的电路板名称。可选的滴答频率以 Hz 为单位。可选开关 HDLONLY 将仅生成 HDL 描述，不会执行合成、P&R 和下载。参数：<电路名称><电路板>[滴答频率][HDLONLY]
argTestImplementArgName = 参数
argTestInvalidArguments = --test-fpga 选项的参数无效。支持：<CIRC_INPUT><电路名称><电路板>[滴答频率][HDLONLY]“
argTestUnknownFlagOrValue = 无效值或未知标志：%s
argTtyOption = 在没有图形界面的情况下运行。参数：TTY 格式。
argTtyOptionArgName = 格式化
argVersionOption = 显示版本号并退出
invalidLocaleError = 不支持指定的区域设置。
invalidLocaleOptionsHeader = 支持的区域设置：
loadMultipleError = “--load” 选项只能指定一次。
loadNeedsTtyError = “--load” 选项只能与“--tty”一起使用。
saveMultipleError = “--save” 选项只能指定一次
saveNeedsTtyError = “--save” 选项只能与“--tty”一起使用。
templateCannotReadError = 没有读取模板文件的权限：%s
templateMissingError = 模板文件不存在：%s
ttyFormatError = --tty 至少需要以下一项：HALT、SPEED、STATS、TABLE、TTY
# FIXME: add to list above "binary, hex, csv, tabs"
ttyNeedsFileError = 使用“--tty”需要在命令行上提供文件名。
# ==> saveAndLoadOption = Save and load
# ==> titleHandleAutosave = Autosave found
# ==> contentHandleAutosave = Autosave file '%s' found. What should be done?
#
# start/TtyInterface.java
#
loadIoError = 读取图像文件时出错
loadNoRamError = 找不到 “-load” 选项的 RAM。
saveIoError = 保存图像文件时出错
saveNoRamError = 找不到 “-save” 选项的 RAM。
statsTotalWith = 总计（带子电路）
statsTotalWithout = 总计（不含项目子电路）
ttyHaltReasonOscillation = 由于检测到振荡而停止
ttyHaltReasonPin = 由于停止销而停止
ttyLoadError = 加载电路文件时出错：%s
ttyNoTtyError = 找不到 TTY 或键盘组件。
ttySpeedMsg = %s Hz（%s 滴答，以%s 毫秒为单位）
#
# test/TestFrame.java
#
failMessage = 失败：%s
fileCannotParseMessage = 无法分析“%s”中的测试向量。\n详细信息：%s。
fileCannotReadMessage = 您没有读取“%s”的权限。
fileCannotReadTitle = 文件不可用
fileWrongPinsMessage = “%s”中的测试向量与电路不匹配。\n详细信息：%s。
fileWrongPinsTitle = 加载测试向量时出错
loadButton = 加载向量
passMessage = 已通过：%s
resetButton = 重置
runButton = 启动
stopButton = 停止
testFrameMenuItem = %s：测试向量
testFrameTitle = 测试向量 %s - %s
#
# test/TestPanel.java
#
expectedValueMessage = 预期为 %s
failStatus = 失败
passStatus = 经过
statusHeader = 状态
#
# test/TestThread.java
#
testFailed = 测试向量 %s 出错：
testLoadingFailed = 加载测试向量时出错：%s
testLoadingVector = 正在加载测试向量“%s”。
testResults = 通过：%s，失败：%s
testRunning = 正在运行 %s 向量.
testSetupFailed = 准备测试向量时出错：%s
untitled = 无标题
