#
# appear/AppearanceEditHandler.java
#
deleteSelectionAction = 選択範囲の削除
duplicateSelectionAction = 選択範囲の複製
pasteClipboardAction = クリップボードを貼り付ける
#
# appear/ClipboardActions.java
#
copySelectionAction = 選択範囲をコピー
cutSelectionAction = 選択範囲を切り取り
#
# appear/RevertAppearanceAction.java
#
revertAppearanceAction = 外観を元に戻す
#
# appear/ShowStateDialog.java
#
showStateDialogCancelButton = キャンセル
showStateDialogEmptyNode = 空の回路 %s
showStateDialogNodeTitle = %s の状態。
showStateDialogOkButton = OK
showStateDialogTitle = %s の状態。
#
# chronogram/chronogui/ChronoFrame.java
#
ButtonExport = エクスポート...
ButtonLoad = ファイルの読み込み
ChronoTitle = クロノグラム
ButtonExportAsImage = 画像として書き出す
InputFileLoaded = ロードされたファイル:
InputFileNoSysclk = sysclk信号が見つかりません
SimStatusCurrentScheme = Simulate->Chronogramで選択された信号がありません。
SimStatusName = ステータス:
SimStatusNoSignal = Simulate->Chronogramで選択された信号がありません
SimStatusNoSysclk = リアルタイム使用のためにSimulate->Chronogramに'sysclk'シグナルを追加するか、ファイルをロードします
#
# chronogram/chronogui/LeftPanel.java
#
SignalNameName = 信号名
SignalNameValue = 信号値
#
# chronogram/chronogui/PopupMenu.java
#
BusExpand = 拡大
BusFormat = フォーマット
#
# generic/AttributeSetTableModel.java
#
attributeChangeInvalidError = リクエストが無効なので、属性を変更しません。
#
# generic/AttrTable.java
#
attributeChangeInvalidTitle = 値が無効
attributeDialogTitle = 選択値
#
# generic/ZoomControl.java
#
zoomShowGrid = グリッドを表示するかどうかを切り替える
ZoomText = ズームとグリッドコントロール:
#
# hex/Clip.java
#
hexPasteErrorTitle = 貼り付けエラー
hexPasteSupportedError = クリップボードの内容をエディタに貼り付けることができません。
hexPasteTooSmall = hexPasteTooSmall = クリップボード (%d ワード) が小さすぎて、選択された\n領域 (%d ワード) を埋めることができません。とにかく貼り付けますか？
#
# hex/HexFile.java
#
confirmOverwriteMessage = ファイルはすでに存在しています。上書きしますか？
confirmOverwriteTitle = 上書きを確認
hexFileOpenError = ファイルを開けませんでした。%s
hexFileWriteError = ファイル書き込みエラー。%s
hexFormatTitle = 16進数ファイル形式
ramLoadDialogTitle = メモリーイメージのロード
ramLoadErrorTitle = メモリイメージロードエラー
ramSaveDialogTitle = メモリイメージの保存
ramSaveErrorTitle = メモリ画像保存エラー
#
# hex/HexFrame.java
#
closeButton = ウィンドウを閉じる
hexFrameMenuItem = 16進数 エディタ
hexFrameTitle = Logisim-evolution. 16進数エディタ
openButton = 開く...
saveButton = 保存...
#
# log/FilePanel.java
#
fileAppendOption = 追加する
fileCancelOption = キャンセル
fileCannotWriteMessage = "%s "への書き込み権限がありません。
fileCannotWriteTitle = ファイルは利用できません。
fileDisableButton = 無効
fileDisabled = ファイル出力を無効にします。
fileEnableButton = 有効にする
fileEnabled = ファイル出力が有効になっています。
fileExistsMessage = ファイル "%s" は既に存在します。
fileExistsTitle = ファイルは既に存在します。
fileHeaderCheck = インクルードヘッダ行
fileHelp = ファイル出力を設定します。
fileLabel = ファイル。
fileOverwriteOption = 上書き
fileSelectButton = 選択...
fileTab = ファイル
#
# log/LogFrame.java
#
logFrameMenuItem = %s. ログ
logFrameTitle = Logisim-evolution: ログ %s
#
# log/SelectionPanel.java
#
selectionAdd = 追加 >>
selectionChangeBase = 基数の変更
selectionHelp = どのコンポーネントの値がログに記録されるかを選択します。
selectionMoveDown = 下に移動
selectionMoveUp = 上に移動
selectionRemove = << 削除
selectionTab = 選択範囲
timeSelectionClock = 時計を選択します。
timeSelectionEnable = 時間選択を有効にする
timeSelectionFrequency = 頻度:
#
# log/TablePanel.java
#
tableHelp = 最近の値のログを表示します:
tableTab = テーブル
#
# log/ValueTable.java
#
tableEmptyMessage = 選択範囲が空です。
tableHeaderHelp = 基数:
#
# main/AttrTableCircuitModel.java
#
cannotModifyCircuitError = この回路は変更できません。
changeCircuitAttrAction = 回路の変更
circuitAttrTitle = 回路:%s
#
# main/AttrTableComponentModel.java
#
changeAttributeAction = 属性の変更
#
# main/AttrTableSelectionModel.java
#
hdlAttrTitle = VHDL エンティティ: %s
selectionAttributeAction = 選択属性の変更
selectionMultiple = 選択範囲: %s × %s
selectionOne = 選択範囲: %s
selectionVarious = 選択範囲: 各種項目 × %s
#
# main/AttrTableToolModel.java
#
toolAttrTitle = ツール: %s
#
# main/Canvas.java
#
canvasExceptionError = 内部エラーによりシミュレーションが停止しました。
canvasOscillationError = 明らかなオシレーション
canvasWidthError = 互換性のない幅
#
# main/ExportImage.java
#
couldNotCreateFile = ファイルを作成できませんでした。
exportEmptyCircuitsMessage = 空でない回路はエクスポートできません。
exportEmptyCircuitsTitle = エクスポートできません。
exportGifFilter = GIF ファイル (*.gif)
exportImageDirectorySelect = エクスポートディレクトリの選択
exportImageProgress = 画像を計算する...
exportImageSelect = 画像のエクスポート
exportJpgFilter = JPEGファイル (*.jpeg, *.jpg)
exportNewDirectoryErrorMessage = ディレクトリを作成できませんでした。
exportNewDirectoryErrorTitle = ディレクトリを作成できません。
exportPngFilter = PNGファイル (*.png)
exportSvgFilter = SVGファイル (*.svg)
exportTikZFilter = TikZpicture ファイル (*.tex)
labelCircuits = 回路.
labelImageFormat = 画像フォーマット。
labelPrinterView = プリンタビュー。
labelScale = スケール係数。
#
# main/Frame.java
#
cancelOption = キャンセル
confirmCloseTitle = 終了の確認
confirmDiscardMessage = %s に保存されていない変更をどうしますか?
discardOption = 破棄
saveOption = 保存
titleCircFileKnown = Logisim-evolution: %s の %s
titleFileKnown = Logisim-evolution: %s
#
# main/Print.java
#
labelHeader = ヘッダ:
labelRotateToFit = フィットするような回転:
printEmptyCircuitsMessage = 空の回路は印刷できません。
printEmptyCircuitsTitle = 印刷できません。
printParmsTitle = 印刷パラメータ
#
# main/SelectionActions.java
#
circularError = サーキュラーエラー
dropComponentAction = ドロップコンポーネント
dropComponentsAction = ドロップコンポーネンツ
moveSelectionAction = 選択範囲を移動
pasteCloneCancel = キャンセル
pasteCloneIgnore = 無視
pasteCloneQuery = クリップボードには"%s" プロジェクトには含まれていませんが、同じ名前の別のものがあります。
pasteCloneReplace = 置換
pasteCloneTitle = コンポーネント
pasteDropMessage = プロジェクトライブラリがサポートしていないため、一部のクリップボードコンポーネントが貼り付けられませんでした。:
pasteDropTitle = コンポーネントは貼り付けられませんでした
#
# main/SimulationToolbarModel.java
#
simulateDisableTicksTip = クロックの刻みを無効にする
simulateEnableTicksTip = クロックの目盛りを有効にする
simulateRunTip = シミュレータを継続的に実行する
simulateStepTip = ステップ　シミュレータ　1回
simulateStopTip = シミュレータを停止する
simulateTickFullTip = ティッククロック　1フル　サイクル
simulateTickHalfTip = ティッククロック　1/2　サイクル
#
# main/StatisticsDialog.java
#
statsCloseButton = 閉じる
statsComponentColumn = コンポーネント
statsDialogTitle = Logisim-evolution: %s 統計情報
statsLibraryColumn = ライブラリ
statsRecursiveCountColumn = 再帰的
statsSimpleCountColumn = シンプル
statsUniqueCountColumn = ユニーク
#
# main/TickCounter.java
#
tickRateHz = %s Hz
tickRateKHz = %s kHz
#
# main/ToolAttributeAction.java
#
changeToolAttrAction = ツール属性の変更
#
# main/ToolboxToolbarModel.java
#
projectAddCircuitTip = 回路の追加
projectEditAppearanceTip = 表示されている回路の外観を編集する
projectMoveCircuitDownTip = 表示されている回路を下のリストに移動する
projectMoveCircuitUpTip = 表示されている回路をリストの上に移動する
projectRemoveCircuitTip = 表示されている回路を削除する
#
# menu/EditPopup.java
#
editAddControlItem = 頂点の追加
editClearItem = 削除
editCopyItem = コピー
editCutItem = 切り取り
editDuplicateItem = 複製
editLowerBottomItem = 下から下へ
editLowerItem = 下位選択
editRaiseItem = 選択範囲を上げる
editRaiseTopItem = 上から上へ
editRemoveControlItem = 頂点を取り除く
#
# menu/MenuEdit.java
#
editCantRedoItem = やり直し不可
editCantUndoItem = 元に戻せません
editMenu = 編集
editPasteItem = 貼り付け
editRedoItem = %sをやり直します
editSelectAllItem = 全てを選択
editUndoItem = %sを元に戻します
#
# menu/MenuFile.java
#
fileCloseItem = 閉じる
fileExportImageItem = 画像のエクスポート...
fileMenu = ファイル
fileMergeItem = 結合...
fileNewItem = 新規
fileOpenItem = 開く...
filePreferencesItem = 環境設定...
filePrintItem = 印刷...
fileQuitItem = 終了する
fileSaveAsItem = 新規ファイルで保存...
fileSaveItem = 保存
#
# menu/MenuHelp.java
#
helpAboutItem = 本アプリについて...
helpDisplayError = ヘルプデータを表示できませんでした。
helpGuideItem = ユーザーズガイド
helpLibraryItem = ライブラリーリファレンス
helpMenu = ヘルプ
helpNotFoundError = ヘルプデータはありません。
helpsetUrl = doc/doc_en.hs
helpTutorialItem = チュートリアル
helpUnavailableError = ヘルプデータを読み込めませんでした
helpWindowTitle = Logisim-evolution ドキュメント
#
# menu/MenuProject.java
#
projectImportVhdlItem = VHDL Entityを読み込む...
projectMenu = プロジェクト
projectMoveCircuitDownItem = 回路を下に移動する
projectMoveCircuitUpItem = 回路を上に移動する
projectOptionsItem = オプション...
projectRevertAppearanceItem = デフォルトの外観に戻す
projectUnloadLibrariesItem = ライブラリの取り外し...
#
# menu/MenuSimulate.java
#
simulateDownStateMenu = 状態への遷移
simulateGenVhdlFilesItem = VHDLシミュレータを再起動します
simulateLogItem = クロノグラム
simulateMenu = シミュレート
simulateResetItem = シミュレータのリセット
simulateRunItem = シミュレータの実行
simulateStepItem = シミュレータのステップ
simulateTestItem = テストベクター...
simulateTickFreqItem = %s Hz
simulateTickFreqMenu = ティック周波数
simulateTickFullItem = ティックフルサイクル
simulateTickHalfItem = ティックハーフサイクル
simulateTickItem = ティックの有効化
simulateTickKFreqItem = %s kHz
simulateUpStateMenu = 状態への非遷移
simulateVhdlEnableItem = VHDLシミュレーションの有効化
#
# menu/OpenRecent.java
#
fileOpenRecentItem = 最近開いたものを開く
fileOpenRecentNoChoices = (なし)
#
# menu/Popups.java
#
circuitMenu = 回路
libMenu = ライブラリ
projectAddCircuitItem = 回路の追加...
projectAddVhdlItem = VHDL Entityの追加...
projectAnalyzeCircuitItem = 回路の分析
projectEditCircuitAppearanceItem = 回路の外観を編集
projectEditCircuitLayoutItem = 回路レイアウトの編集
projectEditVhdlItem = VHDLコードの編集
projectGetCircuitStatisticsItem = 回路統計情報の取得
projectLoadBuiltinItem = 組み込みライブラリ...
projectLoadJarItem = JARライブラリ...
projectLoadLibraryItem = ライブラリのロード...
projectLoadLogisimItem = Logisim-evolutionライブラリ...
projectReloadLibraryItem = ライブラリのリロード
projectRemoveCircuitItem = 回路の削除
projectRemoveVhdlItem = VHDL Entityの削除
projectSetAsMainItem = Main Circuitとして設定
projectUnloadLibraryItem = ライブラリの取り外し
projMenu = プロジェクト
vhdlMenu = VHDL Entity
#
# menu/PrintHandler.java
#
couldNotCreateImage = 画像を作成できませんでした。
exportImageButton = エクスポート
exportImageFileSelect = エクスポートファイルを選択
printError = 印刷中のエラー: %s
printErrorTitle = 印刷中のエラー
#
# menu/ProjectCircuitActions.java
#
analyzeErrorTitle = 解析できません
analyzeNoExpressionTitle = 式が決定されていません
analyzeTooManyInputsError = 解析では %s 以上の入力を処理できません。
analyzeTooManyOutputsError = 解析では %s 以上の出力を処理できません。
circuitCreateTitle = 回路アクションを追加します。
circuitNameDialogTitle = 入力回路名
circuitNameExists = この名前は、あなたのプロジェクトで既に使用されているため、使用できません。
circuitNameInvalidName = 名前が無効です（ルール([a-zA-Z]+\w*)に従わなければなりません）。
circuitNameKeyword = この名前はキーワードなので、使用できません。
circuitNameMissingError = すべての回路は名前を必要とします。
circuitNamePrompt = 回路名:
circuitRemoveErrorTitle = 回路を削除できません。
circuitRemoveLastError = ライブラリには少なくとも 1 つの回路が含まれている必要があります。
circuitRemoveUsedError = 他の回路で使用されている回路は削除できません。
vhdlNameDialogTitle = 入力VHDLエンティティ名
vhdlNamePrompt = VHDLエンティティ名:
#
# menu/ProjectLibraryActions.java
#
jarClassNamePrompt = クラス名:
jarClassNameTitle = JARクラスを入力してください
loadBuiltinDialogTitle = 組み込みライブラリのロード
loadBuiltinErrorTitle = 組み込みライブラリをロードできません。
loadBuiltinNoneError = すべての組み込みライブラリがすでにロードされています。
loadJarDialogTitle = JARファイルのロード
loadLogisimDialogTitle = Logisimファイルの読み込み
unloadErrorTitle = ライブラリを削除できません
unloadLibrariesDialogTitle = 取り外すライブラリの選択
unloadNoneError = すべてのオープンライブラリが使用中です。
#
# opts/MouseOptions.java
#
mouseHelp = マウスボタンに関連付けられたツールを編集します。
mouseMapNone =  選択されたツールがない
mouseMapText = 組み合わせを使ってクリック
mouseMapText2 = %sをマップする
mouseRemoveButton = 削除
mouseTitle = マウス
#
# opts/OptionsActions.java
#
addMouseMappingAction = マウスマッピングの追加
removeMouseMappingAction = マウスマッピングの削除
setOptionAction = %sを設定します
#
# opts/OptionsFrame.java
#
optionsFrameMenuItem = %s: プロジェクトオプション
optionsFrameTitle = Logisim-evolution: %s プロジェクトオプション
revertButton = すべての設定をリセット
revertHelp = プロジェクトの設定をテンプレートのデフォルトに戻します。
revertTitle = リセット
#
# opts/SimulateOptions.java
#
gateUndefined = 未定義時のゲート出力
MemoriesStartupUnknown = メモリ要素は未知の/ランダムな状態で開始します(むしろ0です)
simulateHelp = 回路の動作をシミュレートするためのエンジンを構成します。
simulateLimit = 発振までのイテレーション
simulateRandomness = コンポーネントの遅延にノイズを追加する
simulateTitle = シミュレーション
#
# opts/ToolbarActions.java
#
toolbarAddAction = ツールバーボタンの追加
toolbarInsertSepAction = セパレータの挿入
toolbarMoveAction = ツールバーボタンの移動
toolbarRemoveAction = ツールバーボタンの削除
toolbarRemoveSepAction = セパレータの削除
#
# opts/ToolbarOptions.java
#
toolbarAddSeparator = セパレータの追加
toolbarAddTool = ツールの追加
toolbarHelp = ツールバーに表示されるツールを編集します。
toolbarMoveDown = 下に移動
toolbarMoveUp = 上に移動
toolbarRemove = 削除
toolbarTitle = ツールバー
#
# PrefMonitorBooleanConvert.java
#
OptionConvertAll = ピンとプローブの現在の外観を変換する
OptionConvertAllPinsProbes = プロジェクト内のすべてのピンとプローブを変換して外観 "%s" を使用するようにしますか？
OptionNo = いいえ、そのままにしておきます。
OptionYes = はい、変換します。
#
# prefs/ExperimentalOptions.java
#
accelD3D = ダイレクト3D
accelDefault = デフォルトを使用
accelLabel = グラフィックス・アクセラレーション:
accelNone = なし
accelOpenGL = OpenGL
accelRestartLabel = 変更が有効になるようにLogisimを再起動します。
experimentHelp = まだ十分にテストされていない機能を有効にする
experimentTitle = 実験
#
# prefs/IntlOptions.java
#
intlGateShape = ゲートの形状:
intlHelp = ローカライズ環境設定の編集
intlLocale = 言語。
intlReplaceAccents = アクセント付きの文字を置き換える
intlTitle = 国際
shapeDIN40700 = DIN 40700
shapeRectangular = IEC
shapeShaped = ANSI
#
# prefs/LayoutOptions.java
#
layoutAddAfter = コンポーネント追加後:
layoutAddAfterEdit = 編集ツールに切り替える
layoutAddAfterUnchanged = コンポーネントツールで保持
layoutAddShowGhosts = ゴーストを追加中に表示する
layoutAnimatedIcons = アニメーションアイコンを使用する
layoutAntiAliasing = アンチエイリアシングを使用する
layoutAttributeHalo = 属性ハローを表示する
layoutDefaultApearance = 提供されたデフォルトの外観を使用します。
layoutHelp = レイアウト・エディタの動作を設定する
layoutMoveKeepConnect = 移動中も接続を保持する
layoutNamedCircuitBoxesFixedSize = 固定サイズの回路ボックスを使用します。
layoutPrinterView = プリンタビュー
layoutRadix1 = ワイヤが突かれたときの最初の基数:
layoutRadix2 = ワイヤが突かれたときの2番目の基数:
layoutShowTips = コンポーネントのヒントを表示
layoutTitle = レイアウト
layoutUseNewInputOutputSymbols = 新しい入力および出力図形を使用する
#
# prefs/PreferencesFrame.java
#
preferencesFrameMenuItem = 環境設定
preferencesFrameTitle = Logisim-evolution. 環境設定
#
# prefs/SimOptions.java
#
simBusColTitle = バスの色:
simColorBlindColors = カラーブラインドカラー
simDefaultColors = Logisimのデフォルトカラー
simDontCareCharTitle = ドントケア文字:
simErrorCharTitle = エラー値文字:
simErrorColTitle = エラー色:
simFalseCharTitle = 偽の値の文字:
simFalseColTitle = 偽の色:
simHelp = 使用するシミュレーションの色とシンボルを編集します
simKmapColors = マップ・カラー %d:
simKmapColorsTitle = カルノー図のマップ色:
simNilColTitle = 接続されていない色:
simStrokeColTitle = ワイヤ/バス・ストロークの色:
simTitle = シミュレーション
simTrueCharTitle = 真の値の文字:
simTrueColTitle = 真の色:
simUnknownCharTitle = 不明な値 文字:
simUnknownColTitle = 不明　色:
simWidthErrorBackgroundTitle = 幅エラーの背景色:
simWidthErrorCaptionTitle = 幅エラーのキャプション色:
simWidthErrorHighlightTitle = 幅エラーハイライト色:
simWidthErrorTitle = 幅エラーの色:
#
# prefs/TemplateOptions.java
#
selectDialogButton = 選択
selectDialogTitle = テンプレートの選択
templateCustomOption = カスタムテンプレート:
templateEmptyOption = 空のテンプレート
templateErrorMessage = テンプレートをロードできませんでした: %s
templateErrorTitle = テンプレートの読み込みエラー
templateHelp = 現在のテンプレートを選択
templatePlainOption = プレーンテンプレート
templateSelectButton = 選択...
templateTitle = テンプレート
#
# prefs/WindowOptions.java
#
windowHelp = メイン編集ウィンドウの設定
windowTickRate = 目盛りを表示する
windowTitle = ウィンドウ
windowToolbarHidden = 隠す
windowToolbarImportant = 重要: 以下の値を変更すると予測できない結果になる可能性があります!
windowToolbarLocation = ツールバーの位置:
windowToolbarLookandfeel = 外観および操作感:
windowToolbarPleaserestart = logisimを再起動してください。
windowToolbarReset = ウィンドウレイアウトをlogisimsのデフォルト設定にリセットします。
windowToolbarZoomfactor = ズームファクタ
#
# start/AboutCredits.java
#
creditsRoleFork = オリジナルプロジェクトからのフォーク
creditsRoleOriginal = オリジナルバージョン
#
# start/SplashScreen.java
#
progressFileCreate = ファイルの作成...
progressFileLoad = ファイルの読み込み...
progressFrameCreate = ウィンドウの作成...
progressGuiInitialize = インターフェイスの初期化...
progressLibraries = コンポーネントの読み込み...
progressProjectCreate = プロジェクトの作成...
progressTemplateClose = テンプレートを閉じる...
progressTemplateCreate = テンプレートの作成...
progressTemplateLoad = テンプレートの読み込み...
progressTemplateOpen = テンプレートを開く...
startupCloseButton = 閉じる
startupQuitButton = 終了する
#
# start/Startup.java
#
argAccentsOption = -accents yes|no アクセント付きの文字またはASCIIと同等のものを使用します。
argAccentsOptionError = -accentsオプションの引数は "yes "または "no "でなければなりません。
argAnalyzeOption = -analyze analyzeオプションを有効にします。
argCircuitOption = -circuit名 メインの代わりに与えられた回路をテストする。
argClearOption = -clearprefs 起動時にアプリケーションの環境設定をクリアします。
argDuplicateSubstitutionError = 同じファイルを複数回置換することはできません。
argEmptyOption = -empty 空のテンプレートを使用します。
argGatesOption = -gatesスタイル "shaped "または "rectangular "ゲートスタイルを選択します。
argGatesOptionError = -gatesオプションの引数は "shaped "または "rectangular "でなければなりません。
argGeometryError = -geomの引数は "WxH "または "WxH+X+Y "でなければなりません。
argGeometryOption = -geom WxH[+X+Y] メインウィンドウのジオメトリを設定します。
argHelpOption = -help このサマリーを表示して終了します。
argLoadOption = -load file イメージファイルをRAMにロード (-ttyでのみ動作)
argLocaleOption = -locale str strで指定されたロケールを使用します。
argNoSplashOption = -nosplashは起動時にスプラッシュ画面を隠す
argNoUpdatesOption = -noupdates 自動更新を無効にする
argOneTemplateError = 1つのテンプレートしか許可されていません。
argOptionHeader = オプションです。
argPlainOption = -plain 標準のLogisimテンプレートを使用します。
argQuestaOption = -questa yes|no HDLエンティティの検証にクエスタのアドバンスド・シミュレータを使用します。
argQuestaOptionError = -questaオプションの引数は "yes "または "no "でなければなりません。
argSubOption = -sub file1 file2 ロードファイルをライブラリfile1をfile2に置き換えます。
argTemplateOption = -template file use file as template
argTestCircGen = -test-circ-gen <circ_input> <circ_output> サークファイルを開き、後でXmlの内容をチェックするために新しいファイルを書き込む
argTestCircuit = -test-circuit <path_to_circ> circファイルを開き、その中でテストベンチを起動する。成功か失敗を返します。
argTestImplement = -test-fpga-implementation <circ_input> [map_input] <circuit_name> <board> [tick frequency] [HDLONLY]。circ_inputファイルとオプションのmap_inputマッピングファイルを使用して実装デザインをテストします（v3.3.3.3以降は廃止されています）。実装回路名は実装する回路(FPGA_Top)を選択したもので、ボードはresources/logisim/boards/にあるボード名(xml拡張子なし)です。オプションのティック周波数はHzです。オプションのスイッチ HDLONLY は HDL-description のみを生成し、シンセシス、P&R、ダウンロードは実行しません。
argTestOption = -test name file 指定された回路に対してファイルからテストベクタを実行し、終了します。
argTtyOption = -ttyフォーマットをグラフィカルインターフェースなしで実行
argTwoSubstitutionError = "-sub" オプションの後に 2 つのパラメータを付ける必要があります。
argUsage = usage: java %s [オプション] [ファイル名]
argVersionOption = -version バージョン番号を表示して終了
invalidLocaleError = 指定されたロケールはサポートされていません。
invalidLocaleOptionsHeader = サポートされているロケール。
loadMultipleError = "-load" オプションは一度だけ指定できます。
loadNeedsFileError = "-load" を使用するには、コマンドラインで指定されたファイル名が必要です。
loadNeedsTtyError = "-load "オプションは"-tty "と組み合わせてのみ機能します。
templateCannotReadError = テンプレート・ファイル %s の読み取り権限がありません。
templateMissingError = テンプレート・ファイル %s は存在しません。
ttyFormatError = -tty は以下のうち少なくとも 1 つを必要とします: halt, speed, stats, table, tty。
ttyNeedsFileError = "-tty" を使うには、コマンドラインで指定したファイル名が必要です。
#
# start/TtyInterface.java
#
loadIoError = 画像ファイルの読み込み中にエラーが発生しました。
loadNoRamError = "-load "オプションでRAMが見つかりませんでした。
statsTotalWith = TOTAL (サブ回路を含む)
statsTotalWithout = TOTAL (プロジェクトのサブ回路を含まない)
ttyHaltReasonOscillation = 発振が検出されたために停止しました。
ttyHaltReasonPin = haltピンのために停止しました。
ttyLoadError = 回路ファイルのロードにエラーが発生しました。%s
ttyNoTtyError = TTY またはキーボード・コンポーネントが見つかりませんでした。
ttySpeedMsg = %s Hz (%s ticks in %s ミリ秒)
#
# test/TestFrame.java
#
failMessage = 失敗: %s
fileCannotParseMessage = "%s" のテスト・ベクターは解析できませんでした\n 詳細: %s.
fileCannotReadMessage = "%s.への読み取り権限がありません。
fileCannotReadTitle = ファイルは利用できません。
fileWrongPinsMessage = "%s" のテスト・ベクターは回路と一致しません。\n 詳細: %s.
fileWrongPinsTitle = テスト・ベクターのロード・エラー
loadButton = ベクターのロード
passMessage = パス: %s
resetButton = リセット
runButton = 実行
stopButton = 停止
testFrameMenuItem = %s. テストベクター
testFrameTitle = Logisim: %s のテスト・ベクター%s
#
# test/TestPanel.java
#
expectedValueMessage = 期待される %s
failStatus = 失敗
passStatus = パス
statusHeader = ステータス
#
# test/TestThread.java
#
testFailed = テスト・ベクター %s でのエラーです。
testLoadingFailed = テスト・ベクターのロード・エラー: %s
testLoadingVector = テスト・ベクター"%s" をロード中 ...
testResults = パス: %s, 失敗: %s
testRunning = %s ベクターを実行中 ...
testSetupFailed = テスト・ベクターの準備中のエラー: %s


