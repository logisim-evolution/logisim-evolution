#
# std/Builtin.java
#
builtinLibrary= Predefinido
# instance/StdAttr.java
stdFacingAttr= Posição
stdDataWidthAttr= Bits de dados
stdTriggerAttr= Gatilho
stdTriggerRising= Borda de subida
stdTriggerFalling= Borda de descida
stdTriggerHigh= Nível alto
stdTriggerLow= Nível baixo
stdLabelAttr= Rótulo
stdLabelFontAttr= Fonte do rótulo
# instance/InstanceTextField.java
changeLabelAction= Substituir rótulo
#
# std/base/Base.java
#
baseLibrary= Base

# std/base/BitExtender.java
extenderComponent= Extensor de bits
extenderInAttr= Largura em bits à entrada
extenderOutAttr= Largura em bits à saída
extenderTypeAttr= Tipo da extensão
extenderOneType= Um
extenderZeroType= Zero
extenderSignType= Sinal
extenderInputType= Entrada
extenderMainLabel= estendido
extenderOneLabel= 1
extenderZeroLabel= 0
extenderSignLabel= sinal
extenderInputLabel= entrada

# std/base/Clock
clockComponent= Clock
clockHighAttr= Duração em nível alto
clockLowAttr= Duração em nível baixo
clockDurationValue= %s pulsos
clockDurationOneValue= 1 pulso
durationSmallMessage= Valor deve ser ao menos %s.
durationLargeMessage= Valor deve ser %s ou menor.
freqInvalidMessage= Valor não é um inteiro válido

# std/base/Pin
pinComponent= Pino
pinInputName= Entrada
pinOutputName= Saída
pinThreeStateAttr= Tri-state?
pinOutputAttr= Saída?
pinPullAttr= Comportamento para ajuste
pinPullNoneOption= Sem alterações
pinPullUpOption= Ajustar para cima
pinPullDownOption= Ajustar para baixo
pinLabelLocAttr= Posição do rótulo
pinInputToolTip= Acrescentar um pino de entrada
pinOutputToolTip= Acrescentar um pino de saída
pinFrozenTitle= Pino associado ao supercircuito.
pinFrozenQuestion= Pino vinculado ao estado do supercircuito. Criar um novo estado do circuito?

# std/base/Probe
probeComponent= Ponta de prova

# std/base/PullResistor
pullComponent= Resistor para ajuste
pullTypeAttr= Direção para ajuste
pullZeroType= Zero
pullOneType= Um
pullErrorType= Erro

# std/base/Text.java
textComponent= Rótulo
textTextAttr= Texto
textFontAttr= Fonte
textHorzAlignAttr= Alinhamento horizontal
textHorzAlignLeftOpt= Esquerda
textHorzAlignRightOpt= Direita
textHorzAlignCenterOpt= Centro
textVertAlignAttr= Alinhamento vertical
textVertAlignTopOpt= Em cima
textVertAlignBaseOpt= Base
textVertAlignBottomOpt= Embaixo
textVertAlignCenterOpt= Centro

# std/base/Tunnel.java
tunnelComponent= Túnel

#
# std/Wiring.java
#
wiringLibrary = Conexão
wiringGateAttr = Posição
wiringGateBottomRightOption = Embaixo/Direita
wiringGateTopLeftOption = Em cima/Esquerda

# std/wiring/Transistor.java
transistorComponent = Transistor
transistorTypeAttr = Tipo
transistorTypeP = Tipo-P
transistorTypeN = Tipo-N

# std/wiring/TransmissionGate.java
transmissionGateComponent = Porta de Transmissão

# std/wiring/Power.java
powerComponent = Fonte

# std/wiring/Ground.java
groundComponent = Terra

#
# std/Gates.java
#
gatesLibrary= Portas
gateSizeAttr= Tamanho da porta
gateSizeNarrowOpt= Pequeno
gateSizeNormalOpt= Médio
gateSizeWideOpt= Grande
gateNegateAttr= Negar %s
gateInputsAttr= Quantidade de entradas
gateOutput01 = 0/1
gateOutput0Z = 0/flutuante
gateOutputZ1 = flutuante/1
gateOutputAttr = Valor de saída
xorBehaviorAttr= Comportamento para múltiplas entradas
xorBehaviorOne= Quando uma entrada estiver em 1
xorBehaviorOdd= Quando existir um número ímpar
# std/Constant.java
constantComponent= Constante
constantValueAttr= Valor
# std/NotGate.java
notGateComponent= Porta NOT
# std/Buffer.java
bufferComponent= Buffer
# std/AndGate.java
andGateComponent= Porta AND
# std/NandGate.java
nandGateComponent= Porta NAND
# std/NorGate.java
norGateComponent= Porta NOR
# std/OrGate.java
orGateComponent= Porta OR
# std/XorGate.java
xorGateComponent= Porta XOR
# std/XnorGate.java
xnorGateComponent= Porta XNOR
# std/OddParityGate.java
oddParityComponent= Paridade ímpar
# std/EvenParityGate.java
evenParityComponent= Paridade par
# std/ControlledBuffer.java
controlledBufferComponent= Buffer controlado
controlledInverterComponent= Inversor controlado
controlledControlOption= Posição da linha de controle
controlledLeftHanded= À esquerda
controlledRightHanded= À direita
#
# std/Memory.java
#
memoryLibrary= Memória
memEnableLabel= en
# AbstractFlipFlop.java
flipFlopClockTip= Clock: atualizar estado ao gatilho
flipFlopQTip= Estado atual do flip-flop
flipFlopNotQTip= Complemento do estado atual do flip-flop
flipFlopResetTip= Clear: quando em 1, o estado do pino será 0 assincronamente
flipFlopPresetTip= Preset: quando em 1, o estado do pino será 1 assincronamente
flipFlopEnableTip= Enable: quando em 0, os gatilhos de clock não serão efetivos
# std/Counter.java
counterComponent= Contador
counterMaxAttr= Valor máximo
counterGoalAttr= Ação quando houver transbordamento
counterGoalWrap= Reiniciar contagem
counterGoalStay= Permanecer no valor
counterGoalContinue= Continuar contando
counterGoalLoad= Carregar próximo valor
counterQTip= Saída: valor atual do contador
counterClockTip= Clock: valor pode ser atualizado ao gatilho
counterDataTip= Dados: valor a ser carregado no contador
counterLoadTip= Load: quando em 1, carregar a partir dos dados de entrada (se Count = 0) ou decrementar
counterEnableTip= Count: quando em 1, incrementar contador (ou decrementar se Load = 1)
counterUpDownTip = UpDown: quando em 1, incrementar contador; quando em 0, decrementar contador
counterResetTip= Clear: quando em 1, reiniciar em 0 assincronamente
counterCarryTip= Carry: será 1 quando o valor máximo for alcançado (ou mínimo se em decremento)
counterEnableLabel= ct
counterLabel= ctr
# std/DFlipFlop.java
dFlipFlopComponent= Flip-Flop tipo D
# std/TFlipFlop.java
tFlipFlopComponent= Flip-Flop tipo T
# std/JKFlipFlop.java
jkFlipFlopComponent= Flip-Flop tipo JK
# std/SRFlipFlop.java
srFlipFlopComponent= Flip-Flop tipo SR
# std/Random.java
randomSeedAttr= Semente
randomComponent= Gerador de valor aleatório
randomQTip= Saída: próximo número na sequência
randomClockTip= Clock: valor pode ser atualizado ao gatilho
randomNextTip= Enable: passos até o próximo na sequência ao gatilho do clock
randomResetTip= Clear: quando em 1, reiniciar com a semente inicial assincronamente
# std/Register.java
registerComponent= Registrador
registerQTip= Saída: valor corrente do registrador
registerDTip= Data: valor armazenado ao gatilho do clock
registerClkTip= Clock: valor atualizado ao gatilho
registerClrTip= Clear: quanto em 1, o valor do pino será 0 assincronamente
registerEnableTip= Enable: quando em 0, os gatilhos de clock não serão efetivos
registerLabel= reg
registerWidthLabel= (%sb)
registerShowInTab = Mostrar na aba Registradores
# std/RamFactory.java
ramComponent= RAM
# std/RomFactory.java
romComponent= ROM
romContentsAttr= Conteúdos
romContentsValue= (clicar para editar)
romChangeAction= Editar conteúdos da ROM
# std/Ram.java
ramAddrWidthAttr= Largura em bits do endereço
ramDataWidthAttr= Largura em bits dos dados
ramDataAddrAttr = Endereçamento de byte
ramDataLabel= D
ramAddrLabel= A
ramWELabel= str
ramCSLabel= sel
ramOELabel= ld
ramClrLabel= clr
ramByteEnableTip0 = Habilitar byte para bits 7..0
ramByteEnableTip1 = Habilitar byte para bits 15..8
ramByteEnableTip2 = Habilitar byte para bits 23..16
ramByteEnableTip3 = Habilitar byte para bits 31..24
ramWithByteEnables = Usar ativação de byte
ramNoByteEnables = Somente leitura/escrita de palavra completa
ramByteEnables = Controle de leitura e escrita
ramGigabyteLabel= %sGB RAM
ramMegabyteLabel= %sMB RAM
ramKilobyteLabel= %sKB RAM
ramByteLabel= %sB RAM
romGigabyteLabel= %sGB ROM
romMegabyteLabel= %sMB ROM
romKilobyteLabel= %sKB ROM
romByteLabel= %sB ROM
memDataTip= Data: valor carregado a partir do endereço
memAddrTip= Address: posição acessada na memória
memCSTip= Chip select: 0 desabilita componente
ramClkTip= Clock: valor da memória será atualizado na varição de 0 para 1 
ramOETip= Load: se 1, carregar memória à saída
ramWETip= Store: se 1, armazenar entrada na memória
ramClrTip= Clear: conteúdos dos pinos em 1 irá para 0 assincronamente
ramBusTip= Data: valor carregado ou armazenado no endereço
ramInTip= Entrada: valor a ser armazenado no endereço
ramBusAttr= Interface de dados
ramBusSynchCombined= Porta para carga/armazenamento síncrono
ramBusAsynchCombined= Porta para carga/armazenamento assíncrono
ramBusSeparate= Portas para carga e armazenamento separados
ramBidirDataBus = Um barramento de dados bidirecional
ramSeparateDataBus = Barramento de dados separado para leitura e escrita
ramDataAttr = Implementação do barramento de dados
ramAttrRdTick = Implementação da leitura
ramAttrRdTickDefault = Ler na borda selecionada
ramAttrRdTickEarly = Aguardar 1 sysclk antes de ler
ramEditMenuItem= Editar conteúdos...
ramClearMenuItem= Limpar conteúdos
ramLoadMenuItem= Carregar imagem...
ramSaveMenuItem= Salvar imagem...
ramConfirmClearTitle= Confirmar apagamento
ramConfirmClearMsg= Tem certeza que quer zerar toda a memória
ramLoadDialogTitle= Carregar imagem da RAM
ramLoadErrorTitle= Carregar erro
ramSaveDialogTitle= Salvar imagem da RAM
ramSaveErrorTitle= Erro ao salvar
# std/memory/ShiftRegister.java
shiftRegisterComponent= Registrador de deslocamento
shiftRegisterLabel1= shift reg
shiftRegisterLabel2= %sx%s
shiftRegLengthAttr= Número de estágios
shiftRegParallelAttr= Carga em paralelo
shiftRegShiftTip= Shift: desabilitar se 0
shiftRegClockTip= Clock: valores poderão ser atualizados ao gatilho
shiftRegClearTip= Clear: quando em 1, reiniciar todos os valores em 0 assincronamente
shiftRegInTip= Entrada: valor a ser deslocado no primeiro estágio
shiftRegOutTip= Saída: conteúdo do último estágio
shiftRegLoadTip= Load: quando em 1 (com shift = 0), todos os estágios serão carregados a partir das entradas
#
# std/Plexers.java
#
plexerLibrary= Plexers
plexerSelectBitsAttr= Bits para seleção
plexerThreeStateAttr= Tri-state?
plexerDisabledAttr= Desabilitar saída
plexerDisabledFloating= Flutuante
plexerDisabledZero= Zero
plexerEnableAttr = Incluir Enable?
plexerSelectLocAttr = Selecionar posição
plexerSelectTopRightOption = Acima/Direita
plexerSelectBottomLeftOption = Abaixo/Esquerda
# std/Multiplexer.java
multiplexerComponent= Multiplexador
multiplexerSelectTip= Select: identificar qual entrada se tornará saída
multiplexerEnableTip= Enable: quando diferente de 0, a saída será a entrada selecionada
multiplexerInTip= Entrada %s
multiplexerOutTip= Saída
# std/Demultiplexer.java
demultiplexerComponent= Demultiplexador
demultiplexerSelectTip= Select: identificar qual saída receberá a entrada
demultiplexerEnableTip= Enable: quando diferente de 0, a saída selecionada será entrada
demultiplexerInTip= Entrada
demultiplexerOutTip= Saída %s
# std/Decoder.java
decoderComponent= Decodificador
decoderSelectTip= Select: identificar qual saída será igual a 1
decoderEnableTip= Enable: quando diferente de 0, a saída selecionada será 1
decoderOutTip= Saída %s
# std/plexers/PriorityEncoder.java
priorityEncoderComponent= Codificador de prioridade
priorityEncoderInTip= Entrada %s
priorityEncoderOutTip= Saída: endereço do valor 1 mais significativo na entrada
priorityEncoderEnableInTip= Enable Input: 0 irá desabilitar o componente
priorityEncoderEnableOutTip= Enable Output: 1 se habilitado e nenhuma entrada estiver em 1
priorityEncoderGroupSignalTip= Group Select: 1 se habilitado e alguma entrada estiver em 1
# std/BitSelector.java
bitSelectorComponent= Selector de bit
bitSelectorGroupAttr= Bits de saída
bitSelectorOutputTip= Saída: valor do grupo de bits selecionados a partir dos dados
bitSelectorDataTip= Dados
bitSelectorSelectTip= Select: identificar qual grupo de dados da entrada será selecionado
#
# arith/Arithmetic.java
#
arithmeticLibrary= Aritmética
# arith/Adder.java
adderComponent= Somador
adderInputTip= Entrada: um dos números a ser adicionado
adderOutputTip= Saída: a soma das entradas (mais "carry in")
adderCarryInTip= Carry In: se 1, um valor adicional em 1 será adicionado à saída
adderCarryOutTip= Carry Out: 1 se a soma transbordar para os bits disponíveis
# arith/Subtractor.java
subtractorComponent= Subtrator
subtractorMinuendTip= Minuendo: número do qual outro será subtraído
subtractorSubtrahendTip= Subtraendo: número a subtrair do minuendo
subtractorOutputTip= Saída: a diferença entre o minuendo e o subtraendo
subtractorBorrowInTip= Borrow In: se 1, 1 será deduzido da saída
subtractorBorrowOutTip= Borrow Out: 1 se a diferença levar a um valor negativo
# arith/Multiplier.java
multiplierComponent= Multiplicador
multiplierInputTip= Entrada: um dos números a ser multiplicado
multiplierOutputTip= Saída: o produto das entradas, mais o "carry in"
multiplierCarryInTip= Carry In: valor a ser adicionado à saída
multiplierCarryOutTip= Carry Out: bits mais significativos do produto
# arith/Divider.java
dividerComponent= Divisor
dividerUpperInput= upper
dividerRemainderOutput= rem
dividerDividendLowerTip= Parte baixa do dividendo: metade baixa do número a ser dividido
dividerDividendUpperTip= Parte alta do dividendo: metade alta do número a ser dividido
dividerDivisorTip= Divisor: número pelo qual será dividido
dividerOutputTip= Saída: o resultado da divisão do dividendo pelo divisor
dividerRemainderTip= Resto: o resto da divisão (dividendo - output * divisor)
# arith/Negator.java
negatorComponent= Negador
negatorInputTip= Entrada: número a ser negado
negatorOutputTip= Saída: complemento de dois da entrada
# arith/Comparator.java
comparatorComponent= Comparador
comparatorType= Tipo numérico
unsignedOption= Sem sinal
twosComplementOption= Complemento de 2
comparatorInputATip= A: número precedendo a operação de comparação
comparatorInputBTip= B: número seguindo a operação de comparação
comparatorLessTip= Less: 1 se A for menor que B
comparatorEqualTip= Equal: 1 se A igual a B
comparatorGreaterTip= Greater: 1 se A for maior que B
# arith/Shifter.java
shifterComponent= Deslocador
shifterShiftAttr= Tipo do deslocamento
shiftLogicalLeft= Lógico para a esquerda
shiftLogicalRight= Lógico para a direita
shiftArithmeticRight= Aritmético para a direita
shiftRollLeft= Com rotação à esquerda
shiftRollRight= Com rotação à direita
shifterDistanceTip= Distance: até onde deslocar a entrada
shifterInputTip= Entrada: bits a serem deslocados
shifterOutputTip= Saída: resultado do deslocamento da entrada
# arith/BitAdder.java
bitAdderComponent= Contador de bits
bitAdderInputTip= Entrada: bits a serem contados
bitAdderOutputManyTip= Saída: número de bits de entrada iguais a 1
# arith/BitFinder.java
bitFinderComponent= Indexador de bits
bitFinderFindLabel= find
bitFinderHighLabel= alto
bitFinderLowLabel= baixo
bitFinderHighOption= Mais alta ordem %s
bitFinderLowOption= Mais baixa ordem %s
bitFinderTypeAttr= Tipo
bitFinderIndexHighTip= Index: índice da mais alta ordem da entrada %s
bitFinderIndexLowTip= Index: índice da mais baixa ordem da entrada %s
bitFinderPresentTip= Present: 1 se a entrada contiver um %s
bitFinderInputTip= Entrada: bits a serem procurados
#
# io
#
# io/Io.java
ioLibrary= Entrada/Saída
ioLabelCenter= Centro
ioBitWidthAttr= Largura em bits
ioColorAttr= Cor
ioLabelLocAttr= Posição do rótulo
ioLabelColorAttr= Cor do rótulo
ioActiveAttr= Ativar em alto?
# io/Button.java
buttonComponent= Botão
# io/Joystick.java
joystickComponent= Joystick
# io/Keyboard.java
keyboardComponent= Teclado
keybDesc= teclado (buffer cap. %s)
keybBufferLengthAttr= Tamanho do buffer
keybClearTip= Clear: 1 irá limpar o buffer
keybClockTip= Clock: ao gatilho irá consumir o primeiro caractere no buffer
keybEnableTip= Read enable: 0 irá desabilitar o clock
keybAvailTip= Available: 1 quando o buffer contiver caracteres
keybOutputTip= Data: valor ASCII do primeiro caractere no buffer
# io/Led.java
ledComponent= LED
RGBledComponent = LED RGB
# io/DipSwitch.java
dipswitchComponent = Dip switch
nrOfSwitch = Quantidade de chaves
# io/SevenSegment.java
sevenSegmentComponent= Display de 7-segmentos
# io/HexDigit.java
hexDigitComponent= Display hexadecimal
# io/DotMatrix.java
dotMatrixComponent= Matriz de LED
ioMatrixInput= Formato da entrada
ioMatrixRows= Linhas da matriz
ioMatrixCols= Colunas da matriz
ioOnColor= Cor se ligado
ioOffColor= Cor se desligado
ioBackgroundColor= Fundo
ioMatrixPersistenceAttr= Persistência
ioMatrixShape= Forma dos pontos
ioInputColumn= Colunas
ioInputRow= Linhas
ioInputSelect= Selecionar linhas/colunas
ioShapeCircle= Circular
ioShapeSquare= Quadrado
# io/Tty.java
ttyComponent= TTY
ttyDesc= TTY (%s linhas, %s colunas)
ttyDescShort= TTY
ttyRowsAttr= Linhas
ttyColsAttr= Colunas
ttyClearTip= Clear: 1 irá limpar a tela
ttyClockTip= Clock: ao gatilho irá acrescentar caractere à entrada
ttyEnableTip= Write enable: 0 irá desabilitar o clock
ttyInputTip= Data: valor ASCII do próximo caractere a ser escrito
# io/PortIO.java
pioComponent = Porta para entrada/saída
pioNumber = Número do PIN
pioShowBus = Tipo da conexão ?
pioBuses = Um ou mais barramentos
pioPins = Pino único
# io/ReptarLocalBus.java
repLBComponent = Reptar Local Bus
#
# hdl
#
# hdl/hdl.java
hdlLibrary = HDL-IP
# hdl/VhdlEntity.java
vhdlComponent = Entidade VHDL
vhdlContentAttr = Conteúdo
vhdlContentValue = (clicar para editar)
# hdl/VhdlParser.java
emptySourceException = Impossível interpretar conteúdo vazio
duplicatedEntityException = Detectada definição de entidade duplicadas
CannotFindEntityException = Impossível encontrar definição de entidade
CannotFindLibrariesException = Impossível encontrar definições de bibliotecas
invalidVhdlFile = Estrutura do arquivo VHDL inválida
missingBracketException = Falta colchete na definição de portas
portDeclarationException = Erro de sintaxe na porta
multiplePortsDeclarationException = Erro de sintaxe em múltiplas portas
vectorDeclarationException = Erro de sintaxe em vetor
lineDeclarationException = Erro de sintaxe na linha
invalidTypeException = Tipo de porta inválido
keywordNotFoundException = Impossível encontrar palavra-chave '%s' na descrição da entidade
# HdlContentEditor.java
hdlFrameTitle = Logisim-evolution: Editor HDL
openButton = Importar...
saveButton = Exportar...
validateButton = Validar conteúdo
closeButton = Fechar janela
importMessage = Qualquer modificação feita neste componente será descartada. Importar mesmo assim?
importTitle = Confirmar importação
importOption = Importar
cancelOption = Cancelar
confirmCloseYes = Sim
confirmCloseNo = Não
confirmCloseBackup = Criar backup
confirmCloseTitle = Confirmar fechamento
confirmCloseMessage = Qualquer modificação feita neste componente será descartada. Fechar mesmo assim?
# HdlContent
validationErrorButton = Continuar
validationParseError = Erro na interpretação
#
# tcl
#
tclLibrary = TCL
tclConsoleReds = Console TCL REDS
tclGeneric = TCL genérico
tclConsoleContentFile = Arquivo com conteúdo TCL

tclInterfaceDefinition = TCL interface para entidade VHDL
tclInterfaceDefinitionValue = (clicar para editar)
