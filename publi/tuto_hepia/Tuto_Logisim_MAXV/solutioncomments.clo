%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Solution.sty   version 3.6, October 1999
%
% Purpose:
% selectively in/exclude pieces of text: the user can define new
% solution versions, and each is controlled separately.
% Special solutions can be defined where the user specifies the
% action that is to be taken with each solution line.
%
% Author
%    Victor Eijkhout
%    Department of Computer Science
%    University of Tennessee
%    107 Ayres Hall
%    Knoxville TN 37996
%    USA
%
%    victor@eijkhout.net
%
% This program is free software; you can redistribute it and/or
% modify it under the terms of the GNU General Public License
% as published by the Free Software Foundation; either version 2
% of the License, or (at your option) any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% For a copy of the GNU General Public License, write to the 
% Free Software Foundation, Inc.,
% 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA,
% or find it on the net, for instance at
% http://www.gnu.org/copyleft/gpl.html
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This style can be used with plain TeX or LaTeX, and probably
% most other packages too.
%
% Usage: all text included between
%    \solution ... \endsolution
% or \begin{solution} ... \end{solution}
% is discarded. 
%
% The opening and closing commands should appear on a line
% of their own. No starting spaces, nothing after it.
% This environment should work with arbitrary amounts
% of solution, and the solution can be arbitrary text.
%
% Other `solution' environments are defined by
% and are selected/deselected with
% \includesolution{versiona}
% \excludecoment{versionb}
%
% These environments are used as
% \versiona ... \endversiona
% or \begin{versiona} ... \end{versiona}
% with the opening and closing commands again on a line of 
% their own.
%
% LaTeX users note: for an included solution, the
% \begin and \end lines act as if they don't exist.
% In particular, they don't imply grouping, so assignments 
% &c are not local.
%
% Special solutions are defined as
% \specialsolution{name}{before commands}{after commands}
% where the second and third arguments are executed before
% and after each solution block. You can use this for global
% formatting commands.
% To keep definitions &c local, you can include \begingroup
% in the `before commands' and \endgroup in the `after commands'.
% ex:
% \specialsolution{smalltt}
%     {\begingroup\ttfamily\footnotesize}{\endgroup}
% You do *not* have to do an additional
% \includesolution{smalltt}
% To remove 'smalltt' blocks, give \excludesolution{smalltt}
% after the definition.
%
% Processing solutions can apply processing to each line.
% \processsolution{name}{each-line commands}%
%    {before commands}{after commands}
% By defining a control sequence 
% \def\Thissolution##1{...} in the before commands the user can
% specify what is to be done with each solution line.
% BUG this does not work quite yet BUG
%
% Trick for short in/exclude macros (such as \maybe{this snippet}):
%\includesolution{cond}
%\newcommand{\maybe}[1]{}
%\begin{cond}
%\renewcommand{\maybe}[1]{#1}
%\end{cond}
%
% Basic approach of the implementation:
% to solution something out, scoop up  every line in verbatim mode
% as macro argument, then throw it away.
% For inclusions, in LaTeX the block is written out to
% a file \SolutionCutFile (default "solution.cut"), which is
% then included.
% In plain TeX (and other formats) both the opening and
% closing comands are defined as noop.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Changes in version 3.1
% - updated author's address
% - cleaned up some code
% - trailing contents on \begin{env} line is always discarded
%  even if you've done \includesolution{env}
% - solutions no longer define grouping!! you can even
%   \includesolution{env}
%   \begin{env}
%   \begin{itemize}
%   \end{env}
%  Isn't that something ...
% - included solutions are written to file and input again.
% Changes in 3.2
% - \specialsolution brought up to date (thanks to Ivo Welch).
% Changes in 3.3
% - updated author's address again
% - parametrised \SolutionCutFile
% Changes in 3.4
% - added GNU public license
% - added \processsolution, because Ivo's fix (above) brought an
%   inconsistency to light.
% Changes in 3.5
% - corrected typo in header.
% - changed author email
% - corrected \specialsolution yet again.
% - fixed excludesolution of an earlier defined environment.
% Changes in 3.6
% - The 'cut' file is now written more verbatim, using \meaning;
%   some people reported having trouble with ISO latin 1, or umlaute.sty.
% - removed some \newif statements.
%   Has this suddenly become \outer again?
%
% Known bugs:
% - excludesolution leads to one superfluous space
% - processsolution leads to a superfluous line break
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\def\makeinnocent#1{\catcode`#1=12 }
\def\csarg#1#2{\expandafter#1\csname#2\endcsname}
\def\latexname{lplain}\def\latexename{LaTeX2e}
\newwrite\SolutionStream
\def\SolutionCutFile{solution.cut}

\def\ProcessSolution#1% start it all of
   {\begingroup
    \def\CurrentSolution{#1}%
    \let\do\makeinnocent \dospecials 
    \makeinnocent\^^L% and whatever other special cases
    \endlinechar`\^^M \catcode`\^^M=12 \xSolution}
%\def\ProcessSolutionWithArg#1#2% to be used in \leveledsolution
%   {\begingroup
%    \def\CurrentSolution{#1}%
%    \let\do\makeinnocent \dospecials 
%    \makeinnocent\^^L% and whatever other special cases
%    \endlinechar`\^^M \catcode`\^^M=12 \xSolution}
{\catcode`\^^M=12 \endlinechar=-1 %
 \gdef\xSolution#1^^M{%
    \expandafter\ProcessSolutionLine}
 \gdef\ProcessSolutionLine#1^^M{\def\test{#1}
      \csarg\ifx{End\CurrentSolution Test}\test
          \edef\next{\noexpand\EndOfSolution{\CurrentSolution}}%
      \else \ThisSolution{#1}\let\next\ProcessSolutionLine
      \fi \next}
}

\def\CSstringmeaning#1{\expandafter\CSgobblearrow\meaning#1}
\def\CSstringcsnoescape#1{\expandafter\CSgobbleescape\string#1}
{\escapechar-1
\expandafter\expandafter\expandafter\gdef
  \expandafter\expandafter\expandafter\CSgobblearrow
    \expandafter\string\csname macro:->\endcsname{}
}
\def\CSgobbleescape#1{\ifnum`\\=`#1 \else #1\fi}
\def\WriteSolutionLine#1{\def\CStmp{#1}%
    \immediate\write\SolutionStream{\CSstringmeaning\CStmp}}

% 3.1 change: in LaTeX and LaTeX2e prevent grouping
\if 0%
\ifx\fmtname\latexename 
    0%
\else \ifx\fmtname\latexname 
          0%
      \else 
          1%
\fi   \fi
%%%%
%%%% definitions for LaTeX
%%%%
\def\AfterIncludedSolution
   {\immediate\closeout\SolutionStream
    \input{\SolutionCutFile}\relax
    }%
\def\TossSolution{\immediate\closeout\SolutionStream}
\def\BeforeIncludedSolution
   {\immediate\openout\SolutionStream=\SolutionCutFile
    \let\ThisSolution\WriteSolutionLine}
\def\includesolution
 #1{\message{Include solution '#1'}%
    \csarg\let{After#1Solution}\AfterIncludedSolution
    \csarg\def{#1}{\BeforeIncludedSolution
        \ProcessSolution{#1}}%
    \SolutionEndDef{#1}}
\long\def\specialsolution
 #1#2#3{\message{Special solution '#1'}%
    % note: \AfterIncludedSolution does \input, so #2 goes here!
    \csarg\def{After#1Solution}{#2\AfterIncludedSolution#3}%
    \csarg\def{#1}{\BeforeIncludedSolution\relax
          \ProcessSolution{#1}}%
    \SolutionEndDef{#1}}
\long\def\processsolution
 #1#2#3#4{\message{Lines-Processing solution '#1'}%
    \csarg\def{After#1Solution}{#3\AfterIncludedSolution#4}%
    \csarg\def{#1}{\BeforeIncludedSolution#2\relax
          \ProcessSolution{#1}}%
    \SolutionEndDef{#1}}
\def\leveledsolution
 #1#2{\message{Include solution '#1' up to level '#2'}%
    %\csname #1IsLeveledSolutiontrue\endcsname
    \csarg\let{After#1Solution}\AfterIncludedSolution
    \csarg\def{#1}{\BeforeIncludedSolution
        \ProcessSolutionWithArg{#1}}%
    \SolutionEndDef{#1}}
\else 
%%%%
%%%%plain TeX and other formats
%%%%
\def\includesolution
 #1{\message{Including solution '#1'}%
    \csarg\def{#1}{}%
    \csarg\def{end#1}{}}
\long\def\specialsolution
 #1#2#3{\message{Special solution '#1'}%
    \csarg\def{#1}{\def\ThisSolution{}\def\AfterSolution{#3}#2%
           \ProcessSolution{#1}}%
    \SolutionEndDef{#1}}
\fi

%%%%
%%%% general definition of skipped solution
%%%%
\def\excludesolution
 #1{\message{Excluding solution '#1'}%
    \csarg\def{#1}{\let\AfterSolution\relax
           \def\ThisSolution####1{}\ProcessSolution{#1}}%
    \csarg\let{After#1Solution}\TossSolution
    \SolutionEndDef{#1}}

\if 0%
\ifx\fmtname\latexename 
    0%
\else \ifx\fmtname\latexname 
          0%
      \else 
          1%
\fi   \fi
% latex & latex2e:
\def\EndOfSolution#1{\endgroup\end{#1}%
    \csname After#1Solution\endcsname}
\def\SolutionEndDef#1{{\escapechar=-1\relax
    \csarg\xdef{End#1Test}{\string\\end\string\{#1\string\}}%
    }}
\else
% plain & other
\def\EndOfSolution#1{\endgroup\AfterSolution}
\def\SolutionEndDef#1{{\escapechar=-1\relax
    \csarg\xdef{End#1Test}{\string\\end#1}%
    }}
\fi

\excludesolution{solution}

\endinput
